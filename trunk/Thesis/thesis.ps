%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: thesis.dvi
%%CreationDate: Fri May 20 17:48:42 2011
%%Pages: 20
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMBX12 CMR17 CMR12 CMTI12 CMSY10 CMMI12 CMMI8 CMBX10
%%+ CMMI10 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o thesis.ps thesis.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1748
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: cmbx10.pfb 0 0
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
 /FullName (CMBX10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Bold) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 171 /sfthyphen put
dup 172 /nbspace put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA0E079529AF9C
82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA9351BBFB7CFC5F9152D1E5BB0A
D8D016C6CFA4EB41B3C51D091C2D5440E67CFD717C56816B03B901BF4A25A07175380E50A213
F877C44778B3C5AADBCC86D6E551E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206
742D1D082A12F0780FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC54
3273C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DBB6C2BD2F
04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A6DEA4D271676C2C8615C
4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF639BE073001A36DEA6C08ED51452F062B
971740019692E221F4455EDE46AF24B8407A98B791F6AD525C72C09776247E194043281D04FE
1CD1D8AD8DCEEC3045B4F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694
AE108BAF285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33DE08
3C20D636EF780E76196EBD6EB9A8AD0D5C590F0963BAC7667DD74EEFF4739C067E092F6DB18F
75FFF9B267885F26D398B7D5F558478C5D3BCB0764B9C46938F44DC4D1140EEC280D0F576D72
8A5F6B1BF747C71619001BC82B72541EB653CE4015B0A538CF2BAC8DB0A8C17D70138667B575
6FF79FE8AE36EF127BE18849B32281061FDC18C80C19D2FA5482C839C771D45EE95F6DD42FB0
CB92982832C148360E0C09A666658A074209EDF384ED62BB0855D39762E1B1B16F33039C1339
9C576D6712B0B30ABAE77F9CA3A8000536D22267E8CBD6A858C529E60AFA29E128481E294389
97EFE81731303B4A25D84CEE0C9BF1C61D67A2F89F1ECF33AEE0282B8475D27D74F7C39317B7
1F39B0722FBB4B8553820C8E6052E0BEBADD426F292F282E2A36328452D9BF2253D0658218C1
5A2E97E1148C002E8EEF7977706AE775D3FB84FE49EF224B11E9661D5948ADB077E525F81A70
4C305F1B59B7DC421DAE5B09D064CCAF55EE88CEE13911A3DCBE9623D8995431AD66A82BF0F7
8430CD95D672F4BEDD5751844AA3B0FB0B37FD7F7FB5AA436EFDC159DFFAFF3D7989CF5684FD
D18F78243D5BCF69B95EA7C47EBB6521CE5EB9BB2204E7CDE699ED4F3595AF28417E6521EEE8
CEA907BB1B23480E1CDB579D8CC2C79DF883769411DE56F72D16E67673D11BC9A996AD5C5CFC
1FDE7F550B915A193235A4BECCAC701A67DF5C84FEBA7997B748D280ABD108305123CE11B5AB
5937FD2BFA07A96738BD15B8F06620028D2E1812B1E2BFEE8847BFA1137CB08B443914C79571
F87AD9914F204F942BD7116DE1087E674899A1B5061F72FF134006595292C7DEE518B7156B66
05D06E368BAA9464C0E6C1F55F357AAA2F8AC90BFBBB94585BA72F11ADACA8305A04CD6C07A1
B70A4211A801BD6607077115FC2CB052E792EDD27D5D700EB4DE25327B0F50C1AB29E5367264
A2164B207159893866B9B32A1D7C0133F428DAADA7CFB2B5A4F180D831FAE8A4BA0952873FE6
37F2D4A2AFB4CFB65CEF26C8D0F3B7B38452F4470C9FE42A6D8248BE3C7D76FB017F0F228D33
72F49A3CF41DC00D0ECAF1F4509EBD57538528A81263CA54697074CFB527EDBD74636F7F28EA
AE46B66DEFB4C233AD0DA007B6978FFB0F3D3ABC9EEC8AA12DC8A051AF538DCC6063E3B137B4
A359AD53522F6CD3C7676A4BD25FF6AB5D0E25C083A6FB113B626EB46547F361EC55D2671363
8D7C381FE3E209D61165B30970C25CCE56314B4917662FE1A3D8436CD3DBC306847987E00C10
AC83A74CDD62DF1CF7EE6EB23A3D910FB48C6F2E546940A7D9154A89AD58B0946C727D18D235
AF390EC8DE9ADA3BBB5B0D7A9E32F8F4698FAC50F445E6C67C55680C1B74CEC385CF61910709
61334C72387B00722228ABCBC21B4FF7C5DB2850F65E243CC1666EDBB18D5A09D2E175E671CF
A24D35178E5E04326A274FCF9F1AD07B57EC7EB025FE4FB024C83418BE892B9BA5D0A633E09E
F28EB5C73AA211D4684B697916DD845D24C952E88A7C4A69FB40E90DEBB32264C021AC83B5C7
7077FF47C85EFAFF2396F88AE7269E4875D1FDF647F636FD714B823846D90C5B8B3BF711D631
F827B1644331E4B82620287D7433876960928748540E5C03C31E16C56960BF0941CD26E28D3D
54E4FBEF7DE791A58CA9E1AD1CB9E0A0F196A9C389A657838A6C35BA717E180FC3FEB8EA740F
4E3363C45DAD7C5B2B7A27BFC86E1159F3211580CF4BF027C556BDD2E1FC11C684585173CA54
AA68967DA203DA98C8D38321EB298D9BF5193468FB202A6B25266A7EC83472D6B6D0662743F4
68AE3479DB948C36047C43492113F53EB84AF486687B25350D37D933181CAE79EECAF57B12CD
15D179292EE7ADF8A56D84D4C080D2E49EBCDE739C3BA73090C1868AB9D22B2D426B79993EBB
F48658118D52FE0A20BF3A29674D3BC70DDC2F565EBFE26B8A1B9D50DD0BD5C381A6369CDF2C
F415672740BF106EBAD216CED4CBA8BDAB6AC2CBC8E70FCF2AD869EC2051257BF2E938EA6826
C2B968888571F91C347D38951F806DB3694FC7F4AE10029343DF20CF86AF16AEFBF11D2D9E30
88154CEB262BB81691D7020AF486B1630E23E46EB9F00DA3C37D62B5D9FE9DC06A74802536F9
186D368FDC29346C1C6FBF00CFD784AF5842E196BC908726165E9695F552679E3CF19EBFBB0B
A0DF2B1DF065081DD7857641787656DD03BE6B2C8FC5EF854B89E9C7C966B4A0B77EAA0A898C
3CEB111A24BC1EC12FC8525D2B1DBA2D6C65253CC673C022F642C7B884A05443859EE8DE0283
BB1D73AADBB5F73A1E684405A8C12F1A4BFE00907577F2A75C04CB6D02CDB4812A3770BDD372
CE44DC8698A7F3A0A18F3321131E064E8B88FA49A2592D983C522E41F062B51509254A7BE8E0
3CBFF95492189085A5DEEA7E4FFA6EA787BDA03F0D763CF4432DEC344C4028861ACEEB2D1587
C1E2FF5CF22D23C9D02DDA5586D8B52037FF66D80C3B536564F9C56BFADE5605C9D2BC2811E8
9E23EE867A2DFA7B4E85E07F319F6D08D713502F04F043071D4522C1E525146CAF520BE38C3A
31BCA06E3292A3D919E0E1429D799B273F2B224C7D790C9437BF248A94FC2176B46C9B1CBA01
57C9D19ACF1C0E2E90BB7C762DB169955A3C2F968604D5AA0EEE51DF7EB90DE8D089C432E167
58C23D391768D9EE3E0319151C29F5C7AEDE8E9A3BCBB0F5C02744CA63BCB1DECD9F7CE8D6A2
F5ADD89DB575F4FC2C1B1A17E56AB98866C90080D62767A75024BE669C60B6C0B410299391AC
EA10C8A42C4261746098EFC4BD0243F704970AC8819D6B8EF8ED1DF8C4540D5566D547B0DEED
36EBB702D898E700E6114074112167A2D0ECB73D484613972B0D594BC7B3365783885279E30D
C50B20E7974C8B6069CBCB776675322CB6579018618125FD503E54330F960A4D64CDD611646E
3123E0AA40D2A0B2BDEC191E5FCB660EA1B68D0C11A46395BB23E9B7EF46AC77A6FDAEFCE31B
2F298CCE2601E16360EF10B6A79CEA6C577C759684F5DD6D6B9243A5436080116BA0E804A97E
EBB6128B03BCB48534878518598CF21B3E897FD2840D59B6CD3F5CC0592B522FFD6DFAA9FAE5
2CE397B401E0D7695616B1A27FE93EF4F9F29B375157F99DBEDAEC503DDF27653B5B367D5497
959E3D29F8D8F326ED87E24675A0C80C10F1A03D5A7D6BF0A78193E038E61054BC332210BF5A
D11BF0A78DB2EE21CB1E811D903E63836BE32530A7150DC71D238200208A6054FE86C234FC94
4CF77A704AFC71641BE0208B63B65C467A9CA05F53B770260D11594D122AD6EA034B8DA7B7E9
54FF76DC292609EC34D429E90F591A92319EFAA65A0C2C3F3338BC511B5242E7FA4AF4388398
9A9071F044CD0947EA0A82C95FE53A6CF677247783DE3C356197067AC1D48DEDD671FB5ABF04
E5E8417BD64402D3CDF380EA1F6BA6D41D8E72DF60301393317CE7B832A641B3C8393D40B77E
01847C627078FAD56B22A390049F73645C86B165C9482E726EBD07E93DFA73325D7BC625EEF1
E933210EFD13E4081621ED247128BAE5196BA1185AEB7722695DBDCDA7EBCD9BFC566843B911
BFFD2379CE7B0CDFA190D49C8655310268667EC47EA9D35B3920D537D61CE45A7B88D923A1F0
4D18BB07E5D63EE84407DB1E5256E7E5EF08ED7CA0966FEC918607EA239E150EC8696072586B
65E00F0AA7C13B12C15A2A34364173583C98BFEE7858857D4523D8C1A11C6F2EE75B4746DD37
3AA13B934DA86D09113C072E9C014A5C5318C5FE76748F5BFDAEEBFB06CFEB09EBB31428E48A
498E3B7DF3E7BDEA24F80317A7430D6F71037C6460CFF8B657CA6BEB07598DF61AA6E55A1876
90568F4823C5B15D28B8C77D817EE6697425A6699D45F6A97703368119A8AD48BEBFADA3575F
7B4C60F54F022FC9E85A9440AF1DB056A577A05F8E3779F2FBD9F871252CF7FE20F464296A30
FBF2B7759D2F6CDAB81E2E622FFED36B9A2F2E0A6105B946843B5898BA004B60D51FE3ED868C
05142B30A663B8974E0B8A772A49F2327E6575FA5BB8F8DBE5484C1FB7F5D82AC176FB5C7ADD
B7111D5317A64559004E5C63F1440A903EE1F9E6B05E958B3358C181EEAAA79837D10A66CE09
81E3C144753BB4D8E43120FEE513DB4A8FA90F1EA4452BD7613E10A70DEC96BFD6D5D1BA189E
DFA5257BA172B43727FC9D8AE562F557B456940C348EAC7F6357B8A58F8A415A16818F171ACF
54BCBF1370F38E4ADE8C314ACE55B91C12F1D9EC20E803DAEA65DDF994F982A83DFF6ADF3749
B48487F9C95D341EDF99E040F0C0FEC4BEF20DA51745613723AD4076500AE3E88346511A4350
CAA2429826A3F49ADF7CA8474AECDFCE41E42C38ECE644A450C5CF88D522AC293B8EE1B59E1F
39689780F8B92A6D9CFA765AB5EEBB7C7FB212B4A4BDC0426F8D93DDF7E793317A08EF326881
86663D6F40451B0EEBB7E60B8702A03F51BC510645C03EE0F5614BEF6779E34FA3591206137A
3CF6492AF2BF2EFB1AE0634B664108CA6B46203FF37FE4FE83574E2175020B6932BF706A0C01
1E53154DD9F25AC043CD302B3B19C89DFC46861D6DCF2FB24127FBE7284B2D3E53583083DF4F
E3ADA87A397A32B19FEE8FCAF50F5297B86448AD92239030CEA12A6DB32E8AD45E9F173A0360
7541D20C4A159B491E590D0FCD3E24092DEBFFCB0B526ABB6D07F84C568584050210A0AC9977
878C9A77A4665784B0876890802DE370D97F828F39B46AC0822EDEFBEAC8A5B9A441685E74F1
85AB50984C9F4D44DDE6E7629965794A45CC1E1C5DAF81FE713BBBBC6BD8F3AA4526E66EE28B
80A7B4B936A28664ED3A3EEB573CF7AF8A96BA941E69B614BBB93053DB4C75953528BBB556E4
E62003C79733730237E4DBE3928F461A2E647080C5F4CF53CA61A88F22E4267DE825146B26E9
B1B7100973909AB11BF3857B52EC6249CA6ABF7A47BEFCB6781924622EE2DA8D1E18A300931E
057D6D3A7E2F079F6E4A622A57B47818CE3367F89244CDD7B18E0B2D54C25CD21B62F2A97C27
9B7D122371F6A499F2FA84840BC6AA7E5A5B1A83C83C03D920B72D9B193715FB49F0B9181E6E
454201ADFDBAA3B87F527DF85FD0D57DD3415A0041C85DCFA69554B5570B90F1A830A1F2B085
20671C56A5E54930FA038AB1CC632D8E91577183B62BACD73513873A32C6001412500DD26D1A
A2478A2BD242188BD901C515D01EEFA2AA5E99E817B976B6E1470F943D7434404FCE189A8DCB
7C9F4C658B525D4526A4024680574694F9962D10EB0FA3C0F87425A762F28A332F6F1429088B
0EC28B19E8AC83ECBE21115584008A3F825C95E189FF89BD59BF409B503821B2256A1449DE32
F95B73D1079E83441A5D3358B147A91E5B04ED1F81AF3BDD974BAD9011A7581E4B1C8CF7A519
B27170E29F5023F3DFFE9FC1B60ADA73C059295683F69124932D1270592AB6BB933D301FA180
C170D3C355E17B4B71CBC32E497A9E9881C843CC8EE959BD9F9FAB58FB48D4DF7A00E505AAF6
B6F9AEEF1050AB710B917EC062628B930B5917E1C13AE88CCCB03F3195B6D4FF62392C84D7AA
E574D6DA3DDCE7B9563C3F2D3FF1C6079F8997EDA44F55E9877BCF8D58F1A8FE2BED0EC2F558
F623040339337523C21300B09EFC53E26526F94946C03AF7111C1B7B5B7804948C56C68DDB41
B06071A0876E64B80406613E7605718D50908800661BD8E2454355A4242673A55736EF74C890
751A32778FE41574FB3F44D3397CA6B8F57F788C06316445A521AFC0E8601525B66207A8AFB6
C0BF651C4BA2272BF12B7903BE1A4472EB345ACF2D0A6F1C5523F58EB6F1C99644F15F545D9C
4E95E508D3992619AAD61FE1EA5820EE6CFED90B2C4DAF35BFCE89908145F120291E15A64A63
C90FA04993EC295CE32B62820713CEDF34D80CA8BE6D58E53B16287B0EDA0AE3F5697C120EA1
C368FA9FA54E0832BDE21B592073223A8E171CBE0CA39840CE631B68AB03D351FFB2892A17F5
8B5B24CC5BD2D80A51567B2D226B935ACC5551ED2577493C76575AA68F66462AADA385046D8C
C160FAEFED718D063265399D34673892083615A09F2B8A89BD906AB2494519324F0B5D5B61F7
62EACB39D2A4BEB62F9638A2E2BD995715E2EEAF211D3353D3D1149BA95040CFDAFC244AA33D
EE902E98B1425C05804962251157BFBB601E664579659CD7F5FC56F4787DF6BA7104CF3F5759
03C624C035E6B7F9AC3BC265288211EB85E937BF5E8E158DBDBDAE4D485BD74252583E4F7883
7A63498BD5AA8CDDF424B53B92E0D8A3EE7F4290E9EDEDB6483CAF58C14E3CC4C4E334F6F6E9
9F21EE7B4C8B4741A17B5B324A31ECEEB2A5D8CB15DC2C6E61B2D06BB86396B959354E33646A
C0B176F45CA2878534717CCDA49F960DCE632709729B2FE9A67CCC419021EB7FB6A20F1BE203
E28D24DEAD4CA3576A368D473071868D99D637961309EFAB4D0EF704E2DD5A591533277ED542
E71E508932857DA9F86AD1CC2A7D0FF89EF99DFFEE4C71CE7B420556961DFF7D173C87A72654
BF34DA7B3BB427DBC53493C1B8EC39B64F025C046E35194C167A9354AF5F46D2B9D594A859DC
9681850F97FC08A37F56EF329955AD76D51FA95659109E6D67E4306FAEA2812576B602A8588F
B74DBC6E2A61D783A2F8B7594D45B4BBF6B28F679EABDA67CD21EECA68B3B96FF265AA2B4ACE
75F2542A562DA0E61EBACCAC61A5578976580B59A26CE9243ECF481C88F1C3E90821DE1F23CA
7F80485BF1440FCF79B86BC3283F92F0424F683E945F216872E8E7E7FC364B19D14353965B49
10DA05C20871B43CC0C70774832570F1395916AE5E6D51445EACB3D08561DF288D351A12ADC0
7C6898D45786AB2362E25E65A308E31F65151ED07CEFEFA1475387ACF68D3E02D75C25B7EDC4
F0848F009D77003E59777BD547C58756808AF382DF62839A990224FBF42CF18F86F80CCC903B
0EBAAEA435737F85EA3404BCB20A7FA84AB51E8F65B12AB6C6EE1F8794E21EC3ED10B1B4F835
05F581BA781986FB03124792E5F4467F9CC151D2316A9627C86E57995B0228E9FEF17BEA9D73
FB58F88DA0B1D590049C2B5456084C241CDE51BEF430B3F1B0087FE7D7F2AEC94396E6A62D3C
C4EC0564CB460F654591DEAB6D0C9AA09E27B09FDAAD0079D409401EDA040A26435E0351CC80
CA2F1692992917E68E1DBDED2139282041BF55D5611FF5304D0C390548DDED23321E62C3B4F5
1BDDDC6B832C89B1F9FD0B1E0C1AEEA0A651C717567FB6E6D6E5E832995446A7238461042A0C
C08C1EA75B4C1FC38062AFC441B72171BE76BC3B04E1D179CE454DFF93668EF8CDB1811C0C21
5430E28B9D4E92D5F1996E9BB66724E1E81A0359E166BF88694D12BF6944BFC30E5BF06D0F86
AD72A4F372CA460F99E254F7B6EBEE687699E1E4C25F8664FF774F02A5CFE926BDCF3BC044EB
796C18601C3A0B584FBD450FB51033DDA3B3BDF27219517C494923F3520A5E2CAC10ECDE0D05
72F3CD62E8AB4B242B55FC17EE04102304F2F59DEC48FAEC6044F952A4EF77938C4279C19CA4
EBDE2BB0BE7E2A9B3DB31412DD171834C1003C9CA2BE2794D6B6F9B3E0D763998811CE212497
1AD231F46460C10047FDE0BD96E2861950B079BE17D3B789E8389D9D0DF5B667D8401EC872E2
22247CD67D662CE8868C1CF7905FE257AB980CC24E27237C761966ACE5544F490EA3C9E45ED2
229D7DFD03DBB00DECF59C716CCB29011E2F1AC87C5C61B1A2CE0AF6053A4B02B7179563CEB1
411017EAA621AB046B355B6F126CE9AF8A5CD10A347EC2306BC80CACC1EA8D0BF2F5376DDBB7
DB541C13BA7E8B9701DE60BDC70BC49A6FB5645C0C325900305F3881436FF74F880175940449
4857CA9A4E3AF1EE2F6753C19D7163F7A0CB84D5124BDEFDE5858E0F55F789898939E1925A0D
598150CF4C8B75445A0099EA0668FCD6E4C2B8D19555B0DC504784B8781F0D490249CA75D7EA
4C8EEC74B6D9BB7D6E51C625B86F8EB3B207344F9C2558D0FC935B366D690C60A5AB5A790C0C
DF990AB4F9DAD07C5092647629A7A03900559F4AEC9D3D4E636C2645E92312459B7525034BFD
96A129ADA67FB022DA92FA7DDC069178ED028A2F301EC9B989F6B71F8D5C7E080127212E2F5E
6D7BCA4E821D3FE6DE74EA18B12EB7C51A69B413AEDE0CE988491CA695C7D8BBFFEA273601D1
E82978A00C7F74971FFB7F1105BCFFC9B77E161EF3969CF8774B0C060E8B98E889F6AB874F57
E4903334E656EC57E60966A059B1636E4B42DC7CBD8D20C7826BE1491BFEC2C30133F224D70B
20CA9587E6B1154387822C16A38C6D0B680FB004DDC9273391B9691EE7295FD92EF783CB99D4
C97B98C5E3E686BD6451250A0530E6503E1EF27FA2F35170C362A56ECB1AC69CF62BCD6B9106
87EACAE375DD7106E7CAA924C19ED5885F830B4D1660A6B469EF250C1344174169E2F0F6681B
C0F3EF69390985D83828FEEED2996CA586E10296CE26A4E1FD0C6C9D3C884BE468AE5010EF08
D1EFAFD27648DDA12C05C983DB51F4FC23E314B4D404803364608FDEC3743859786D5B85700D
EDF918EF085E14DD0FE250C6E4A1F2F2E8D0ECC21206BB80B7E461DB009AA3C82AE44C3A3733
026BB072FB2C65E407BE58AE0CA6BDFC249520B173612F1D945172968E8679CD102F0CE7C650
74A99F9654A9626E156C470460104C978CF36B25A54A940BD5AE248EAD8C0323A739695FFA26
5B8B8BF3A39487DB90D3E261569ECC2EEFB7B6B0ADCB1731024A5192127E56D05165BA3B7450
134835CEF2828C0D10A24ED207B6333A96AD20CBD04DD5C7B2B3E4C94830361C819E49BEADF6
60785B8FCB35C28DEC43365FEA8E369934B8ABE96A95661F51C5DFEAEDFD98057DDA59DF7123
1E4A5E4F1019C1671706B6A3779D76006D9CCA30E9F13936B2FE963B606D07AED1AAF81EF454
0E579EAD134862C30563D081F110CBB10AD1321D60D4F1FB570C66BA8591D8B99016E83DFEBD
4781515809231780EE80B36DF09D778AF18767637093A0A31336C8EF4BDF2A7C03E55E19CFB6
E66AD4A318F695F2B0A9BB970BEA5938060A13B56F7799058BD4AAC6417E96A34888606CD4B9
BD7CC1EFD67FB672513C3A7FD61B237178BD2AFB0F111723F35B6E2C376C4DD10D7F89D4C5CC
DF5BDEC342F0F6D6585B6E3880A91B0D01F56A8CA6470A21648D9F06AF9B04CA83D6296AE76B
EC4B00CF9C0F4E19EE168719C7BD41B1E05022BDD5C724CB802335F9F0DFFAB25A4E52E70E7E
763EC73EAEE61C817D9E6F8ADCE322C1CCD0BE398D89A0A7464AE3AF7B6C0F8F856AB33A1060
08B3A36C555F2853FFBA9F364A525070DDD39D5DB1F4F16BCCB0D4103A0EA3BA3D2BF859422E
93ABBCA91113556262BCDA0274E62FED8E2FBEA7E599E559E67599D56200C94ECF094130FC8C
7151200A252304CE4C937B973667180588353E6B65FDB61A16F22B2A3FA18915260512A549AA
C7760A44DEB1D1E5DF5650DCA5BA87E18E4F07C03CA34C62437D306583D73CC3EACACCD6A74B
A3FE55B3C07C499446B67206BCB7BA85BD9A4913F440E31B670A8B3EAD0D2BB913F187E533B9
C8735929C2205AECA74E5DE743D4AAAE06154D1DF0103E0A79EE629F4EEC2B71F11EE71DCB66
A001872D038F762C908E58EEA1772AEC3CD1AD2DFF4AD5FDE87F63EBD8D066CF54ED5E3235C0
73E34AE6DF447F4A817B63F17AA65921B35ED94C2609A5C4D538D4ED081D20C3E04ED66D3250
82CE64A7A8FAF9624F3EA0CD030D70F5732D4C0E29FF5FD9870CD50A62A4E6DA7986E5F06FF3
5C1FB76922709F4BF247222B30CC6B0BB58D683AEB91505FAA80E7611940D7AED32A610FE0C9
2773964FF9F92F389CE1899E7CE12E67FD65C30E3CC09A722327A7A7082CECCB566FE2EB3DD8
8426FB226AFA2A50CB5322E66DFFFFF471456AC1412FC19DE9EDB28837D638BC0C253BC270F1
446580262393B6EFDEB28A5E8578CA1454259959940CA856FA16504648A0462A59235F808BFB
FD39DDAFA09A316267E1B0C145A4A03C9ADC54F526BB63177DBA91B8A451CF78F9B3DB6B7ACB
32CA6E4A418631DAB624A248F2B3FB6CF0F297A7ACF49EC1772F01D9CC39209CFA46CE35FF16
B533E61075C33F9F42FF4C40D59952E24C21545DD99DB567D5C358C9CF85D411B01EC2C740E4
15557B8979B1EB0A415A24425E1289308A60706034F3166F8810F49CB3C8DDA06F5850B56960
8DE1EE8452D9A30FBD04EFC19C8635B0769DBBCA234ED5CBEA0C98434FAE3938D22B8E6287DD
736652D031BEC31E7BC52EB8BC75FDDD1946936E10DD3DA40F4C615A21E1BCC93E0DACF4875E
9FBCBB1537CEFD9F6B9653D91168B7CC3B746B605FF7BBEC53FD322AF0C9804DBA7F4A53E08D
6C4810474C7069F0B671CC8F36BB233169651ABBCD4530CB79AA1314C823DD655DAC47235AB9
6A815E58081E32B98A6F0FF013639CBEC60108972EE9A686562A20EB188B777CD77F4469A676
906BA4CA73F6F02616F1D45745A471E7A5BA2795209E8324365905B5CF7EE61D3E53AE1CB5E5
3F46EF208122DFAC4A80334762A700EE46CCFF8F49D5A5E5FEA39285131E7CF056F73EC3E19F
FB55CF4409047497982E17E0DF2415DDA5F458D34D1C7F5DC02849A069C6F84F2CD91EDE1904
9B5C25EAD8BAB0C9C9843DA6DD24829549A7DE70958048F037C56C949E24FC737582B9EB177E
66D5000573977AB7C5A9B43B76C8D65486384E8F0F5D60A604BEF0EFF30EFE8E7C9856934C34
5B396B9DF21AB34CBC982DDFAE5C433F9D5D1004E5B7F82ABDA6EDB5FD0F236A17293DDA8020
69696E789C0081A4D8AF4214D05B7F63607CF0ECEA630E30CB9F7352368FEE8D04803A6827D7
3B260DF18DDAB0BA5AB0B9129CA7D204C64B6F1D9D23CA41DFBE939C313AE7499B50D24BD711
DAC556290CA09320CF563BC402453D3F4DFFD6A7C5F3D54C1025A4222F29B2F87DC9D9B0A60C
52167BE7CDDC6C7EA9986211DE163D566B8D4EC6AB2FF906126552310B152803F04E9793DA45
87B0A5296193DBFC840AB53EEBD3C4E7C204AE174D4A0956E731BC742C55F2D486A3EDC9B23B
D61F3FD30E78D7EE348A8FCD1FA9C1F47891F67F1913B6986F53183665D9FD6150BF01F9F3DA
D20D1DAEBDBEA79317E580C8710F8AF667C2130B69C69861A4C3DD3EB0F87EB8CAB703B6A4C6
5D01F872F7BE20ADB5303CD0D839FB9ABBA30A9E09D504E360902F865D76C3F7BA7D4F8B0AE4
087F33DEDCED0D95EFF149721FFAFC446056549D3C136DD045E949E25F10F274FF02DC0B5D80
D0825E8C4F13D9AC797F9040B7DEC0E8B841F9F33D73E41DC08FFBA8919951A77F12E6974970
EB3896533C69E3AA9190BBD7617B0874E9A7ED6688E13D344B5B3F2A805F8FCB0F3B092C8336
D31123736A3330FB8155D3C454BCD658FEAFE642F6F312901286310E4C81D9D739DF8836E14E
DF255DB0ECB7D8534B70854DB25EE45D495746B44BB8012BCCAF8C53DA5DA610779DE56FAF0E
6E8324E5477F643D72D9D554B213D6AE9FAD4557F00783EBD5BC945C595C9D3BDB552E3D5495
B799C5ECCF5CD7D69B20BFCDF89A92AEDA439069A5CC0431CF1E2C369CE03BB374617E2F3CA9
EB52B4AB5A7876849574C3A84B63B4053E000C9CD2CA596DB9D4A81FF225461A812A2351488C
0893C12431FF2740DAF6673BD1149EDFAE413FCEAE47BABC858F2017A5661AD726E0285AADE3
0FB064ED1C8DB6CAFE5610E6D555F6618F103F00F0FB73F1A8B43E92840BD29870227E7777A2
B8C5516B4205E241154DEBE166295A7B22A2CFF2DE5183656F6C1ACB51B108F7C8B7AC667687
D3EE4AB64AA6E01BDB38669BF5235DFA61AD2921BA5B05E16EACD389622F0C6C0473FD939C16
D8514CA4A9D64F3E1772EDA127E5919B915C4BE4024BBE6C06E9B8272D4AEC868758F2C9FDF3
704C77BCEE0D21C5589109BF76F26DAB3794D869E6BE3262D1AFBA823DA6DDE55499B648A291
14BEB69F8B5986122D08245B9F2D2C945587EDC363BE7582841257E08B67AF556110BC1BDA7D
22AE635A7FDE5EADD54650EE2D2F3EB9248A09B6A54BFD2728ECD18DDA85E795B7662956120E
B39D125A5D339CC9004D438A33C4F80529F3A8DAAF414791D60DA97A940928C775A20AA2DCB1
D31421B631CE7B3A778D93E46774BB9F4BA4277BB4046B3D5FCFE77C69854BFD9FCF8CA627ED
64658353BE4B83561E32A350F58A7D701607463C9CF1A0352BF91A137E5395425324A0B90F98
A6CC726AE2BA3099FB23744C0BB0B11CBB50D91F72304BEBC10E869B81C6DB2C6D92AB98F347
603CCB45AC2225592CEA5B55ADE3E181AC6CABF0CE92DEC7B07D31CF739F83E03961AE60F1E0
59EC4B154FAC3E5FA15B6C192C55D7B6A3523D215257E0A81344C36CC2BBA805E8D974C4BA4F
09CEECC3AC94BF3611A6C35605278C2AFA08384521CC92ECD983F1907139086FE37A7DC1ECA1
D9A03175281D417B7D06D4CC6DE4C855FF4136782A3B780744DC757EA3AC6C098D2FD248F120
77C370DDADAED2C7D49488DA021E49C47FDBDE29417AFC8EDD763DF9C4BDE4A52E009368F8C9
4E663B283D25E7D6D281AD503BF9EA79D00488F45CDAD43BEC7AAED1113B309D7B9E07A22D2E
574E03D11C268D9E5EC5C262B14D45C8693A68A322EF6EA82D1725595B19C0C20BFDBB76A157
7D1FB8130570A5B96084BA045A49989152702183013F58788466570BB6C77B619F31318DDF05
BF42F1E33B877C16521CBCBE5A6AE6835B545926C615564777336CF28982A4470A715D53F04E
0CC6E61277E23AE3D3F0894AFCDAB3122549B664DF05957DCE63A3195D78440A9626168FDEFB
6B138ED18036F08DB2D60730579D844723E1B99B0CDF9CABC79CD42DE062D6A7F7B9072C5115
F6762C859B8C7D16CC18E877ED8BC9A7F65D2765F8F013108405DF82E053D9894A044DD6F1B2
F77AEC1B9A2B92E2B2C3490B8B4529805E0E89D12420FA82287086DF0C0D5DC713DD39F752DD
BD3F2923B20AD4B09F1527C4A0AE81B459B01371871870E8E7CA38F011709A9C23B4439239AC
1DF13D24457F6F4EDDA615687E3D0EB669832DE8AC749DA8906CE385F2660C49E1B855F9BE74
13A49C70D1A3CC714A25EE4BC891BD86AE4E04D5B1A0F908DD696061B82E56389248E75980C8
2F044F4B2F3CA98D388BD446B5373930CBD79FEE7B666637B09D7D0E98AE5D3E23ABB2AD6FFE
FA0F92B75EC08C85F5015960325EE2D69C19AC38754EF034272F1D5A7773DE35DA03E21CEAE1
B72274686B59741BCA5CDDF444718580EA978AFA10A67EC138281320536139FB16037DA4D39F
C3EB0BA0DC1F33423C5ABEB22E12CD3C1568FBE43A286BA6CACADFA322D558E7496DDEBACBB2
1F756272B084B46F4DBAACB8B9286461F83592A8127BDEF9DC2130D8699524E4D9E49CB9F895
612830D9E074BBD57B01BFAE6C63EA31E1CEB5374BF22CC2E6D6690728AC6A5F0CBC8D237BF4
8EFDAC1864AE294331EAFA4D9B93667C0D51CCA8F49E4E3B98604E553CD2AE041186F1EF8230
6C9DDB5AA22C27710231B9E5E7E9B0B5345AB6055D9139E7855677B3BC578CE91C6D447D34A5
B5159B3075902BCA83603817F5E43A4DC27FC131621AE36CB658F747FCD6135404A02A70033A
A7039A3E1CD564D5682F520512F97976B1697CD90C773C790FBD623C56DFAEC71847BB3E9ECA
6BC6A6B242E3E4D57EB6812E1BCC3EA9433180C1995055EB96D26B5C010123C6FAB164D5BBE4
100032081721F56AA94D9E44F627118AD292E7B9D6C732143B779F464DA5B5586E66776818F9
0CD1C2BFFF2DB52139A169CBFBE88A25EA3A52ECBE7677B2DB64A725251327BDEDBA3DD6FA39
F51AF87370B521E379F2424414A02CB09394D821533629C867BC946D81B7A379814049D93E96
8355582814A06F8BD70B03904595C9CE37DD16D2CE7EACE8F31159C7A21547D1EB67A0A9A0D7
E666FC627A281472E3614F4DC0C670173EE4881A517E8FA359B8410A967D827928F8509B75D1
6464EDF26C4540B56506B2DAD01C255C20D3371E688100A609CD64207A2D0E1E3417A6DAEF7A
382E317BDAAB825CC7CF4972A92B7F213F5ABD0E3ACAC93C4FFB524754BBE546C8592E6197C2
2F3E528C2F438EE1B7ADF77D738CBD1372DE464E4197A25E055DE19611A7995DFC4272B97344
CE6FFDB7386CE6FDA13B0B64B3B8B6C40F65CE46140994B0C065DC930F053E851670CED8F18A
4BD9EC7811ACFF197A0E2E63B4B028C3EF4EFCF7455F3093D9D799C92E5126108D7AE72730B5
AED74F1292F99D64F3EDABF2214C295A7B44D1DF6CE2B3627E90FA6C64D109D7DCF35EC13437
E5032E96420F018CE17122507C98437127CEDFC2C1CF454061204F4F4071CD71E7474A9F133C
09B40618A5D199CFEAFAE8ED5703DAE0D677329885A2AD72A3C702C46C78FEA5D08F57FE74DB
515B2481982B62444AF01819FBECEF784D5634B3938A70D93F8D90539650C3E789DFE2C41DEF
0A9738930A29522DD3AADAFEF619AE21F10819F39862085B48EFC43E49C7A38C1F970E1F6E54
13585C3BA182014CF26BF98033F41246B520AF7243C6AFA317221DBE5484030AA40EE245C678
7913C637B39E2576A751E4111888A16A954E18CB3AA1D745E3EE5E429F3E58F7DFDD27B5F036
21E3408568E2B4380C774B292E76349FA62270564B08DD37BFC5962A18F732E26D7C0BA75B25
6E82EF87ADC08DE2A8149A05ED5D1D4C46BB1A1D2ED08E2549BB36DDCAA3B8072F52021DB35F
1F5C56B591ABA25A8E032C825CA931ADC325A3AA30936776D642B4C2140CEFF26793F54559E9
9494016EF32D325023B6496360796DA2B5D34923A19B1743CE26CE14842B0C360BB085C666C4
37D7B1DE2C66F2BBF448E54D71B29BE19108CE3E6FAF62DA520D4D606C9D4E47AA2992A253C2
C53418BE69F9EA5E9EC420CF536C1B330785860DCD75E307661674F89F489BB8B35746E759DF
287B7783562E88C21F77144994D57A3EA6E7166055D227061DF6CD2D0D66310CFE1058B8EEE2
44979F4DC484872DED26F63224624CE5EE601639EB125AB391EA23C60286BB11C8A8E7922BE2
229CF4C84BB66C4F70397FCFC240A452E5EDA07A2169FEFA3A3407B05CF375281952212FDFB6
BFAD4AF6A334EE01F4A2DFC895084C724A854B1CF434802358262311955A53EED38943662CB0
9085B9BE26AC158EBFF978632F746188967E408DDCA896AEB570C334AE8B05041B10E84C6355
70040FDA0364433A7006622CAA6F73E2B56B5C6E01250CADE18C0E6D8A8142C51C53B83432A5
41A2C0AF834EA0DA13C1DD1E1DFAB7D7E9830864645F9EBA0A63903EB781D74C585486F2565C
AAE9064CD82A1BCB7347E01D5564125E21920D0F10F48EE5CBD8B99059031A681EF2EC9B8A9F
5277A3D70E43ED1A4B3D4D9BAABECD4695F31EBAB45F94DB70082E5F9CEB1ECDC8B9AF80C7E1
FC7AF8A29227D0D6F2FE64D19BAE164489AB90B3AE0393379703F786CE3032197DEFD596E852
E37599E0848DB4EFD3D2519F74794D87D9B2B505CCBAD4EA4D1FC1B3AE3680A6F412CD05156E
27F8786CA614B13CD700E42DA87F0C83878CAE51453127D4993663D33205454A1A4B98E6ED0C
88727543F9C2F7F0C8D4A3AB7269DBD1CE198CCA6FC85A4E116C9CA5721CF4D1F2FCF087CEA7
0CA873303C229725472A13C69F07D3B7B8E9F75BF292886F97F942A4C3CBA8BFAAFEA93BE2F4
F6B4092D054337749B5DD799B864012115367D03638ED38A2343DE66AA0EE9DE59F50533EE50
C3891C786F31E02E1D4ED4BA78160598571479DAA9B1C6FA0943F149D7CE98F2F1B7090D968B
D07F43ADAF95D2387BA778E616F7579799666C118391166F6849214BD7EA96B4B348A0BFC89D
E29081E6282024CF14E65B2068CC4034ECF3F1500A3D12B404B4666DCFF9001045377D496B40
81833D019C5DAAE5B70334C32AAB76DDAAF3C28CB24E3E5679D041DBC8BFEF4FFAF857C1D30E
A844C451203CCC6B83A578EE516EB034F6702A56E7F0D8BB250382128CB18134075CF0E2D0C9
C001BA712072756EF8005BCFD0BEC8FED3A19847932646E2224D8A0E0DB374D249CD7C721401
872C1F4E080B24F9812AD6202AE7C01099B94251475E4E72CD94FEACF8F2C05F802C2AFE1E18
9CC6E3F820F1CE7EB71FFCE8F39F8F8779DDB132DD1DEBEF118A028AA461CA8B1C980CAB55E9
B5B08600619FEA31BD21B39C408C65074E88218D9961AE5B4F6B9117B7D79A07B2920BF4CB08
9B79EF0EB3C3E8BEF60D145D6FD4578C5725BC62ED88AE910B0A01076C2C1F26A84AF354EBEC
757CCDF4EEB689FE9F583FA602D33635FBFFD71F675F7660B47068921A2AC1F738028E9EFB86
74F0B608620F1E170030CE98E60BAADAA5F372F738EB79638A14B6979D5B6214CBD633BDFE79
191473E225C2EABECB46E215E4BAC46155B03CBF04FB752CE4B1E4349CF0B4ABF66A37E3D573
F17361FCCF2CB9CBC0F732D0F4390F127BE3ADF48424A7A9E96B7BDD6F98630789C192059628
E6C2B38BB5B056E39D6171B040DD48970D4D0B9804FECE457684C2A9A9431C8DDEC6988268E8
34399C23593D2C240C8BBAB5C4DF9F08F1DAEA802AF740BD9C76586108F08971E376F751F996
949F5CB72802C1FAFE02C2DF4974FADCE64928153B744A64B4452EBB9B9A2348A1CBECFE6B84
B93FD6AEF4ABAF2171F4D6EB48252B3F8E6EBD2BC8174A690C0AB32547665938A977F42FBDED
BEAE395328C968A64B71C8E246FEBEEEB453619ADFC32953A3D67AB96DEF881CD61817333AC6
CA210B28FF72EDD8661612C65BD9AA5458BA2074EBB6CD56E91660A61FBE441262A06939BDC1
3194C2BAD3C58DCBACC37C631382397ABE59A65A5EA1F6822D620D350B92E336FB47140DD2E3
C541B49DFAC99E611405A22B7D07E8CDEF572E6FAB1C8EB08158B91CE6E92A7E7080F808B7DF
41AD8F37DCCC5210AAE0FBBDBA98EE418B5D27420E8DDD4C9626CF636575EE9286703101E7C8
C623B25BCF0317FD7C387D2136A46861079C882D145E07BF71DEA2283D5731D54037F67D9283
47F5478A359294DA0B939311ACCF3281977ECE5969B47080EC6D75301B19195D25732BBF2808
02ACD1855674EF6B113E3068F2068F00C8B08E91F5B532A74CC5D4DC43AE172D563C59EC2037
FC7615605894A4E03505C0536ACDEDC8BE87E08D66FE7E9D3A6FC94C2DAD93AF556DE625E1F8
105BE9AFAC03E746312377F3EAB2E4BB17CF1B8FB6D2D49845076AD1D5A9217F9ECF878E6866
031032E5188C0BFC35F33F909ACC9325A26B8750DDEDA979C97F900474BDFF0EAC7759D37E97
BD543C483BFF99A60F9825B3457D6BF82FCA933F06CE9C9220EB1CCA8A900B53B517B173C5EF
5EA99AA9225B3E01EA21AEA69F7BE72B4EBCF2C3EC3B6D61CF4A501796D1388678143EF742D9
54AFAD3860F22C0569E8A4BE6F0BD45A4C879A0550211790C41EBFBCC9462E4D213FD78C197C
FD8F659C44C8EB6BAFCEA9C5903571BDF3646168D9270F5F1AB64DC784EB4CD8E07DBDED7B3E
84B86DDFE93BFB3B82EC6946386260AE11EBE75DBD21DDDB7BFA3DA078B9DB7F567C06D60A2D
2391F6BF76A67C05D9415B466E85173D26DF9EB2948CD8F98FE04F9B3DFB8F71B194BD557B1D
BFDBFC9B173A45781F83CE26E83A549EE7703EF0AC3AD8B42C0797FD058B2BD0FB2E8FF711B4
7BE22F9D335E51BA6B19D01413B3C312C25336FC2291B587763D07D11627D11525F2E71F6FE8
04C072D71EB2647E6596A82569560AFE29154E057D2B0CB711BB79998372896202516017F8CB
FFB400EB746A5143409423530DEF5671C707348174E01061AFD0FE88F2DC43E9C1BFEE8B9CCB
D66485EEA6E2879211963147A944B7667AC8345CB64815F5CC670B078FEBE341A485B0621966
57C6E8947AD51524C38E2A2DF6A1D22D4CC10625E9B3A4508F8E783A415EF6C3790A0EF96D13
B4FA31783B5A44AF0DB56F0D92462DBFBD8F088B87E7B42538159BDC9E8772C31B80DF45329B
EF10C171E804474F027DE84C2D120765EA94C9B373EA8272496A82155EAFEB4C0D83B0CE1113
D64B375A59E2A224D595F1FEE7AF7A6076C08282F501ECB43D63CF625FFFABC6DA445D19A5F8
50A5AB81C4E19AFD25B0E7FBF54199F246BAF2AB6E4BC5A0387071AB599045DAC334501EA44E
46655AC4AC793D5BF9B235DBE7477D1E415B2054DD67916D36F750BA46A4BA5D390099A49856
B829D3F5A8F609CBAD2462789B603F0580B3442888C9A7C62395E57F08159F27EB8AE38484F7
1D322863489F7CF4B3F87B067C86DCE76BEC251A9BE14CCC178DF387F542A7ECFCAE05653FB2
89C3F34027767D2578E5F70A1676AD4EDF0D494C3993E7FB11B0158CE511515FF16919115F86
332ABAC9B4551CEBD687CB1CCFDFCBD8C81206937376D17BA8B18574E14E393D39084762F438
30C2C79E48E828CF452FA1B89D62D4E12E4B08DFAA8641C4B82E0C75F9FCF10F46BC176C0FA9
F8D5097BCFE96B3067156F4AC5810A0A9E1DC08D2B417A33CE5884A714B8AC8A7278FA32F3E0
7AC4F2DE5F36D58D2081B75BE176957A0294698194AA7A406FCE70099B91818884F21E1720BB
6D6F83AB2156B8D3F41750081D31B1E7CCEE84A3170CF0AD06FCE38A20B667263F6251273CB3
2B10B84D443055704448F06EE3C001028F4194AE6BEBA97AC73AD151A8B525D25B086A6BE0C4
F1DD96F1A4BC239206E3960AA349A8C62FFCE176B6D65F18BF33B24733988AD2008CAC875B35
42A982F38360D20F141CC87F121295323215085A370FFFB6F00C6DA1A73B13A70EB674E5ED53
476C31C2F93945C7673EE0728119833589929200625DB81CBA1C3A9B3B0A4C62738BF7C4E5CF
E3A46611AB144F88BDFC930B55DFEB1B416F42635297408C4C6E06D66FCE2F87D521E721B933
336AA3AC182E1717261E84B4A35D387DF89D81D67AB12E50281BBE365E698BDE57C261E29935
58BAA52606EC7835BF4ACFCB4F3C90BFB9F256487DB1C4B697B34109A8CAC753EAB10534B97A
FF0BD0C323FAA90B883236975C362AA462EF02D42EA35E0CB931A092DF0F2BD2920F2348B63B
F114A9A41A78C6CC9BE237C04433DB6D1A970A4F163055526E3A35D8D6E9EBACDEB740FD4955
ABD561A77BFEBF79FE10088953D3AD0EBAE680E79E256FD52A6468AA897D0ECE5FC88330DBE5
28D318D7E53DECD8426051496D02EA2348512E86ACA54037E016EA60F00F207CE2572D42F15A
DB84BFDFEFB4E50B7901D05B76FF706D578FA10D420A619D7582BC15806BE9103F8833307F94
F3348CBEEC58C69EF3743A51EEC6C3611ED38BD64890038E98704A841BE3CBAA1AFAD86C1D2E
E2A82011FBE2E94C3361CE13D4AA5E53E7B6D4C223FB9DF6D760EF0B1BD8C8E559000FB92D94
4B0027357F85AB16375399CAD7960D31BFA9AF6D72D8215A5058494A8F79E6F5867225CF4CDF
1B0D2EA4A22FD9E00F4040461F85EBEC0D9CF813FFC508AAC93DEB66DA0335045F683925E4FD
CD7C7D794A409C0E7C3AA806D377EFB85E14A533E218CDDC1C4971129DA4B948B822078D216F
ABEAB2941728A657C3987A38A0251CBED8A2C1D1D48BB98916D071809860B096DA0378014C0B
48BB14397DCF452B1C830FD25CB8DDB68AC03A6689CE306867FA045A899C853989EE2B6829A1
183568D2FCF0ABE950D662DB5AF1578A105A5EB0993E8F4AC0C38AA3112357C5BA4A05487A61
D677450FB2DF21D8FA47AC91E46B2935633DDB5E0BBBFE6A87C88845C8560410A274BDC06C24
1B82BF00C40666AAD5D246208F5D870171415994B970A4209AFC0CAB2ED2ED09F44A85B5ACF5
4EABA2E277481B78B1DAFEC692C0926236FFB4CEA3671CD177FA3B529B513B7DB675D178B8F0
5A66C9B2B67036D144DE0294EC12E161E2A0AF909CCC4E0A1A182A84E3B4E5C3E1136BFC5AFC
8EBBBF4805E47847CDC005193DA020B70558619557236927EB74DE81164CCA2FBC8181E0811D
95893C46FED13308F1BB57893CE3B29602B14B36BAC9034454F8F5CD300051273FC4661ACB4A
515543FD100133417CC08790A75EE33E9C0B07DB5B6682B03C1A27A82E4CD7FEA22A81ACBA20
A59D3048AC4AEB241E49F90CD118C9B59819D092B2A906B36ECF289E475A45BBA2E6155A4402
7B50DF95864ED47BCF43816106D18260AEBC21B29BA9BE1D8F83AB73BFF201939C069FDCD049
BB309AFEA83AA5070A717538DBE5D4553243A5D1C8F8865ED9005C975A4567D9D686A30AED21
2B4058D2E0FE38585B6BD0002F1940285E2F34E45CF7A4B0544F0FBC9CCC0AB2183086858E40
B0007E751EBBAE1778EF1DA3277BE52836162FB7BDAB2731DCD74F81E4C239EDD57AC427FE5A
E4CED707B2F718FB11C4D04727CD5361C55D681EB4E50C336C3B39CA951EB43A7324851CFCF6
AC875AE40058C9024A1BDDA7A58FD98F5DA10E7729AEFFBDD844839C08E750773FD6DF4ADA22
46D0AA109FC0436C164CFD9C754C648DABDF8193C54B4A28AA086F795E156E2A517554EAC660
D5984E1907327F5308940C4E59C3602B4416AE1ED642842566B51E632ED34F310D55C13F9366
076B4A40A57E43A800CD307D345412B6CA0276044C2FFD6334E616745D8461CB1F297FF8315F
0009FE783DEA1CC5F74F297E0633B83D40F9EFF85B254A8CDEBE2E707F727F38AECEC2FA4C83
CD2B2AD7F52838314E38C023E8349CF15C5669B7ED30FCFA10239C6772448C89A4B090FF7639
7F0ED7082BE0D5812E4203E5892BFF7CBCE40A4BA9F30D0EBAB162662BABE7B593F5CFDB5026
351193D4F6ACC5D19D3F4C14F14737E819E50E89B6A3923AF9EB4B71C11A6E61EF5B731FB43C
A64B95441FC78269D524C2A95EC8B445A026D13734A9C365A1D055D6FCF0BC1D2C3F5F6F1487
40753685F4040BD4D8859469F9E6EF16312BB68710AD5CD8066EEBC5B3E5CFD1A337BB4C732B
9981EA3FAF0970E4F75F7A15F8C2CE7D9E87A60E3AB593307B759B9343EF63F04FDDC5C75A64
3C2139A4D15FA745E7AED1E0E343B18FBAEA00562D0559660C70ABC2DDBDA03BEC32FED207AF
AE62E5FA91006629D4DF17678F8BB7EB5F1E566AEBF20B4EEE90CE250B182D87DA7B97DC6704
EA15C8BA6CC09069F0FD8FDFC295E1F8791B9007C2A65CD579BE51FE803191F13D4403BCC269
7E6A9114AB0E2B01B5DCFB08B221853B1C5BB7E9A6109DF58F1FBF5F9AF974EA128E8707E4B0
5BC3B4859655214040B5A5571F80DCC13BAE940925F5A76D269A582905CF0F20681D8A19F66D
58DB65C0326AA29133A280B725FF32CB74097CBCC9D70430C3F490CFBA91AD3D0C50617CE61E
844FF7EC1F678C7650D22A8FF7418B1788436AD44520C4E70AD2E93AE4DB3264E03B00760E68
CF20902BF5FE5432F49C00646F823C5D4F7BC868B5C5310EC80DB1E4E19115E9B3D1F32BE0E5
AF425A78EE7D2ACBFEAF4D008512D11484B2613C9AD832F20A314AD3DF773AEAE9A2D666CC1B
F4C2F8197CC85C77A4CF29363D9535CE54A6BC300DB46A213FBA062697E0D879FB67C22F1490
A122E987FF1ABB3A7D6CFC060E6CF185F6D1A046ABB737BC5ACCD31FDB5F6A5A7B52D3E16FA6
480E654A3BB7DA34745235415C37A053C5D4C2077F4599D9827170F11E547FC3D36079770CEB
F46479A7D9FDF4901E310A105CC7B4C019A9768DA8689E85269D3C1EC816F5F15A331B1C62A0
ECA084FBDF0948FA7E248E2C5CB54091DFAD9E3233C1C960675D9486B837EE227FC2CFB37E31
116E81DF20EBC2942A2EF2B5192F1794E1531967140D99DA01FC39B8DA8CCAA8FE3B5FD7D444
D088BC2D81D7D293AC9062FEBA3777232BCDA3989F763C5344601900E095F9E4BB22E320E280
983FF3919244F66EDAF9DF9595AE303B8612030FF910E8EE2BB0E100CE438B298C94640472B6
33B1ABF465E9E7D5DF5EEE95A4CC9BF192A9101B9377C16AF1FE25DC0FC31BEA21B53F713A99
C93A665C8841EB1A26C1FECF069CAA1467F290246698DF31F371DBE74F5EE348F566E8DDE0C5
3006FBB62D9869AE9F5F2E950DD93524826CE22F55A7D5EB96C28E125358C5D36EFC8AD394F6
40589FAD3B25AA57A998325C0105579A0B48DFAE1674C85EF9F80A5D76ED9859EAA93B96396C
942769C513A887240088E4A99EDB2E7265ED1770F91E6113866853B9B5EF36A5D5D1AEA2FDF0
C6455595AAA078D079C3FC7CF72AC3B8FE552FF393C54C21024CA6D89FBBECA1B34A79C2067A
3B770510ED790A12D68A104F4CCE4695D9AF48FCADA4D85F041845C0140DB8C185AAB008FDE9
518A7C1DC7581635FC04325448DFF5A40F0AE20F1462F07313E56F7054B1F67E2ADC185C844E
9FD5CB65400C1479B603F3DFC1C2FD6B46F8DE207FEAD936DCE8C2A454D368031D9EC1042A6C
201B8748BD28C5E861556D558F47FF7980EDD521182F33BCDD9628240E1D4EF9584392FD9B6C
D2EF25325B8BD4BD15984534792A5C4499ADF46011DC9EF1B3FE3AB5EB36F203A41ED170FF38
23F8B863EF646BD8DD3C8C83ECDCDB9017426FCA248311200FCC3CDF7BB13031FE2602638E4F
792BEE3CE7BEA9C583308B859F9CBF7225504983813DD7F2A4E625D1EB84506582CCE1107BC6
C63D5080E03BE0C817FA54218818B4894E82EC118E0BAA7346BF6BB5AE5A3B3BBDC37E8C4B8F
FA2086DC22F3C531BBFB518B329F80F8FB4FE169147618FC8ACF78AECABF011F44AF8C88C5AE
C222054031841D9B50226279CBE3105ED2A60310BCBB2182C6B9046E9CFB1367BD91E07D49C8
FCC43194918ED83825EF9E69527F3C615B3C53DFC5EDF4270791F70777FB5FE1810F43A09C33
0CC5616950124E596864D74A196AEA306B1D1BD2AD9C288661680D0BB10DD54A83057B0452E2
9BEBDFA44C53F7E6FFCA98515A72B98CDCADE497D3F5CFD49B68558B333CF3F86483F28B2553
3F2B40F62B86B5D67440F13EF0D0A33434E71709F2657B6DDC8514B0BEC7682A906E2A2F1363
4638214FD7CC3971650589CCC0DFFB4DBBA93F4B0100B273E4DD66E0338D12C931B2438C4F9A
F311DEC90F88943A5D20C4D41FC388E68194943A06161E5B8ED0478A5CF044C0F831E4F4011D
1607928D035FD6ADF7D891FE3306E28E7B80D9E3EC8423C942E49D812205B91F663F08CB8CBD
FA2E85B63B6D67786D69989B60B87B4333DAF4CD2585FB66F50EEAE27364D0EA2A8274E3FDE4
EE5CE4C119A1C409A4FE1D013078F48806379BB255F8D1D400EF3F792D20C48C259571D37EA3
04D90E51F4E06AC8F265996C9D1846B6CD59B8F33582A4CAEF8207A1F71BAAF3EB21EBEA0C96
D4B310163CB79B23BFD268AA69F86748FCD32BF6118F0F93F78B3E519D8BBB4B23614084DBED
BDE8B266A923490940FFD4D3C22D31A86FBAB3682AAA194CF2598F83B5BE6B661B5704A026C5
CFF6A620DF8527A01D27D3EEA645C7262AA3146C19FA9B1B6BF1B0E72AAB0D810835D5BEF4E7
EF4AE887618C32A85BC90F138C566B6F146AEDA92F9531A9E80120973880D17418EA2D09A829
5F8B28935FE5E02C07736E368C7650BEDDAAB54F9193282BDAE826B0EB57BC24CC50369EA072
CE91DCD1E144AF257BF912D67EF4BFC3726F85E95AB4003BDF1CB4F41CCA39C6C3E084658607
CD79FC8AD6A8471F608B68EB16A294A597AD4ADF04885C2295153C7C19AF72A7FF5C631DA5CE
CC07BE789B7D238F825E6EC773ED2D6045EC52AC0CCFDE14A20C8AC23136C373F8AEDEE55D90
0B163C2D98A1E18E23C4001D088CD85AB7A7B2BA684303D305D54CEBACFDDEA88326287590F7
33176559773910852D5A5AEED4D3D90AF81C83B9097C0E01FD1108B9FAA24D183E19F3F5FDB8
A1E8A5A6B75D93A70282800E1B6747BDE0B6EC9F7116FF6E442C79E656AF92AA2CF4BABB7D45
4024068C3F026145BC393F5B1D80387908AB8847142F992C0CD9D375D43A673F2A7E92612FCD
50F0C539374B0A1434A636B992B251C4445C58B274A5E40238F93C1B2E0EF3E9D58B763A86DA
94B73CD1297C6FC452B1CF755AF657FE86CBA73368F691F6FE244951BF571049ECD1F1115AE9
72A33309450F7D5794E81A2CB0A3A46EA86CAB30F82AEE0BE7E2F47EBC69C53378EEA07F8647
C1FF4861A97B65FC60A1EF0FC8790DD11D2B5CBA0071EB32E6E434D4D200DE11A7AAFBB5CCFE
35C31F469E09733B5B35A532F683F0AC9CC8BA0878A1BAFD714F0CB29A4F752CBE57E100BC12
49B1379EBEC46D48139A8F791AC6D6DFF3B730914DA3477E90C863E6F689F7000383F8B5F9A7
73A6E9236BD3E96EE4D96E418E1DD673B9E9169977478CF6B9A92D7CE92B8A3F8B7B38EF2083
4990F3344FFC213584092CED4B36E393FFE2E3E8BA6EB6CF28FD88E4642D0F1DD4FA308025AC
AEDABBBED5233AAAB36227A25467BB191C372E9B6E0FF34F40281394D04171E230CAFC5A969D
D00C59F3ABB719EC8DFA60CA3019ACB2EFEDA053FCA6B3E0F6DCF9A3C3CED6848CE4B86A75C4
2076863FC54198036F05EF5A2A9CBBB347FF58DC5992AD769F7073D9CB3321FDA327074827B3
E97B0484CF3E8CC358BB581BDBBD069B041740E771D111C3A3093293B147DBB0EA89F03B9908
5A5AB5F5BB1963913615841D5C727226A1EF88824719C3579E921CC89D0B595B55210A4462A4
6241C43341A3DE3CE542417EAA0028E1A35E417AB4421CF1E7447E0D7936E09CAE9FE4182179
9B0B233DF02AD6F178EE0BD1222D900F89CAFBB250DD454B12AB53BCDB1C96846F6305053EBD
14FE5E06F88B2333BDFA5F4FE592BF7B471C637526041CD4C1E5E1F8C93B394269CDCA175F6D
FEB1649ECEFA021C99B717AC6EDB244E7DA93D6027E24F75F728AC969D02DA439023E0562E7D
FFE31B62066AB562E8931E99A7CD373914E8BE770540A29450A1C0F1E3878A1A11C20C9CFD08
044788F28437E406E7086D1F6F8A63D0FCF313EB60A405EFC9CC79B5B74CBE963E56FEFBBACB
288F1A507318F14541D1B74FC5DF2B2F64AD55E2B36BA81852F6070DDB3519968D0ECE2D5590
12F638D75E3D93F82E1CD81E6B7277CB8446DA9CC141A1CEB32E185591D9A57E83CEF6942057
AB7ED6289607B048AF4ADC4F4667A5CA980ED732484BFCE097DC26602C7BC059CB60C370F178
0DC72774EB31D26EF8D747CAE5A27CDEC6E4DE59FD68E8C6812C7EC50271156B4EBCD137CA70
ECBA832F1FCB7F883B6C188EB77AC84341D3EAF37DDC3EB3D81BCCDB92D720A10C466AFC923A
EED8EA7F974B8CD7B2F427C436D3E86129ABEFEC804F802E5A0612D5C8C829F4750947DDC060
81D81CBAA47DD9BEDA0D3BAFC51B7D96CD852020D3E817949F226FFDC93256E0FC4FBC8D29CE
79F17F24CE89F476DA9D0D6AC9FFF055B087C9F815C5B62B26DCA11B2CA941422D841515F247
F15656F68B5445DEA19A2616C101EEFE7AC0243D5E302E3556012DAA567B9491D80D806FFB41
65CCD7FCE369284FE8496A4246B454E4AC7121A14B894C32E418F9E8D98A425CC72C823AFF77
71D2C1FE845DF6FA65F7FAA1D92939D2BD4BAA9416DF7AB075BE161F33C309FA99C18C3E67FC
AC44EF8BFE435C8619BBA63AD217D6028D8B13E52C9309AAFAE69726DA87FFDC669FF2D033B4
471444D757307DBF8F157CCA7C3E85AEF85AB40351158EDF87A67BE741B10F5CEFBD14C32DE3
B77E2FB99CE8F746A93FCBBB6DA0F96AA3ED846909C0617D604560F6B869A76727259DAC424D
4FB06425C8AD9049F8CEC128484B0009728FB237F3689448B370151CC06FB13A2A95A974EA7A
C942DD011E92DD3F6FF5868B3BF4512CEB823146E4BE2A115403A2E98751A66EF7C726F1D57B
EA408C6D47ADD16A327189F31161E1A8B6737EF07B6E5436D9968111056CAE476856DE1D33FA
D7934F2F8E0A5CADD257A4EA39230B0E8721BA05421B29F1BCCFD02AF60D201A17C4C1436315
3CE5E724A9231D5D39F152C056D421DED29B8D3148A033B976C669809095B17F03F970B20243
9C9B5C5A9A470D0B76C50FD1EF6AC28CA30FFBDEE1FA193238B26A7DC65B99A4412D87CCF433
C376E12F567F1A5AC5702E24988B0B0E8F0A7FC5970FDF81673936207D5DCAF9681001E133F8
79FAB568736EFEF1EC23BBDBDB16F9989046EF108A0CB15D681CEE2411A4B4443242CAD88E2A
1CECB158A97E4CA98DC137588D64A4A4C24A0FFA7AE602A2219FF2CF955509D5ECA2D3D71897
C626AC391FEC02F4029977EAD5E4D4995515E39B04BDBFB84D621C357D89DBB10A503C641608
FDCFDBEA54CBA58831A56261E92B7C760B919BAA085CDA93030EC7D636752F963D06A455CE5D
AF2BD529029987395603A2EF3B272B1D441E888F2C2D50BBBC0674125A5A2E78D64E0D618B6D
31CCBB977AFF5151E0F2158203325D54B945292EC7977E049385F3B49E01B31051F7AA9E4AC9
78BA2F7C2E1B59B19B46326F2706CCA8A819F7F5B8A6B57AB91B6BE40B396312FBDF99F17517
4BC36988A26333DBA05F4B034A6EDCED94240CDF61E632AE96DBFE21F8404124B8713D5DFA1C
92C9360A5B490AB26B737ED8985D50A8CCD0A0097FF11C97CD161B41858BFC387A8C8665F09C
F0460B4A7ECD114193245C485060399574ADCA7FEC4C4A53A22A676A92792AC8F264C080914D
331336814AF414ECA4D9E78E54D2667ADEA08BF2BE37663D406EC56E8768A086EAF8613C8079
26F89BA03F822BE515EC4F78B633A677FC52A42B1116414C50F6ED2049040655451B4FB856FD
4EAF7EB0CE64E4758F9857D8430AC378609383FF3DE31449F3BE10C4FD3540199C9251A87AD4
F4C95CC15A5F94DAA3BAE07E014EDB0B8517D257D9DA07ED76F178A1E14611C88EFEC355D103
8C3D366B87882A1F1A56FB274B2FA89746D311B17043FDCB7FA3F6470CB45BD1556F44944361
57C7D959A96A579F40106719F4BFEFA13AABA22A8D7F6C6719058FA18C5B8061DFE396F0C46B
A47BA07C16505507165C03E2401367F9C8BA1BAEB148118ACFE38383B6A269D928DD2BAAA7D7
87DA0EC8C9E54F2F09269F691B4892A0EB340018F30D8C9E691C1CC02D6860445D22403A82DD
16A62AFD86C5AC23E5030BD7922D1E283840BDB834C5C574AED1A73A65FC53E42B03AECBAB2C
475BAE87B03E3AD942DF69B039DA26F7B2C0454CBF22BFF8E21AE914D7A4A1D4535D02806107
0253E0E232F898353CE1343B234B1EB039981747746A134D9B1133FD99F7EB43B85F9A7742C4
CD67ACE2FC478F1B45350CCF4EE9775512D3233AC9AE0DDA949E606A6B3F7F87E2ED5A98D4EE
AD9BBAE3C6E0680375E46460F6DBAAB3CB0B707871C1967B8575AF4963505E458E1386E6FC36
4BCAFBF4C29784052FAC4E167565CB23A87F25F2EA436EA6C0F80A35C47587C7530C57627684
D139705F99B7C14D4F53F45FBBC63B7F40E5C726C510DDDE4D9BE0DFC412BCA6D0EF2F7AFDD6
C864B8FD8E2C9F29768CDADB110CAC11222740ED4544BA7DDBBD3C68050CC7361E5E45AF3416
1186200291CB69BA569D5D0550779B030562506041A23ED3C5CDDE4D71B6A905BFAF2B8A3962
17A0BE31531AC5AE602B32D9886245C574255D62580B28874126B25D948218C75724545D3C14
5D41E321BB9CDA88A3A04B41A817599FCC549F5E8A5D0FA489A7DBF8C3221B65C6544D6DB731
727D50F17CB79DA1D98068D84DCC064CF635F114C99142697EF5A92B659CCF6C9783AD2A2AA3
C4F516FE892AB22F3B9C80D003E012AEDBFB0016C1627A13610DFF036B93BFD9682C6B64B584
EA3C1DECA22168B4E31FBC16FE86AC4D02B03CF85997E1B1BC51DFC8D1BF03175A4D7E27444D
B7D69589FC45794D5AAAD247CAECD431921785E5574D86DD2D02BB8E09FC1C62EDBD77BBD2A0
AF5D1929D29A5C490D396F485099653AA4927A4409E0B646543CA7D61B0D276236F3B3C7B026
E8303D18E1589E954B70F24874285E6B5C461F6596157842A9E3D65C1ABF26AFF2EEA5951CE2
FAFA401525B1D61A8A0B70EA2731654B8C263858C5335A7C5244DAE8F283106CF5A827DABC06
576F2C6E27055ECA577CB16E5830AF95CDC6A9DACA96354773517F9643D44B698177978C5B68
73066927E903CE3835F46E68158A0309D608A8B02D25C71FED9BE503CD128D950B6CF6C8B79A
86667D90393F1B169C7AB5CF1B8F62540A01A8FF4D0EE730E46FA6A61640E48E692131F8CA83
F71E7D0B39EC9A525E9C2AD0CA3F5149F88D386426D3CCB187932F2446B6C3DF15D2C0878F6A
16ECE915A7D948FA8DA19A6845C5BF5DD21E4583FB5464882E4CEE50D6B970D69617BEBE2D30
D00FCB4A82E9C2D80AF98784AC62E633458D9B7048047A83C61C42171F28C5E5BB2906944921
488D3F3FF780945F98E1CBCC81ACA5C458E38D237FE1B348985EDE0E80B892BB174B7446BA63
F86987ED3BB80F7C8FBC6308F1730325C3493724F3A54F35BE1EF5AC42530A1DCB0A35830DC2
D42C497A54F9162AF26EFAF400A458522246FF516BC9A3DF1D5EC04A0F42E441DA3E8F811DA3
0990EC857644934ED64C70676152AF1353340C3C3F54DE04E7DCFAD63E0A9585F3A6197C38DC
9FC95DE0A6BB97C9133C076C5907E92BE797F873DDC02A97AAE5ED76BC008830435139281475
C728BA0E69B580ED01DC08D23E0754C591B8B2F4723B473B7F6D891C2110054661C7CFEB761B
AB474172F3F9A151ADC29B88E5756895A2480E75F5C06DC8667542812C079C6ED456C6805713
818F1712E7A3A4B13959448CD511A4BF1C95925237B7F8C09E73E92567DE2E3A688F186F89BA
6204272B5DEE50D6BE2656E7A997C367D1C29D9139A9CF4B1A8AC455B0A2936E8F57E9EBD623
A7852A64D111E3A476CC83975CDEAD4D006203A4B1588F26280F51FD3E17AF6567B9E0294507
CE971FF6EBAD076F384D97DF65E2D3E59948E3CD0C6FC2A401371DA54F2993BE3790D18C0EE0
6AEB09C9E804C0124DC42B833D299DB67DA2B4D5DE4EA1A3D3355766212C2131E3E2801497AC
629688A57A1C0AA26459FC6E5361621C52D49D8D3353FC7DF3D58C1E77C30E5A717DC8E68AE6
885516D74E1B5004A405629697063D0566B5EB705277095BABA9D3AD5149E74670332D779A43
6103CD01A311DCEFCA0D8CFCF3B114EA3A835091054B3142A4A34B921BCD5BB545F11D774994
101EC958C8178DC018A5F7B5836446E2C705A21A4615793A14597F90F58C4F46C4EEC434F9FC
B2341090730B05B84C6FB5698FE3CDAFC83715D0F503064F1C78C70FE2E2C5C6569D3F86C028
0204B5D77C3A94A0B4EAC790C3FEBFC743055DC69CFDC3A19F2424D67393C3A767009C64AFFB
F2479FC800F316603EF446D77B4F882ED6C4AA8D775619113F97FD04BFA2C5C5D71817366736
0581F1AAE2E6124E3BEC089226CE74275A1EB699ECE77CEB53C6C4A1647C68D6FE71B2CF8119
4F82CA145F3241366AE2EBEB87847784EE268BDD0F5F0DEE50DB66B47065BA4028700E9E315D
7FF76019321E45006161093117DA9A7951F34DB22872796EBCDC426DBBD41BFBBCB4F96E0139
087D19676935FC4D7FE0A5D44FD293F96F64562E2A0F6862E52B08CF83C5016D15600380C245
EC9E7E6BF05FAE7CD5F084D958CC3722C453A6CF4E31BC4E23AF3F9885103C3C8F8E026F5ADA
B36F6E34FA0C74230D796BF7B406A5A06509D22D57D05816EBA919C9BA46E3FF9BAFF0FD93CF
47625CC414840EB7F898B322FD7253F40838710A867F2C10FC7895B86476D631ABE4F97FAE99
63021010801D7CD687CD4900A3D1ADAD6370997D1770E17E3E1BB28B9450E3746D270B2D3EC6
E05C3DF8DB82AD90DAAA6D1BF57E71EFEAC060F22F265B707D2EE62B731905380314EBAB07CB
4F0C85D690BE1B9AD5D32CBC7C6CC5AEEE296639E29A0A4250A15BFC349294258B5410C7C68D
C4533A6AE62C94B032902D42BF6B5179A750591107BD83ED767795BF5C1A56BF7356B26C3B59
20B6D16F6FC46CBF61313FED419F5D42BE7793F48789B53BE16667D02B016420FD73D1AF7B3F
DAA595FDD0D3CA12C147CBCC1B108CBC2F9BEEA174BCCBE19ED7E6127A4F432F69CCC611DF31
94AD1A5D28A65449B6ABD954BFF51D753D0A4090F6454DD8FBC876E7A7FF3C8E943106FEEC1D
2FB6CB57806B4E96E23A83DCB672D9B1338753C01FDEF47A135291B573CAE1AB6F1C0EAA0E19
ACD7792589F7354DBE35AAA82368A08F27158A16502EB1828BF7E8F39ACA4486DDFBDF6002CD
9A2DB2A2B7823DCA9052C1CB254AF7141BB889ADBAD758F1290C77A8CADD8F87043E822C1F7F
161875E4DE79E78F364C805E98432B07F965127DE538C3F56EED26AC5F43C46CD84A52DEF9D6
32B0A5FC4E3FF4CCD4685B47D792D4E645BBB1F77CC7DF7532712CCE34C52386FB863A878BB4
07936591320AC8839305228AF3E36638063A52394469B4F46AB0430BB45CC5FC5524BE323E2D
D2566059EC06591908A72F7394D6FECDA4E95CCA417931E0A8676BCFCC79ACD60D9B173F54FD
2690CD8711CF70A7BBBAA211F644F6BB0FC822F59C711B33258FCF9EF0E10B360D68456DB30D
7EB84B739B795FEB8034D5E8123C1F9C0C4FCD5A233067678EC0685FA68458B241E7087D7BD8
C3C775F3A616FD8F69EAB717CF6CDD04E842450DA047C213924101D86C549E2449F0B1D8C60A
1537B40FA2009017511E8B9158B26BAA9F62ED33FA70D54029BAE885360CDBDEBE41B0A6CE1B
F3232C48BB8B6E61155D149C234A97477493CF7367DE9D3E865286F49B11EF1F548D54EAC209
FBF0E50B1DC7DD041AFD1E8D053044393C4939930826DCB6C688D5A6A3D2D36D4F6C80B94851
CFCB42DF4C8E1AD64135B89B427BF69343D45B4BDBAC1FD80E6DA8027F131C4B4DFFC3D88F34
F4173CBD79FDD6DA598C6E051F92170A3CD72D1E389D83FB181FAB246E92F177AA514BDFC0F6
8BF4CDBBF62399204BAF083F12F8DFB9C40A7DEAA94CFD8109C22D56479B6881B829CFB908CC
20281424BC8DE6BB59D1DE83DD24286D6C4B9C2B497CFE9F3DE35F106224DFC010381B5EA9FA
E3DDEA7457C6CF3F1D7A1C8EF8D8FDCA5444E6B53D35965B251F0FDCECB4561EBFC37A0D1A29
A027C42B0679C384FF81ADC4CE01083DC0A22E8D6D9CAAC76AAD3781A45264CF25415F9632A7
D2DD169A3DD67D046CFBA7B730EE5DB5E3F2AB99EA8301CE349D5E7F554B0453EEE16E7A5A47
CD114FEB05A35B74D1A9C0EC5F74FB1E35FD0132D5F48E5D96735622339CCB28F2BA8795ACAB
088599E9E5C0C815A1D61412384956D556ADFBA917AC36F91A22B6DAFC8049396F692B743649
125840CA820DE1A71BE06C3CC2A4B5D1DAD80BF9F9057EE8F5C3A9B2005240B604D867786149
9C2B7E0F6EEC567B28C0DB3293B9E3F8C801C0F359430F363D449BC01D4D1BADA65736176D58
DC04287AD8B28A93DE4E4C25A412DF49EEAC5C30F750BCEEB264D0F99D57BD9212CE5087FBB3
8E4C65FB28057D6489994E84116F39A77D3BC56576BB761C84B3C2CF403677B034B8C1692306
C1AA270D0EA01ABD26B14A685BFE6C338B3BE4AF5C0349DB22713422C90C6BFD57170F1DA7AA
43856F505ED3E5FBAC25F8FFCADDFCDB432743FCBED8DBE32957F81A1991369A5DAAB8630B9B
408BD6522F929266630C62C50551425FDC6BE738917AADBB53D9C5FBE8377C218816B640AFE8
D48DE3E3987128A62E17B4756C8D48865036003071F58E9247D376FA94B037A1539371556BCD
F3A6B4180536C41465C5BB93D9CACE6841250325C890BDE1FAB0B37106A680C5E54788F205A4
3FCDA806ABE81377C52FD364F55880A4A7EF854B5E1F0D312DCF3B24032EB2AC073B187670E9
592272289C9ED3AAD6BC90D7382E3A80554B57E7D9855E01803A2E8A69689FA918DE2BE2BFCB
C3CC600571C42492F5155FF9CE36DDC1957099D8AC583BF8EC76E9D2781534AD17C753995BF1
CB348F609E698AC36072AE0FB13510D9964DB58EBA53ACA4B1034284BA27DDF5D23B4A8C8F12
134D20BB358E2F52264F1D90EC9268A252AA84DA2EA8C3042B9D4851CB107267D8AD60466B88
CCDBB0E83F0FFFE8A4E891A5DBEEDDC7CD2C93D7F2F402C5B657D437716ED1009DE4CD3F3931
DE5457AF941EA0A763B5E3D3297AF475370D9DE9EDA9DD9592FB39B41332CE15CAD67EA78A09
5C1CBAE07D98564EEE4B31B976BACBF3BA9777706EA8E084561BD2982FB50F32818449BC0986
37322165DBE5C0D55687F495658CC7668D6554B22D625077953B80AA8912D34597200FA64D2E
1318B0AF4AABE080AC6E34B919C4C0D611FB9CFE5F613A2537EACF474EC1520613E4D0436AFD
DC0F1107445405BA0F527EB9293BBB8B8B19B17771BE4369FC52A6A2436DBE9237FDCF95BD64
35B5C695BA6367690FB893DADBC82C3C8CBC562D9D70CC814CB64FAD5B5D4E269E19EE5A2F88
79535F556301EF670C31F5AA627C6B9C43F28CCBE996F4B2EA6E22D9B00D0492FEAA50985DA0
B809E728082C35FF9DBC178E5993E6038E28FDB0CA9A5E02C9DA910BF0FACD796DBD95D86B5B
464861A3D6768431ED7E626877885C19CCB3BBA44AA90546003045321D8EF2AA639DCF52377B
80D18F100680424743880CB75F7ADC7E5AB559CED873EFE5CBAFE7B8D6C803008E8C90BA480D
ED6D4B8B23854E21498427FA1949CC358EC3FA22E15FC6A0B21CC09194AD58D3EBA38E0207FF
83CBE967083C554E1732C94A7EE592DA9ACA59DE193A3FCF88D513B280A2AE7B4D83873B3A21
0A89F6E611562D201153FD1CFF856CE858CDC1C3BF06B5EBB0FC819C55B71A5391096DFA0445
1618C17B843B48226189F2D91997A28B371C805E859799A33DF12920CA59A55223545EE6A753
E9710DC3AD88006B59D74EC96BEEC281188A1F7071877368BDDCA9BDC18348440799C71DB5D8
C5D60913812FA68D0260B3EE6C8063B7C6751E074BB831F91FD4CAE4F5A7876F02A2338DF1B7
C182971545EED06625E3007032F98C02E7244E1A233722EBF89617A291F33F15FBDC622737E7
CF584F53FAC845880D0DBFA38DBCF16ADD36CB3BF38F19008F2D36FADF6A4E0270034D3A3AFD
94F7C466ACEFCC2C1E7C7C1CC67D760D2622838E0960F608E97EA65B5AFA630CAD3A746E1E7D
FE2F60E661BC742859923613999B18720E9081A5A8B8F061635087FBF30BC74CE1F8ADBEFE0E
BCE9FD00684EC5537A0A474BB65EADD944AB5D0B46F67EAD24CEABB41C680B1A5C0CF25D8E38
A42370ACA00025655BC3AC5FB34979D4487FF16ABB7279B7391F6E965C009C566643A229C77C
B9972C229A6F07BA370243C4B5530DB7F09F9D04FACC915E49A6023C7BDEE02FE8839581ACAC
3028643C2501AB8A8059B9C3A1E48E8A9E89FFB06C7025C247FED7B17403CC52D04FB69EA70D
27820B8A023751C19918CCC043EE50759319E4FBA5260D3AE2D0810843C7F9DE255EC6F83C3F
5E9DCBA11FE4236D1AFF3EF6909041BBC630D0F8B55A0942B0563B3FE9F7B98AED66BC03909A
3C0B593AC3D677466BF55D1E6790763767C8603C5C0A09B5BFF9D37D2A4B927D4A119B3730EF
AC7CCD07416334CE3433F4219B5881ADEF236FB7C0DB9B37DDE87AE27F45544237A6004A9A8E
85211B893B4B74CA8695320A2B1F5B9F74DCA1F36CCE6E0502E4F91E21328029DEB2F3B7C6E1
1492E6097653D558CD50E4F817B11140F029F793C242FD2CD525075D9B27B25481F536174156
BC763728F9DBF5DE404B1CFD691531BDD5A0AB5C7A8030888B01CB27D144A49D4D45D6F94B48
0C3FE2290A45FBC6701BE89DC9F11C3225200EF0898CFC657A1A47074408AE8259260B360D86
A6335F4E0CF366544FE10F42645DFC80A1090C7ED65770F9B45BA3BF65181DDEEEE16EBF7C33
F8057336813931FADFB91B626C471259D57B51EEAB22E782EA7F8F3E8600B2355530BE1BDF32
E146C6B71B9AAEEAD2A604C41692B7B8FE5C918AB45A257E11DDC750A8C01D22F51C5407CA98
F708CB47A6F461F5E74F12AFF3E783CC8E559821FFBDA7115E7E749BC212E9C6C6EB0EBD3883
B56AC6401722F72FB7BE674A923D0CCACC8FE9E73B45ED8FB582C68B715827E22E1DEB70F995
73B4A8150323877B44FF872C27BAE08219E86E4532BD0A2994AF39B1CE6A0102E263A5FFE837
75E9CD27B115A2AFF6DD1FE68FFAF0BA5F554298FA7C892D566A08B8967E88D8CD5DF8803F8E
822CD54379D5EE4665939394AB950F527A746C07D140932EFCEB43702DB86D4B99283DE5B1C5
103BBDD82A22006F488D1FF632A66F5F30A10F3CD53FC57A29BE2625E0E17D231B7A123086AC
3F3685D22BB41C04947CFB48654EEA0262CFA7EF951A8B878B25AD1786696A7A3DC4DBE0EFBB
81D6D9BD0B1A3FC4F4507873F7B6736C901EB1FA4709139386BD237F77EA23626ABDAFB0F99E
2E6C5582E3F46F9E810653E63E5277207F901CC47780F981545E8552A319C971E98BEDA1B6D3
B6620893DBB5E35E3B9793EFDC917410F420D5977F2667F6A20581FACB9782F77754CFF68E1D
026EE55738CEB094B2FCF4A56C27C36A91A245897FBEDA34197BC61DC8B1A390A312E20B31A7
5282E82C9E73211954CB024E2DDC81DA28F340F8F25827C65646C1C940CEAFBEDB5B572AA190
3AC3D9716AEE3015CB09BC2F0C2114C842779B548D0A571DCDAB95635E1DE43BB372209C850F
7831436D98744D293984CF880E9892434B9CEDE4823B76978853D41889D815ACD1E0795296AF
3F1A3C10CB20DD1BE4F771756F604CEEADFCC091A39BA398B920B5B5D13C240DAB6D91FDF993
7D3123BC3321147226679617339066FC8C4F948986114E2B4C98D7A8B09B4AE05E0627A3F52D
1D89A18329CBABA8D571060C4A515706229A48EB35730A89BD527A34BF2116C1B72EBC0905D6
0AEA23D2E1417BFA09D8F66519193A35E47EFDD11EEDFB31D39F1556E82E5E3169D9342C2ABB
597FFCA432F14E249CA530D1136CB89D77005F9527B9CC2933A867032BA2065B83A868E60CA1
B5C16F7562F942ACAF8B8B79268AA5F0AF345352B2F6616F42CCC8462317E8B88271A6E631BC
EDAAA250AA42EAE85765843CB73CC6EE4B2AC6548901C8E786AAB81FB6B9D0283AD5C6D86022
4D7A91712756EEDF978F02A67708EF41BD14D8D7F78E7BFB265720363C0EB446B7D7252A86E7
C3A6CA8C607D7F56328E1698FED8E8AA0D57AB0FCC970D10D3EF2646CDC8822676D73F3909D0
834B17B4BB37EE89A5F5D04AD1C994815C94D86B8FC800364801A1A297B54161E1F499F6A244
9DEFEDF14CCADB5307B0C6136E1CDCF09BF4FC1903C4B13B28C435ADF42DF2EB50863A67370F
8B2E27EE338F31C5053C22C3C03FC0D3203A62595054EB7217930BEA3C4048435C2611D8F18C
AFD925AEE6FAE744893046F233A0F99927AEFD0FB49CE31FEF550AE3AFC5D1BC28DFF150474E
63E8E3AD4B565B26A28106494220E8AD3A9D8C96E445F3FD6CF5ACEBA10D51C2C30B5A1DC73A
5F4F5C54393D0BC2EB50CC845F90941B6236DDCFC50BA7F216E99D920AD65F6D8245B1E08498
3593F06A433EDEBEBE8CB8B6FA7BA1D61EFD713D01D2D93972624DB759620B4DA3BD18A3F032
DFB948D0D76F5FF11ED42AE6BF1C0E60C5342AA3EA3A50DCA1B84CF4A71D03B14CC663A06AB9
FAD87264C1D323D21FA110B36BE4427EF65AECE7A53B9689E900D8EC9F4167C4ADB720E5B787
78E88701FC2A06D71422DB3798A44DFD426B620F01892DE1D3119002F564A7DC6C1AEBC6054E
FDB5534C33C9BB0069805735098FC987E6BB018ED300AC85DA22DE061EAF36174AEBB3879D3C
6C2F3BB4A38E2A3844F825A2A202DEC2D80DC82EC9B63F361D265F3AC33450C136550E4349AF
0714AFD46143B62BD60BC6AE3AA3220AC0AD7F092A0CA00553DD40EE2F44A853C756F1BD7853
372B9155A1C992B4F95404487612314CE6B704ED1B93D295258D665B2B9EFF886880678CF7EF
ACA165FEB6C69A4022B85327B3C0BD6CF1940D53B7A141B99EFA005CC5BBD42DC9273D67E589
DE38FF0D9BC190317E92308004280EC6CA01F67FA2C4750C7DF0D1625728209CB0802465FCAF
F2C6E19C61EF4CFC2748BAE865820D3A1AB0F52834DE5CAC873FD371A8C6E429DFAF3D754D55
2A1F7D2C479D2003311347E1E6A1D813726D47222F1F1F4A6F211199CCC1CB9A09BAD3431FFA
087724AD0C2059BAFDE4461ADA12770A933090BFAF0FD1AD9D4B7C85ED09A3DD6F1976168518
0E6FD5B0D832C47D7607207522E07CA5DA3AD266FB5CF0A39CACBEB4E7CC57F76ABEFDDD2FD2
66EF1A47E713166AA497A1EC184EA51D015D0745F97E507750963D6FFF747EC4F22078361EB0
B667C2AC17638689E052E1DF51C1305448850F2F44C53A77816B1A1AF9EC35EB48FE5B5386FE
7458F9E981C9B014B16F02D1311791772DCC0285747C1AE3D46EAC3E70AEFB7C0E90CF4FDF3D
B2DF698A188D4733EC28B0A88FBD1ED47BB61B0D0CAFD61FD02A965EA56358BA8C654176724F
A7871DC0EFF4E91F9C579CBBDEDCEE0E9AACC3DD7B8296571F9CEEF41A5C4AB344688AA8F789
083845C95BA206CC0BF41098F23050FD4A9292CEE158A98D06A64E4C73732EFA4037417BD787
A7F2914F02A2C664DDEB73E854FAA7A13062F4CC40CFF8D0430B3D7A5D30E38A32473DDD6D0E
C9EFA23485A77859B2E2F04A18577341813F9151A9C9BD39F46E7FBF2C430060824D13F79652
E9E7FEB6A9B2F7871BBDE79885A1D382F7C17395900697B7DDAA9296B145A50D5D94599C82A4
0C1EA990534FE9A501C520E6A439641AD2FAE3C91EA148D97A1975675E59EA6936BC2359054C
F7811C28EE56A0ADCA2012D88A23BADD3D5A939D907AE9366C555CD23CA9E17E83D876975527
C259CDCC0E98F1E800F2A231E28974C1C2B6FDD1AF8C250DE524B0DB557FC2B2D22CB0949E46
C7C03AFC94F3CA1E14B4AB034FCB87EECA3ECF1BE9D7A11F959E4EB2E69675D70335A0C81998
1ADE32184B588875786F8CD504580EB54AAD9FC2C7E2E97D47AF0DE112ED63A1E3F180D9CE9F
AC361CF837D7CE8FE974543C8C75D79E1130FCC8163DEAB3C0EB3F33E325A58DF2EB986FA28B
65FE95AF5C8DA0F10A320431D2A09007CF93318F773BD2E03C04E10B846A31F1E12CC1914373
2487FB99FD03542F3C2A687B97F3500BAC3CCB0E4519AA8BF5AE614F80EBC459860164726028
57BDF6F216A35F865F89D9637F5570ED23271C6EA15EF1F6C03B58E408C1C3F22F1310BBD78F
098C287E439270B8DBA7D8EDA10C8E5F214C06D1533B042960F95A61987000720C7AF8709069
A38D57D7397F61C4D10729BB0C6132280AF3F1B5D428EB3EBE9171AD974DB9761F01D8146E49
482C427A548E1D7682D114C12334F854B002E8B59D700150812547F909FE58C573ECF991DE18
EFDFBE7F310B3485B9D8333F43AE82A713B8CCED62A9D1246BBEEFEACE8074DE3C7E0E88AF67
3940A571A95C136265BE83107B220E2F28042CD3A8FB2E47D7629B88610FB13D3330B60202BC
78659D7176A2ECC891E8E1B97C1C76D61495967069DB9C8E42A51BF27E395AF528BF0A275075
4E94849789D7A54EF3C952018CA57339F27FA57796495E07F1D51730D156D89F7E33C959A71C
DF27BD38F57008961BB37C0E1D742CF754B6965D398C0CF1D18F0C917584B3332859D9310B0A
DCF92344E1E28D45D75FBAAF45FE16D7BD557FE6754F08208B103CBD3A32874BB3BE0BE8AC08
4480B088301D8F1DE7C8290F36A2BBA637A6BB8D67617C919E97874A3E12751D8F5301598405
DE7193FA45D0302F11E5F560F33CE41DB692ECEC32C4EEBF45512B979866BAE5B75C70C8251C
493B4A660572955BE825D760372DCC6ED8B3912C2E3DC097464C9B5E142453C38C30C034413D
771DB050DC1BE2F87A9D2E26D19B987E8417581085459FE250BB1CF3A710D9748B680C44EB89
2A38B9236C5FBF886CCE93468C881494DA206A4C1DC4EC5977BD49B1528F2CFD558F6AD08833
CFDF249BF7773D96FB08C859C375B588D52F52C8FF9C3B851D667DAA37EE66586DD0F42478F5
38FAACA250DB56510625BA56359A8B6796CCB3BC77F1F76385CBE7658AE83374D47938A2689F
DB93FE288C858EE4AA180EE9ACA639EB51EF276F08D3F555080565DD8A5C4AFE3E18777682F1
DE61993055BE7CCDCF7F2C7FFAED8D5A1EAEAEB4023562715D35F296CD10C36F9ECE689CADEB
5A2EBB37579C65285FBA62BAE5EF2DF59A20F41D6D939466E1C59855FFA0847AE8C9596E7231
C4ADBA2DB549801B9928AF730C4A10CEBD0493F6D75AE52A7D3A1CE194E884B72C907B902A8D
87FAFF2F602092FEA1D382439AF172F4D03E6D423ED4CE82A2DA91F934073763A9464E684772
7A3C29AE3A3291716B8E9BF4FCCD8EDF4E55D6B9013CEF8B9B05C002E768C95F46B765917375
0BC1AC014994DDDA3C7D9E8858C47E8812C9B7FEB03B9B300092EEBF6B7A5277EE4C647303DE
D7D8D6C54FCF50BECDFB11DECD1AB61040F6E56C14FFAD0678089D6BCA1B5EBB9D3FF09A6C0E
4EDF2498DD3D4107B38371F2E4C3B4E5F3B7B2AC0F915A89AB9E9F914BAE9A26FE2BC651475E
DB150A73EBDBEB0D25F696968227F3240F42119ABBD26241FD28D7EBA7920AB7BD1D356D4169
5D5EC0C190E2E2501A70BAC09568870873A47919763D15E0E63FE87BA15DD3640DD779B56CDD
FD0C9F4D9928B0D4CC92D24A56E562AD9908E17BF233385EA0779F8E6C3DA7A7D1518F1B582C
BB6A9B4C59A8733A80893151973EA9BDE8FBC5483B9FA1132E7AD90DA426AB0F671250EC961E
21FBA123FCDE8DE174F2B172A5E2791F43EB02FE8BC731550400E723DB997A33AE7CEDE842FF
A3D4F05FD46747178EBF84494401754977B303B52C713112F5D9CA1DFDC6919292126E5B8C6E
1391D988383EB3FB151526C2C9834707F651F967B7FEF4EBB2B4C1D31546F56D619E9F1B3C5C
5518D06EC55CA8111B0C30F3622946864B70ED98F3EEC10F5609933169BC1E5A0D888FA2E326
D1C2126217AEDC146D9A0BDF66C49523AB4124848D5FF29F3F76FAE770524E5197B2CDD255A5
07566E31E2FA1533A55F426F9E805E8A1DF7E1344716BE464CA7CB315F1A88D254AD0EAF6C58
196C0A02EC8E5C6E6BC7DE8A1C2A2E8C397BF1CB1E42444997E2453D8DE7A79848A98B20F4C3
ECD7CC083DC3415DFCD9CDBAFD97671DA2D244C4ADB7BFDBB7E9C5D2AC0009D17A090C284CC4
05CD59399BD4CF94BAABD9FC0E14A85466135FB1ED17080DA3D4C895284FCD7B908F293E2AD5
76EF26774FA24EF57D89A2CD5310479E36E33C5B9E6DB2C2FB5C0510E4FE9A0508AB7A7769CB
50124CF609BA47E05879931D838FC9BBE7C08E3C4682773A7EEC3D2932B8BC5D6746B0D4D46D
5BCCCCB5CDDBD75BCC5E5F306F568BD2D4DE809046CB77D0061FAF97C170BAEE6F153D1F045A
75E9126DC4F6E5E525190CF860D69405DEB535662310A20395EDA1C026AB2C918CB56935D4E9
26EFFD4573EF67A66DFD93862FB0733DE72BA2D0AA48117BE3CA76682602C7AB142245A647DE
147D8A57AFD97B5475FD13A4E765D00DD60DC9AD322C6C54DC1DBAA8F8DE600D7AAA3C48131E
7FEECD744CC532576B62DA2ED0E7E81F08E17E5DB3768AB76F53061996C64225E6ABFAB54EF5
7166EA5A078A786853B601D9290DD3ED270C35DF866A71CA5D4AD43A15A4A9DDE12B3B48E51B
0C78BE950F4268B34AE72477CD9DF89D9860B013DB8B690B64F2C71F27CDF3ADC7C6CBDD314E
2CBD3052C80C6B146DDACF17C7BC939D5C9204A43947B4C5468A9CD6B63E7E9498978077687F
195B2E14F2E069A499AEB365D90F6A176271BC97DE026CFC5601702C4FA958518D6A55F891B8
2E416B619533195E0E1D15A6F8DEB9EBEFF1CFD84C954E6AD74EE2D802DAC4220B35056327B3
D016AA07B35034DCBA93D96FD59783AA1D5508627AE138744C0912DE822184213776F3AAF02C
8C6F6A2C8D7B9FD865F6ACEBEEAA082F9D18A3A08BA38B851B4E66B52E2D94189CA460B3DACB
FE9C1CEFDEF52B6873D36900A76F82127869DBBE4D5149AC9D6CA0B593C3B5D40FA439EF78F8
2C7EC7C7BEE3676732805A4DD915E6986585790626DE31A41D66D1DB95DC4B53B254D452F758
4DE5B750131A954629694A0BA3DC669B88967F61ECFA09653D2665BFBD2460E8A12C7D509FED
FB0F61AB29BD66A76A5633F21A8A9800187A2B0F89975837D421D3E539FD0EFB39E30D4B2A62
343B8F599544937613DB1AC5F9AEFE33E7255D9BD6777731A42A6EAD1BCD05FFB0A30E870A50
D72B7E1AF90B9DA6CA9A7F01604704E8573D5E28C01DBC605F171A79553DB4897F3E1A1923EE
76703C93B67D968812CC47C15FFD8E7E6E6A1F7EC3A1B0779AB9CCAA94040C280A3AD56E86E3
76986E0B1DF20C872F702BBA10324BA72B58203F865CC6C84537AC97DCB20725312D4CFD12A9
7F557CF42C7CF9089EE60A661D50311EECFEAF15888F3079622EE5F7B01C2EFFBC917A809428
1B33D03A3924C062CE4193872D4C30E95191A901E0A7FC61608A190610DC13FEB8039934A2AF
DCEE59AB615551A45E312AD0D84CB99EFD6EB8603DD19C75E12C9EFDB5D770FF27048EDA35A7
C9DD0D18ADE1BC87086EBD584463A80C397C184299DD23C93E61A6FDFC5013233D50E1DA581F
BD9955DE2FC2F431C366C51F5CA7F46D08BC6DDA5395720AB78BC765F27E8FEC9ED7DCE7589E
B31EE237FF9D6CEEE5278F592205C209BDEFA3D6860F52317DA5EC629F70069E24083CAB894E
EC5CD3310E1D568EE391A045DC8CA11994773B7373D189CE66653EBADAC714E6DBE72606B9ED
930442C8C68EEBF444724E01506D87B44E010C3973736F3C9BBEA07E97337C0EE4D9FC2A4656
D3C2DD059D73A178390F2551BB8B293A22B47333DF03B52269CD6B0EC08063FA9409229A4FBA
EC048C89D75CDD365A3F069B7883506212C2E0EB035928BABAECB5524315BC723822813826F2
4A349646262ACCF16A7D54E9A5586C0625B4F952174A6270D05CDAA5F791EE0C5AA5C138AB97
22A7ADF729F45D12CE352CEA568A8BB15E87C886E0851572A41C9622BEC6406768EA666F7F5F
33031CF6291D04B501A1EA68E54420DE675D073F41529100941EDDF1DBF66B453A4827DE4217
0A76B431892A2605D292A0E9E5136C346B2B0D1CB6A8626A92AECFF04A55B0290E8FC230DC35
65A189853FEBD77AAC5E32F95C61689AF2D0B53E1A44336BBCFAA0EAF647348A885A8C7020FE
72F56DF749767FED6534E9B41E84D0D84D0E0B99B7898AB7AD380A814EBB96A4FC4378DD1367
D1FCA5F65960E59D6BA4D6249A1E20F3E691CAC0388E873654BD821635C538B6609912627D1E
4CE993D39957191D489BED9C39DC3F9DD5A09DB1DFE2D2415BD50E347E6B3AAE64A9496579FE
2A6A6B8EFD4679FB2FC24868831AAD2D6A65BB5D731DF9B8BA59436DE423E17363D9D8277504
BB558B7F30CE9D61F3A881A5B82CFBE810CC2D0B86A2B9144D6EF1109ED1B6681DF81DA27F27
3D517B4F35C0A350BBE586781C6324F67EC7E70E790E95E72F7A7C3848B73037A17DE662151B
06178161374FF7093B0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmmi8.pfb 0 0
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/UniqueID 5087383 def
/PaintType 0 def
/FontInfo 10 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
 /FullName (CMMI8) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
 /ascent 750 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C545D25FE19253
9D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB47934F62D1F46E8671F6290D6
FFF601D4937BF71C22D60FB800A15796421E3AA772C500501D8B10C0093F6467C553250F7C27
B2C3D893772614A846374A85BC4EBEC0B0A89C4C161C3956ECE25274B962C854E535F418279F
E26D8F83E38C5C89974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F024
867411453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF897084C90
6B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED8DA4D957225F75D06023
7B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966E739CF3AD5E256F90286A34069E5BB41
22F94F18F3485658D0D25B938522A8798215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93B
A667868A419287FE59BCF538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF
5EFD9A92D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A0CC3
BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD7BAC3F9964D303D4235C3
C6B4165B66321E4EAC9FE3C023919FB5AF90213AB8CD67F43AF2B5754DBD33F46D66881BF047
E19A8413E9B75F6CA2E411ABA3AC218E83243AB769545688BB11C96D144E31B8B1D3C06E94CC
4E0CA93E8AC215264E7B8C0B6A8B0A8EAD7DD22C978F30353CCCD8835064F3B30B573862B9F6
F1BB4F9F0EDE4349D47F002E0126BA5B28A1E973729C67A9C6EB6420FEAA18CFC71EBBED657A
C70A29F6FE28E1911EAD4E5FCE01F01553E49DBAF680D28E03C219FB378B7B185F33D4600360
AE9BAB21EB320A53838687730E1FA9B864BB874B1C23A1D0EB0911D4862455B2CAC2D26FF4DE
E1790712627E288D2BA460988B27A67DD7DE61E16D7269771E1B9D34A7648B7F763FAF32337B
EB5DFAEE98C7BD077B8D166DFB1D304082B1329BAB5A3F2B28AFB91643995CF078E2F621AEEE
EB34BD429A9086EBC1C72B8BC1C64D53D5A3F6D45E6B0A43FB098BD06D342DB86EEE5D05C450
0CC41D49A4962B9DC51E6BCD91AC03D6BE5E553CDA72D202CEA7AF493593D127CC518769F82F
035BC86DCE69FBBAAC96BB78CE6684EF598F25E1C6A31D3F28C37E02E0F468D9BDDB2F728157
0C919A7E5D6A22E711EB29E2BA33CB1A13FFCFB5EE60B61FFD8F866A7DC7DCCB662FC427EE83
2A4080BDB420DEC645001D884279A089A0C5136A279C307E18F8540416EF50587ADAB45513C4
667F5E4EF1739242C7AF81D11089F7F62B3AFFA74B4AC2D124523FA915B8A66DBFAC8DACF547
0462BA0DA2A712E265F9C842411C0CE6A08C84EB696A3FEC3ABFE555382DDED81622F1FE0DE0
E5A6063014045B8C69A534300FC41F0BE40092FC6D0F9E5D34DFF0C426931B3F47A9A4CE01C3
1784E7BED780C2640D818A8B28EA5874E76E070B12A648ED4101C378A134C6E33709A0B8EDEB
680B3BF2BEE3BB9AF99F45A782E6BA676DD2454F30BBF4EE1DB06E5E4313C21C68B8026003DF
667F6EE572DAA19217BE5EE31DB62B127412A09122DC0A9C0EDD96A0993570877527593D2E91
2770758341C74BBDCED80EAD5C98952EEF411427B9F65DB133417604A367344E486C0BA25EFE
E39FFDCDE57C803ABA1E3866F02E724DD627C296965ED85E96B095875FA363A99CAD79019785
CE9FF9F659B9158A174666A4AEFF45B5B243550C9293F0C139AB065C9B2AF19AC0BCAF65AA7D
58B5F24FA7C33A137881D3A7867CE9C0606F46435CB688D206BF9493B500AAD7105895368B95
BA4425333C1F242885E87CA78CB97B7E81F218F823F2AF84B9EAA4AFB3A51CBC49E9CB381E29
FB8CFFF3034EF1C722503F3C9D9646A585D6AFD7ED0A7B8D559F461CD4E515930517044D0B4A
D4AC3A4D3B72023EE85A8EAE09BC0D1BBF2E7859E9FC6CB284554B3B4A5528E82269BFADA90B
A4575BE70FDF15617DB098A2D0EF645C51A66D93ED6D5CEBDD3D4FD065907643C27E144FC89D
ED5ED10D01C1E124614B52CD092612E1969763D4A274384346404C7C15074A418DA629D1123D
E6791B056CC9C0A3EC537C509FCC8B70E698B0E76C1629828F6329A71EB59CEF49064774FFE9
87F909979FEC183A62BF1E69D3BDD8086F77500EA942EE4C193B4CB3E11A7C5A8E3697F2BB7D
DF5E1B78AD4BB17A60ACF255A59B2D7ED18F53A4D5796D826263EE3E53ACD120790418B0B4EB
0AF786D312D7C7C4426C5904C3A7577A643BCCE7D18AA14C37603F7BAF11DD21BB53D044A4B6
159A342550EEC56C8E664A843B9DA091F88ACAF0EBC75BD51D70483121E4151154EEA8807077
8CF7663E5AC0038AEFA78C9C21F9DE964C93272D5FF2A55679832992C51F6A3D8523085DBC98
18DDEDF60B4E84E5AE6E770EB2020E8F5DBDB6F00A170E635BD34CEE46DA79ADB08EC9D0268F
38B5E89CC46884F9D73D939BD1D3EBD890BEF71F04140A1C08C128955EF0BD2C3353D6DDF20B
DF75A2B0F846EDA4C3F5EC44CBB7F95EC85EDE7301D8CE9184FD69BAED86CE555F0A2CA62C51
B90A2F4054F4EE75956DE6B4AC76F93D8B1618B5380825BF5183CBA93E46A6377BC81CDEA928
FB9793F8619AD2B800EDD88D4394AA582700EB8B0F7E337C60346E7B274CE276F6176D29BA9E
E1E2530E42AC119F883F51C39D68E4E10210B7EAF1B09532194B3C5A9C1475F56E08BB040584
76617A9D385717F0935FDB33915A70AD89B46B2A8B5AC5FA0269D55ECE06B8527D8094A372B5
7A8527AD9B5E1AB061407210D103FCCAD69CC61EBC0388AA514E77034E8E63EFB9C26FC4C6FD
0C711C9D22CCF1D7F1D73A8A955D22163E5A7D6C2EF097476C7F0430DD267AD2A4354B464840
FDDC5236DD8CE5BAC0BC742F5D0CD3635E3915E88A3D12C698ECFA7F82AF1A06B9B4E556D744
01034059D15527EFD05B4AA40B0C82C7436FDA71E7C94406363B632072CB3A3B5E5318044FC2
959B4552661391367798A23B222E94901C62D3059A9755DC866D2BAAA4F1D64D0A8A70A74F11
18DCAC1D05FD7B1FBA47D776AFE8CD614AAA3AB2CE279E92893518E1BA3E50A815C97D7180E8
CCF149EE977D5C4C291F92BB58698149D30510AB6C7A09BFDDF236F33F12E5C68F9E3E334C62
A170DC3514E4C48858598CCCA7DD021A822D1BB18BE4863DAFEAD512AE054B6A21691701E975
4EB3A37452B3F24B7071EC6A74C73ABAFF68B6E9ACD16305E96E2AFBAAC487F7CC293AD5CCDB
CBFA95A0A0BE6AA2B708A156918B5E019207394C913729F372EEDBCFCB77A5A9BD8FF100E140
C71B0A531D77A68A161667657A80F6411E661BBC400FA2D040A306DEB216C5239B74E293A4C6
CA9BE312B877897E7F593A826614DEB7B588F76986FA7F38A22ED99E4F46DE910871EDD1BD6D
849761FBBB0923AEA7BCF6879B8900028E30EE49C18B5E4B391827A069358FB9469EC9A11ECB
C676E8F44A31FEBC79CC82193A04EE59FB0A82663625EC3FB0EB44C625E10B19D65ED70518E9
C00680595B04BA3311A715C9D975BB59D663711D1893B95239F1FBC1B43B3FE89E1A2EC02F35
27AD8E633587FC7F5C8642F0BF7CFFB610166C187AA490D94668615C3E0AC68B8C38749E89E8
1326D10566B1C323605B935752E8EFB1ABE77A120C343586EB52E1EC2348134094F3419BD8FB
52F3BC76CDBCA032C061689A8BE68009DBFD963F7C719EA084ADB78A12E93116CB344E3719E9
D4E066A18D63656F6A8B6EF52EBFFD5C3B1C303BF896055B896A596707A113CF5AB4D8A1732C
885B5D2BE98E8949EF163E08D2D9FB537041E4B345C1C2A262FDA6F6B2E6F3A8BFD53492365D
856788C43D37507FD6F867B55DBC8E3663AFB662362861AFE8B3CC5D066B429461A118D17E91
E877DE062CD3780B82371CDA98C0C8EB8D3EC9421438DE852AC7AE342C8726177F075F9A9DBD
2A59388138440AD3CF13E4907E459F739792D9B03426A08F41BB476EF28697DBA87BB4AC39DB
38D73760506B3D73AACB55836F8FFAB48AA9ACCC08879253BDF8F8B2D47615345E182863A497
015483A1703132DF7894346DD628332BFE7B20BBE6211D8B3A4D0A5465F7BC32FEF7A5262409
6F8FFC4A492014D9D9D1EC997865A66A3BB8BD4847E9D5E2B111193A1FB4772182DB32DBA892
4F75C7A52A0DA38EA8833CC41AA40FCE9EA018FE34F65008EEB6972EAC2CEC537461E6E1B161
1622F368A1A1241CCAD2184AD832016BC627E5E58D9148D73F7CF7A9E37F0C8F1DF7099F75E7
81EFDE03BE799F668D99D551AC50EC514093E24C431D88199D562B7632A2546B14CF1C193FCC
4422010360DD647F3228D414760F53F0583629CFBCCAF821B786AC580344A661EC9DCDA18DC1
B7FA3F108E8262848E7DE08832DF74262B0CAF010D3F6C60592A33BF3FF9DE886B8BB909362C
27B8FA49CD155780E03E34CBF67907D36E696DB8A19F6B1E5D361C0952BA1F09681CD1F4D527
9DB6033C067E844F8625553E9729D477B71CEC655BA53B2A29462BEE213D3FA9E6A2A1EB292B
4EBD6E040BB2FDD4EBA9B3ECC1B065C8E8182BF6C161187BBBACE178EF9119C9221BC52897D3
4441AF441D4F97AF3DC4BE3C019AC623CA73C33B66CED3079E899480FD389AD6C53AA1E72948
9C0F4F48DC9460B32C965930793EAA5E7BE298987DC5B8E4A043341BE14322783202C94E763F
F47CADEB8885E8D3A27EB118A708C532A912FBE10F9219CC3E89FFD2621F012BA2A50D3B32C3
8C0EA5AEF30796A54DF5DEFAD6A0522847E7A6428103163F6BAE666ADF5CBE1C85308AD051EE
D2FCB6F838DF49B5287DF8A6207D5084791EB2D88E5C011335FD149BB239F965A10EDA5F00E6
AF0D4DDB42D6C4E8169B7361D0182B983EE1FFDAA508F54B992ABB9CC4A97735849C368CA03E
82CEDD8A80310A9E58C415817EBB007656A626A5EC55766DC242854F06761634F2404D369A0E
4D5038E9A2DC1769427C08BAEABDC3263B2152FEF9E5FEDEB17198055D7CE538CB67289B2B71
63FD9A1A4205147CB25C45202B8EB3216DFBE6E4AD4FEA2EFD4199F73C24380617B96724B7F1
B82B92E31603795063E855C0871663E74A4DFF81EC4C57E18DAFEBC839A2F7F0EA56A29BF414
F5221E056C121FBF9F464FCF4E4C9AED12A786AA9CEB188586BF5DB842098F009095349E0067
4B01F297D3F03E0C3002C537E944B50CA86CF19A77D065280A60AB636C3B41323AA092D3AF23
75493D1B27644C93337B5641A26418EDBCD16CD72A5AAD366021918A08AAF433CD83ED491FFE
E09594E7F0A8090DBD20796EDABC1C8E279ABB6CB8B79C28EF5CA567D300F01BF988284D9BDF
97E031CD7B5DFEF22F53031B23D70727B9415D7CEDF5A3F6D562CE8381EA3659C8579A6D49D9
00E9A64E70801B991C6A35162AC359B05C18CF2E12520A617099F29A9394E7F13DB7404F9C5A
99E28F5FA7A5F7D7880B297C2713EB6F8E3F0D07A47E29BC4D7B203BB43472D497FDD1A5D744
0DCEBE901758373BD7515E481E303F7E3D04C1CCCA302DB19AB6FDC13C288D5DB62F528DE9B7
9B148C8570471DE0BD343CD3D65140A03394451E9DDDA940316D79CAF11E348F678B9938DCCB
9068445033825CADB0A6E571AF9E433B3AFB42C1CF77D03532EDF7495EEC82EB69FE4ED39B1B
892ED99EA53BD9509A601CCBB9559F3E2426B51324E671D8F5E27F474BC660D02DD6CEE8E163
2E17C39B0C75B375CADF1196B3F4BE77088CA2DD04A0621C077EF829B5B434838BA8EF2955F5
270264C923E70890523928CF5BB04BE0B6004D9405B6F41C31530877C6F2FA13083213A55ACA
D2E7DEB48305FA536FA532C35E8B1650C6A13ED8EC5315729B7B1E5A3F589D04678A1F4FED16
5923D2A030C99D0490F5920FC1FE15AC12F629B5844ADBF13B02CF604093C552FA8B197CC7E3
8F8AC442E35578FBC72D0EF6D939A20C5764132828086D71F223DD3CAE1F65E9947BB67EE960
80875B4F1F81AA69D4118D9BB8614C2BA0387352EB5F4EEB869B27C4EAD5512F30D7CDF9D28D
FB09E6279D07D7F96D5EE2829351E6100BBD663C28EC6398D2C6D16F3C881FC71ED26FCCA12D
840D5483CF10B5D5AD19B4D4FD60B462C1A701C59456695F8F82D73C147B6F8875B23BDEBE67
4ECEA3A8B98C41B753B77A6ABA8AB6C96ED2E831C93488ACA8B4BF84AC06F6340D562530D0D5
FFA0D54219CD706BD612A5D0396C19EED4E91ABCE6F2F1663DED489EE088CEBCD7BFBA33C99F
5C97CF4F2D10DD429C791E51277483E74CDF60D9FAF66702610F22D1B4ED71D2DC470C84A46A
86BC7B71430A5388C2F2D0F54DACA44AAE4D1D0BE527A595800A9037FE7D670FFBEEFC134BB9
2F6027314A4FE819BC5C1EF52D4D598D798F02B71188B892FE8CA9564DE0517E93A9E9EE3896
9F8141153E0E64DF7BCE4CFEBDB61BF9DB1F106BEB9C8F1A3C3B83CA393EFCF0E35A4A48226C
4B9B541B22ED2860366AFB10A754D35AF394E9308F9E50AD37CFC0AFF6D51E60903C5C300B2B
4C791C2CCA98840A2985970194BEEEF7AAF324794EA1568D7859A80D43F1C4F38EAC08C6B3E0
3F1E4A033A9A33F07D6903F8035B3632FA609A28A6D156E147CFB892553B3ACF9B4D43F99118
8F7917B37AEFED17471B37EE30EA578EC8342214A9D7529C5A97DE061CF9D62DD2059BDBD4DC
B92171D6DCEF294F7A328B2457F5A3D74F47786C6816B0AD065289970DF4652BC565759CD7F6
0673674FFF8864E289301237A2248B8AE4C5EC5FED526C0F728866F3490DC95E62A0BCA2D74F
F5E2F4EF96F38AC72A0206490B78E430D710DCA080B1E7387270A7A4F7573264283F085FCCFD
FD6C30026AA278EF59F7A246677023A964E9BBAB13B32CB30B4E3618EA0FF5AF04D928391D9E
67C43E56BE00F5C0CFA5F6C0964BEA165ADB2D4B74B5EC2AD82569A62AADEC8F346021E68B0B
F6E6BBA2407F634AEDCDADA412D43A5C4B2F2135F3E9E5E8D65CFD43F4E3DA8E525AF550E0FC
DC10395C129B037B2A6DAC777EFD5C9DAD4BFC9A861449C08D3DC7F1771FC172752741DF705F
389BE2B256EC80A43BF379FA28EF7230D36286FC3F0667F21B1EB7941507C13CB939D828BC8F
2760D580DF01A7CA14118076C6FCAE37989FD29CBA8E935DAD8655F631EA6560EC5AE5249B7D
B86A77F55F5922B6A2AE94AB6E199A88D457B54ED645E57E792DFB122B399F3A9584939BA3EB
118A9B9D378BA19526D351DCF0CE300C28D895C6DB952DC353FF2344FA603EF209A8905EF34D
3AD863B185CBC3A23F6BAEBF4DE2DA1E4DA5C8A55C9E5C8CAFE77C6B0FAD41754823DAC73672
BC1FD755058E9F8B35E97286968BA9C375F25DF405C6C6D712AF224E3AA2E400BB009DF45732
0B2C13ACEF8FF422D20B83675E041C442E770F7A89AF141B0F2D7C0991468578750D4CA4966B
53C965DFB06C10A81B5A24C6D3309F921DB766C55BED2B43ED1BC655AA128DD54F8CF46D9DD4
C8D7EB18E7A55B15FE42E39574F1E5C8411EDC9EDBA14B1E7AD8A2E956445CF2F2F427194A0F
EC78844ADE29D7A43F7E0922228D6F3255D59FD7F8660902A6C760733006364285AD08B537B0
FC98B8C66F47FF23A922B4A5264274ABF2CB166509B81EF9837EBC028B7C86B627B9AE0BD903
8F567CC61879195B7F92DD22672708917359D77C784766FFA6D2E9B2F171694679E54A3C0449
BACFD8B19DAB8DF9D4B88541259C8946E0B5D772E8DF9173E32D5A80C571E15CD465F7CA1DA0
7383FA0D85E2472256BB99967897E536D47EA366FBBC2C9105B74340400777628742820E7107
B69B6FDA68304A40C91A7A1FA6BA0B59619EBE00DF91C6F3D21FBBAAD08A3B305FBEE1ABA791
C56A80EE7389CAF1DABBA278F11BAFA2CFDE8A2054E58AB806D9727F6A3F7C7EBE4EFE63F980
74C2F7CFD63062E29901EF4E3D2D5E0BAD4BE96382D1C295FFF3DA9644FF0D2941614936BCF4
33D4FF6D41216B06B756BACEB5FC5454C20F0377B58E32C7ECB42416992209A500481779055E
2894626EECEAA23098ACCD6F94B4645DF6C9DFCBB2613F06B1BD577E38DE7C917F97CA8330C4
611B33767D297E4EFE50860BFD70F98DD9B0F3FE5343BE21BEBF67154248AEB3A2D306A5B302
105669122D86E83BE4F04FFF51A10A8544B4D4E849135EC5E3F9AB542EBBDFC18067564E485E
414DE0A00C6B7E876560A69AB23AE66B121EF55B3CE185C2DCEBF14A3734B89A07BC286839F8
70508375128EC520FD4CB26E862240ACECB88BD6B26FDBD3AA05BDD32CD10E888AA07D76BE16
7742D0BD0E131BE6E9DB97090771F86CE98994E14DAA311B6E3CEF7722552C553158D9D79C59
80AB15E5B768FD3EA7CC12894CDF1EBF3A68DEF3D4CF88427A21DA520E916FC8C7AA53B4A323
4F19C7F77F4C4DFC2C602E2BC581122F3123AB7018983967F5D85C66278F9E3E3CDEDDFB173F
DE86411043257CB4DB5E91D2F5F7673C9217F889C1DD570E2032C7D76EFA5908261600AC74BE
E665F8ED3BB0A56733C69E44668477DB93DED0497E5760F68BFFF7BE314624D919C9A3BEBE8E
A3CAC3667E2ED796A856AE7B5789A4491A9FE3A574F1EA819C313B3A170CEE768BA5B6BD6060
2D4426F9EABE860AA83CB86023E9EF9809A941E29F521EFB419E6EAE9E9B83AB05A754E69FC2
3EA7D3619865A142EC18161428F501106D57E19EDD785F633B43655323922FC7110EBB1B7BEE
6DF598FA665ECD389540A35545736930D015C8FA8ECEF5ABAA538308D4B07A9731D947C95540
47342865FACCA912E2D16295635A7636ABFA0E9829C0BEB1460C9D410EF7BB49F3EA6F565857
B248E738239C43CDC215A1CD4717D18ABD3F75942DB475D3F96691DC77B79E232ED41737C237
A6CB02C881916769E1AB1C759B36C8CAD1BD60E741690187E8260BDF4AB0FE5B6EDDDD21ACC3
C66954ECE2409B5E76A8A3E613E53F024F0854D2460673185ED4B14D0D245AA34D0F5A3865DE
F7727025077F623D24A075AC5C4BA0302D4BC64C19A374D2E217274A1FF2085EA08114A326A7
C3A75BCC275FA724B96E2A497ACA4705EF561027B629689CD299CBEFB1630FE4E17EDD58CEA1
F17C9DBDC9E5137D5412EC07A1F8B8A67390223FCCF562BEA08450135201FB7266B89E140917
DC752F68C759730DC6D843A1D5660619E0EE4B299DF09D160A1AA96E7CAC6246DC3E8E1147AC
67B33A954FEBF1A037927D6F95A2097AFAD44C57F7FFEC85EA99B795090934D82D1D7A3985FB
6207310544AFE8B99ABDEDED565B1CB68B11C0E04C3B0EFF812E407FCA1E395C95878AB0E189
4258976DA888B589334758134831018AEE6B78144CD5B975C1B9AC2E22F3DC7494B9994FE997
648C1D86C62491B589CC74E00D95244480AF698A66D681FDCCD5A172879DCB90629A398E79A5
16F256F4EA5F1EE8B28A82AA924F5FA669B1B39468F3EC7D17EB06B7B9823A7678C88D5435A9
B74835FA23032DD3579E858AD8A39ED3A90D44AF449DEB24FB6FBDAE56ACCB50509D53793F38
92648A00B68BE2E76D83D4B609F6AF93914480F548DC7A40DE4B0C781D5776EA318FB3DF6A1F
763504011D4B7B332E904266FCB2B670C14E26BB9EE1C34253ECADE5058D801E4F260E84DCCA
F516EC3277E9A6337290FCF2725E538BB3C48E78B84CD9067C54B55EB1113E7095ED35F95BDE
7739120C06BA3D43A1DDA569B496347557A29D53A630A1952541A78B6013D0EBC1717EABBCE2
212649C4704F83C05A867BB012FB467875B3C81ACEE3365434D839DADBC63803515FB4424A46
DEEE817E797069EDAD3602AD42158916D8C38D5B03161B60E96AB69B74FD5DE8EB45313E1AFE
0DF3B16CE0EA5BBB8B0E4D3E083F1EB603FA14E63A2347647FBCC5DE1124958C80BB637DD6FD
8A61D92D5F2488E505BC710837BB99939C0D5C2BF0A94BB76187ED92B0650C24448F134B4E32
D86FEE388CABB0D79AB4318CD562864397AFF7D2ECE03AEDE0113498BFFF775911E82A833376
CE0D42E92506899AB15C6BC552054D2F2B6B637222743FF2B4D911924E15AD49871484B0FEDD
F8D9B99611D47DCFBFFF09643777593CF5EC558E19DFDFD9BDD7AAD3453945189BD8A3B135FE
C66258E16D620553F66FFD9B7C84D0D53970C11DEF9E4DD4C75319A80CD5B1EB9BC2BDD68A17
91DCE48FE9B6117C9EF66961066A57401C179F9C07244A4E3799908FEA3AE2278C86FB350BE1
DE41DE74E1228B4CA794636D2B9D2091C1EC14EAF7407551D39B19CD49CA8002D30D237142EA
33886840C2D55686358B11D260B2B54720CE3554B9F3719AA3F4FF12CCD9DD9C1DFA44903719
8C4D49C87FF2680C8A0559F4846A5C47F7B8E8EB3835AF4D355AC2D650AE1260CF4AC7EBE753
D02FA7B5FE814EE9C4A6982C54536089D4411FFAFF46AC2C547D8A1F41BF22A2A2A2DEE51A1F
872E409FD1491EACC63190A47964E3C5BC3BF3267AC4306805109C8276D6AEE58F61EA0F7AB1
B3413AE3650CA71B8312BA4147F38ADA08B61F5F4EB595668BE69E21878BC8B026515225B059
8711FAD5E57B54FFC89316E9BD4773374F052AE4618B52230182F20C7063575899363A2A0C6B
DB3DDE78EA71B8AAB813D96E8A44205A96E975192F9A78BD0A055AEA03CB72AE979438AC9141
18E6CDE466F9CB274F4AE05AAB8EB30A4D717C0645900476FFB68530178AF0431F373DF8E10A
DAFDDFEE713164F23E0A4B0BDF7C22B87864B71BE9FFB4403F60FE62B48FFEFF3EB4D1A0EB01
33AFA436C5CC7FB0F04FBB843F15C37AF3536DF2D63A19CE375F315ACB58420EDFC916F9382A
9F13166CAB1FB3094B0FF3FEC5BD351176989A7CD1D45B5CAC1CAC8316C3B6C9F93909A03785
652ABBC17CE47CF9F8AF4E8EC22DA5D8C99B6B4960CBFB65E76837B6C1BF799BD7923F0D62AF
F94649AD29A5CFA9609D02DFB72795D46902E620692139D10451E40C98857578F44F9A4F6D31
1E9D13CA3BAE922648D3A2B04DAD3362E68C1D259FCACDDF5CD76E8A3B1B2ECE370B9CAF0D51
46D76A0B493E07CD6689D57195CECE6D8DE29D1E55CCA4C7BA8060F5105ABCE8D6ECA14AC09C
829AF2A37B3A216B3AC1F8F242EA177F16EF94EC09AA96C8B5CE2D0199F8CBD52BFA35D06B5A
E936FBE57D9B1A5800C2A23707A4255A88E1596AB6B358CD40F61C3B1B18A82903246A2E990C
6E7D48BFAC7E51162A606EBCF17F2EDD6D9118937D7C55361DAF3B62F44389FD424785EFC81B
CE793E240B41A237AD8546A4FA04FA7E867D03CA25ADE2143FD0E4539752DE2603198CBAC0F4
A30EF636119F9BF344A96E152D709832F8A84A6B135EE4EA8237EF38086B98222EC0ABD27D1C
54D977F3551823672557C349A20525869D569DA66FE556747A218A4CD35CB6E307E648681138
F96396DAFEA2826472A28BB5394B5090C84FC05E396245A1FAEA5CB865D4132E27BE88D87BBB
C007CEBF69A18D1EB9C793E041C9CE04BED0AA7396BBF47FE7B6710C3B76DC04D6DEF6AD1CFB
E6005E257859E58A7796BE879108339E413603CDBBB6EB21A8DDC512E19D95DE278F78618CD6
0525ED9B48687FA60FE1D171A95496B9FF3900D8466F485D5520E6D1412B2A6D8D7E793F99D0
C76EA9A7E35F7B99F9B3EA328F33287B579180BEDFBFD263F20C0A5588613A6F5D55329129A2
056B7E872505B64D6E358EAFD812571E1482FE750830D7FBFF27D4DF9725432A1E755EEBB263
63CE1C6602715675B402F2B203F721CE2BA74EA410BF643596250DA8E2CB2D6323BBA5008C5A
5D6C775C5F6F7621FECC3CAA5347721D9BAC5A301191A89420513C0300478600592C2FF2715A
33769FC96680A7DF788AE67ED13C88D77680271A93818078272F2C541EFCF998478ADCD6744D
715446F0469F4170615B17217BE0EF56F30DCEA2A63A6AFCB1AD9F4760B7A5F718D1A019A4FE
C0068FE570B2F5CF2B39B1590B8114A10453E7E00D9934DE4CDF34A85D8B4DDCAD654C2AEB39
248DC5E15532F223084431D8B0A291387CE4EF5A71A06C7DA2CF8C4548DED9188825714769E4
A92D7AF9107B1ACF6BFE19858F1D9ED4689C5C62FC284D051491C3AF098CDEF9AD6FD1818636
89B2F2B842211215F7F7411FAEB078F328030059B4C3119B57E0E961880F408AE50EA0F84F7E
600A98CCF9030B7BCA883E1C69759B642656D95511D7C38CE426D17B8A1FE8117198E3B6DA08
00F7CE9CD5E7BCADB0C3BD00E85290E9DB2A9D79D279D9A940DF83A62790B18EE85C7DAEDE25
49089EAAE49778D7C0AF4C995EFAF04AB1EDC529136527B3E1F12B51CEEFC0EF1517F9F5D64E
8D5238F78A5A1C676E333198A374455C75E85E8CBFF6A34CBBE9AF23D6947CBB8D02BB9BD924
16D650AD7C688565616F7E4A745061FC20737ADC530BC4C02FA82646AFFC2ACD21B018B5FFF7
C461ABEAAAA5DC2A04258B49B9E4AD2D5278A472D2B5F163EB0CE0A46724F99F5F89C0482889
C544373169BAB927FAF7AF451C664B6EB7366EA9F2DCF0DEA442B17D26889F6BB334D998641D
70F2F539E57501C698195B8031CAFC002ADED2F88619F37B51DD94D57C9FBA4552710942CB4E
09EE8108C0ED633035E70934B9F970B7D7168E0AFF6E64B5E36B3EE7BBB94E1288FFC42EF9C8
9B5B4AF8A27277275B498CF4B00FDD3D022AE73FF71105FF7852655C47F7CB97BB5A74D1072F
F234A06CEEE66D9846A22919DE8AB9C529F6A497E48126C64D139CF9DE0BEFE488B6F3A246C1
8B99C626F6841E75D7CA5ED680057A7C162EB906BD3D093D93D44CF99402522A523ABAE6DA8B
C83E931CB08BF96435C287D281C986A1803B19E1D8B35EC2E6B2BB95361CECCE82E0144C17F7
4BACE7F4962F886834CE12F0F3E5436FA820650F5CF9E2D3FC425379D5BADDC2D92B4D0DE618
F5B886616FD6F934179E611DE2BD3B179ED251DA586CD7ED0C8A304376BC33FDCA06D4C447F9
D21E73430A0314CCC895902B6133C82E9F63BCEEA0D6B2C8A94D48BA74794D4432990F9AA72B
D918DF872D359F8ED67216FE1D978777237FFF91EA7CA8C480D6EEE737051C55625AD145C9B0
AEF420FFFE7099BECE79CEF11CE15393F11C982BFA053E98C6B7C3FDA6371DFADDAB6F99DD54
290A931B17ECC8E20D8F1337549184BB804FD9280B47BB65E477FEA627E2FC26255C042E6A64
3340E11788913BB31931E8D97B933EE0BB8B836852EF6D86F57E587823FC06272ACE98D5D34B
AC804F59A972BE92D8586CE85B82FF0F29196BA0A8FDA61B0EE3FE6C01370388AC2233639A8A
10709211357A4FEAD9DE513E0D6D14A398B65F94EB45BDCBC9D1F850BC68F48C1947FC5F404C
BC62A95D65E0121F2A66DF7E21B5B8396296E69FCA6E1F8520C9E6C34F1A3FE014BA30890D50
81C05E1015625BDD20E2A191334D45671EC87E207BF0B7FA76CF0FC92184B9B447848D5A5541
1C18BC46CE6E57BB540FE15F490EF6C26897637A0E7946AA8313C0F9C77266204AF421B2F7FB
6EB12C9B47C9855A629D6B6A6E83FE964E380ED0BCDC6ED700B39B62133CC189B7275EB8E1DF
257319A8AAAC0415B620A548AC00E57F0C05960162DB483894EFC51AF3B8D4EE82B2DE929CFB
67E33E0A6879F55E07C7699AE62E79E93FF61827C7B335D43ECF9CFE4797A0BB32555D8F47F6
1C487E29CC12A18214195A933D3C80AA89136CB703C237A81A8BD7CDD11FC7307778D37F9C3D
CABC830F6C8627B9DB9CFF6333D4A54C2E68221717B4C6BA39866910A6AA2921640B553BB346
BEA3FC8A7BBED5F91B5D2984D66B47719AC6243F797788294E575B712E7B53A6B2C3DF8197FB
4E36DCFBDDB1EBE022DDEE69C2D708A8A8322AF0BA41E51756EE0BD6BD5423B56613CA12644A
DCB3BE5669B979A8829B59A6558CCCEABE7DD95AF76D2C374B6F647F9A4452F9A7ADF2103165
81F204A6C63654176AB92ACD3054432F59EFD63549256B93CE54880846F75BB5F84B460F83B7
B17BF089BC37B5E5A869E3B2155527849E9D665978D3FD6FA6E49F341AAC1856BB47B90068DF
49C9AE0668566F535C1BCFC904616D299345BD7C5CDCC929BCECCBCA99F34C228D68DCE53866
676A80BE008D1484C97D74D663412655151ABFCF8876CE94C9A8456E261201EA59BF42CB69C4
E2CA3211B319175A8F4FDD4CE2E2EB14C97546763DB16642F537DDFBBD77E412AF498C61862E
27CEE067D695E350CE7EEDE63755CD50AB0A2406BCCD282AACCBE1E4DBEC9531933261A3D9CF
248FDFEEF0F3FFE2105FAB8036152FB6985528FEFD16722078E688C24E9F7350EF4A96C7AA66
E4BA378A7783DD445875C4476B73D6EA579ABC18352BEBC1FB2363886DA7006EB5C038A50E4D
721C6F31CEABEB5608116C9960A1981AD53C41554DF33DB3711A05DD6810362F3127614CCF2A
9BDDD8CD1D2B0AA621330D58C70664C3E5ECDBCADD66CED742C84052802B3A37DFEBF88B1C69
82C5355351F8D003C747DA64F0BC6140596D899E86A09E5164FAB4E923ABADEE1252F54D5100
8A42F75E3A2B30CB9CE51D484F7E497699F7036A3C085E0D6E9E11ADE94188E4CD211379C567
87FDCB9C2861585AA367B7C5579159E68A7603D1CD98A3CD984C365A0E0A4D9B01A65CF8DC76
AC8E97B4A6321ABA81D300384FE63468AA41D3ACBD9E2E2EC890F84B19479BCE8E37532BB9CA
F50BD1C74476083399B7A32D083F0A8AC3A30372C91F188ABBA2E7CA1119D5A85F2A49247D28
485CBBB513C3D494F310CD9055AA14A67322DA65AAD350DE4060D78416B2DB63EEDE914FC635
16AC7D1F4B02D7D0B5AC32E2755E0320D475D21F3BF0A048036961702BA25968E204F1E95DE9
766DD04E4FC4F159E4FA4F958B3163AFCAF9102A25E5F08E86E9F90A0D864DB442AE483ED16E
39E4AEBD31CAF3AB54DFCFA3411A0171F7E0250FD50D4EA408A4F7A0913C9569174AC16E7309
E26B61D4F90784190BC88E0ECD57A8F9D94AA172BBBB263D987CD0F105B4D6711C7375D5B2DF
5EBCE142ACF383B5949714555DD6FEC3C1050284A4C87D9A51DA494668C98ED3EBE399304F22
B4BC7CE5BD232BC8CB3FD26B8AA815BD114E9469846B2C76A74535BD2861294BF1D84251EAD2
C227B86CC5EF3F79E7D5CD23B4616395403AB4AC26E9857BBD4694D6FA538A638BB947137A18
6583214E8A6F15C83D130985E452B93B6E53F1844FBD2A5CEC913F8E8A9A3A04906996891575
4263C44637E0DAC34E7EBE28F373D09BD4514F26FF71310A8A3E0CD846BCB4AC17C220DDF8FF
9FE70673C1FDF51F2850B354874CC183BDC1FC4A13FBB9FD66B40380E348B28505BD07F98101
7A8B2F6921F34C0D2CA5AD763DCAB4713C85148B5049CBA0F9ABDCDC9357FEA489603A9D231A
CB3E5D16F1F3288AA853CBC4BE5D5331CB9CA3F8BD68F90F63719E4D141CC20D2798FC996224
D9CD6A365376FC610C27F44D1C7D2C4B15AFFC1AC95A8C74FC3E01FF2F3802B362C0C780E19C
91E8C49CAD25CF8E5F33AD7485A40BC65121638CB029E594E149EFE15A09FE85E835DE458080
A6E1EBC7B60D9148C973F852AB8D876917B9C8A149F76658A68702890782BDE4BFBB2AA2DECE
2D99A792CB91876649E079BA4A6B4DF85D4DCE5F28A35521527D0E99C9D1947606880B1E3F91
DD98CE5142CF2C835348C2DFAEFF4A0B6ADBE7D8F8F414FE3DE073216810BAF4C0F106935EEB
6C87F9783F3D033D590EEC97ED9EDA7B31CBC1EF3CDE135BD31BDF03028B3B2859A94456BBCD
E51F704C6B726C3E5AC238ADEBCE15C781F086B58D133DB503943986349EDA6C96871833C48A
ED739634CF54BD4948BCD8CC54741532241DDBB86C89BCBF5DA5210F7356ABEA7B5D7770E726
DD8FF989E8B62AD7C942BF869FCFA7033FD028C88B9D12A9C7FD216D9497FD6298088F2EF552
BD8DAD52C33FB0084DE3EA83AF35AC5E959BFA35E54F75E1EDF5C09D6A6B2E8B8E530E18F25F
D6AC3F6A954E1C8645DDB6F6122D0FBDE31F2CA272FF1B681130E572B7D3FF0222D5130F1818
E3B7519F3574518A0783400E51C49AAAFA804143DC181C5766B5A033DB82ED974B3E85CB393C
93745B2813E62EBA228FEC23CE5BB03A1250548D117D74FDD46AFE84E8B778FDB13AD5EFC0A4
F26D799299FEF9DE033A1F1D814739CF1FEE0F4E6D81D721FE080BB16036FC998CF8A26A5456
EDD24890CE28E88054EDBE9DF693C19FB20076D13C47496B43C3F4AC7A9C046D169E3DF9AB6F
4ACEB098A630775B91815B5A90DB2A4F3B2943CA80BDDE9684C926DB09ED948F43CD95C9095A
136A5F5482CEB85EACC0998A1AC866CC9B5478A51695A5D49FA9871ACFAAEEC397C9CCB7EA2A
4B9732BC3C3341FEA4415F1EFF5B1C40EF391C3F4669C89D97227E27DD962B87E79E375202C6
335490076A43C82C91B92506BF55C062AB393611C14DB67172868EB0BFEB760A6077A388C80F
FD3ED8DE4E6E3772BCB94004FFCD679B2C28F33D1835130F1E54717BC5649B1E53F6D4230DC4
6CC14DC850AFF3A9BB6F1E534BE428D31C764FDD5FCD25106A2AF1475074BEDC7EE66CD21A98
9650A4853F99C7124F714225D18729ACE296F629023A4A66A9DD00717C5945247A1F9B442BF0
686BFBD668797696EFB67AB27CD8C4A88732267CF386CC9B6A3E25FBEC6CA4582D833C60D9C8
F885DF2AFEA7F40A66BB4240C6F98B58DAFD70E9692C7E71E79BE0EA1CEF25F3619A956E6835
17EE867DADB2C8E31B11938EDA15CA039701035B303E9D9CB4BEEED3A04CD8675B1A7E4FAA19
27503AE0F0C58E61097AC68F40B18516E452AE332529879782CE0112B23C38BE6D24D6CC876B
4833278EF6057F6D0F86148079D561A0EF31519CB7E37BC9DF583B20554CC3CE7EF509830AB5
EEAE9684F5B1538812A83FDBBB5A853C22522BC471763B20E7CE3612F63612F955394010CC2B
7C2B810EC744508D47539F455D35708EE5A5202CD2A5B3B5BB8E4B55579F6508945998785754
4D9DED45535816F7EBDB00EC17E06FAC142C0D880F53A68C897F6BA3AEBCB24969CFD22AE6AE
D28531CD2F4A413E92E9EEB2DCB0A872259031E7EF149175DE4E432AEB8316658DB3BB53EBAC
C8B44DC6F067576F34345A68C2B8ED904824C6F66293B51367F77B76E7972E89DA9399EADFA3
A7F75A266893CE1E95BA10BE0495830B1AE982037221E874106AA19307276581B66ED5BCF97A
EDEB09DFB0B95601D074AEF08D2F495EE67833BC392E73BB263437634C0EA2D32D1242679CCD
839BDFA7AD9D078BA56B0BB6DCCAC56571A55C3680DEFB57C50FDCB0FC967074554DDA3CF1FA
742A3B1F51B887BC8C65EBB90AE01855BE0744FBFD7F2E117CB23B0FBC8B811D8EA0602CBB4B
AE7985DF0A5B800771AEC2F99D7A4EC66644A6746AD23E5576606D5F679365394E9E0636D6BB
44BFA25E9FDB633F4983EF92141DC1C71A67F28F39D3CF5C06CADF2BD4E05147ADDE3F50EA6B
D2B117958B0A395F2FAA26993825DF2682281A6B95A887E66336DCCBD00A39EF855178562C9E
92738AE54DD6FDD0B68542886FA782E1953BFE4EE2AEA21F8FDEB59FFD6F4A8BFD189DD3C0C3
45BFFCC3B5177FF28EA539648113C456199A477BD929DCE489CF4A4C26DE0EF71062CF1B664C
3AF5E4767B4467865E64A8903055040D298F87F13FEAE895F452D2AFA9CC4F57348EDCD6F7E4
B44B78B8AFD38A51190D0CBF71250FECD9BA42D67D68F60FD13A7646E0D981F02DE812378161
3FF1D2F2DB1A0C806724C486A1FBF8875833B4AD8BFCB5794E407433712EB91694B9A41E555E
D395C742ADFDB931DA1007EC2E95CE0A76DA31EFA24B17ED89C6992F23D1335B557AC3995B95
989BD9F08160FFD0F2A45DE4413FCC63570B2824040843C9AEE6931D3A6EC7B4C95D8F66FAC1
E5E15F802277E35C8410630C376462A0FC629A08438B65D2959ADE6086AD239D1EB06B149C2E
57C7771334D9C2A09F6BF1EC56AF77A2D7D022D7369441B5E0AA3A0FAB0F446BDF7827626342
3D255A5809E1F77BDFCD0BBB28F0C04806CE05A25BEDF3CFFAFE30D0FD8FF89ECBFC2A67B61A
B7EA4EABB4E9C2566F9468A2306236ED57A29B5353872B5FEF6A629E4015B5364FF9A3A51B9F
7C22C23C772CD5CF57E0585DED9C659EEBCBD31ABCAEA5C8DA6ED3CC0764814FC36D800FE906
422E1080286F8B34A082ECD5283B440F86074E697F424DEFD923D2F6B7A1187D295D31A67FA7
E2DA262824466E761682A4A18F159D3F7D7E61D95A6A99FDE9E475CD9F2EF0BDB0B49FE2EA13
74794FE351B0B0C853157B43740DF84EE9379DBB5681902F04CE310CB08251AD235D3F173066
2979FDD35A1FB637D22BA4E4141655F0D4E3ADE7BD759D48880C02C272FAEDA3EA3C4C4CB286
FB987EA7CDA3117B4383D27659F2EA657EA1EA00577C50F2634085C9D93C77FBDCCE09D2257B
EDAA68F5108875F1A58B9A9F762E0E6CA888FDEBEAE39E49C39F7D88212FFE938972219457DF
C038989D85DA668BFF668A5D83AB5B20CE00A32B08281D8657AF13FB75F5FC406B50383B7E3A
511B47E06CBD344DC789F203DBDF9B9D76480054FBBA6DE8D2A5795A4300967613CF567ED499
3A9D478FA7E0308B71E21AB6A430D6D5982EAD91A1B310394C3429606433253D3165DC74A910
8EA22912B2F4DBAA80347505837B9C8FFF1C50E7FC36AB777A4FBA266F1C3C03A070752D6234
F2727AA53B2B856ECE4850067C182CE18F4D3F63B832F54A290671EF492F32416FF27CAC8E8F
DB6B3EAD7C69020018A49BCCAAEAAAA9F550E35D18A50F84DB6A298C1E12E56637BE28C68212
EFE1DFC0B429A38AFBC875AFE71EE182B9B9A40063C8CBE8E7B0D46D478D726A5AEC7556CD79
B160D6F2FD15FEA5ECB5A176BF25DE6C4E0484446F4F8B094BBA494BD55A3806F1F9142D9345
FDFC7A4C728171AF21257E7401D71732839FCB0219ABA6B9DBA70F321590947BCC6625FDFC67
3372C4E75FB69C4394B24F57A042C190816E90A4E899E0B70E1799480B345EC2E6C32F556CA3
145390289FDB97B3B84DD28AD91D2715BA59DA571580D7297B775406E69D50D725C17DE1A3FF
E2DCC93ED476A293CCF79CE209145F0DC1B8D55AE968D36D1BEECA3B9DCB31143A6A215BE6FF
735E19BEE36F2342D1E3F51ECA309619A8B8A010322989E11D37448B0B31C1018E14A220C402
6B0EF4DC0C141849D080D73E3351733A3060DF8251E977B6899B268383077A1ADE0CF8646465
F543D7CB3C7235FC20BB79B8AB409B4012A37C8440E7B24241B253CE228E341E756ABB9523CC
07D3E8533A8E9B065F9C65393BE11269C80F85033B5819830B4D1C847E066E0616480B817072
56E866988C17EF603AC91F7F892828912E309B98F0C5371300FA322CB5F5CAAA0591291EF6A4
615C35F24510861AE6DDEF2DA888E8DE2F1423102F45B98E45B665D860C640F08FCA0DD9E5AC
EB68F5E1ADC86423BBD115779337EEA11724FA1DDE6B8981819705AE37CB4F5BFBE41C34DB86
3A96309791761BEFA2BE19AE7215FCCFC0CC4239EE70C8BCAABF5CEAE58344BDF022CE39A146
978513B11B3F0650135A07CBD5FDAD9448B616673130E6D2325F0A915CEE01ABB307DF475F4E
861D7EE76CCE7C914A3A17066BC9D8739D5AF6294D6F70D21B01365E0D0C58F40CBFCEDADCEF
171F846833A750F56AD226A382144EB3F0B4C88D446264BCE36BD797AD4377D6C3B3704CCAA7
61881F4F04D6DEB8D712DF0CAE05492D40F4C29EB1E05C33322508895ABE7B811CE270B3417C
0AB52758684AC4A8145EFAA73C27A405933964009793832FA191239DE0D266355A0ABE7E9B8A
ED924DC2E68B4AE236CC55154EE0522D6CC51858DE0C19530DCC3E02418C7E56DE6C9AFF5568
37303CFA7C485B2B85482B6A05C843607E1C903D2C27762F285FE786CB6B261B96ED3587FC15
292D159A95482048CEDDE126D90F927F77E0998231A070F448C18C5017F5109AA02691C40B9D
FCFBCECAE2169CB72EE8478A58D00B1F3ADA4F27D5B6FD0D4130B4993C92E9D02ABEF3B805D2
4D4B9ED00CF23B13B02F3D48C49373C9F50B577E2806B4F2909D04DB88FB1443C46F75E85C90
77C594C124E3C03453941F41A5664518B20425A5F2915FB1ACE8A516CE5F6B125ADB39E4F76A
ECA8A857633412F972D25561CF65E27B1A51ED760EB0589699A335D3D11CE61C232D4BCE65E7
955DBD6F374BC9552C1AEC2BD064F9E625479E2DD962C4A632290D88ED5B2BF5454FE871CF43
CF6915DE21357C0EC7B96693967540C418430ACD908C58117FEADBEDB44995226FF61E72665E
F730C6159576EBC7551A86156FCA85AF26391A8D6EB7E664E8EF2991DB6B0EA5084343F33C3E
F389228006E1D3F46A1088201C8812850564DD13EB0B9D13B81C3904DF761D110E646B9979AB
E521F1F2FD6026EBDBDE1ECF490F42F81533A6122E79A4145F80D224CF1C0709CA4868AD37E1
4EA3E05A24EC785A16CECD09A60D27FE950D14542D3AAF374F8CCFB8E20B47DE335F4AA0E9E1
BC68408B7DED2726308BA21B36BFCE12B4EA70A67A6B733739DCD34F0C7C7815E826C892F9E1
DA125AACFB402EC7395EEE63B91277FE075DFCE8359803EC3F34794D661BE4A4488988F65B86
30ADD1D4ADC5DF3E26FB06C5AEC246E080927D0DD878337FF845F1A0A9F2B18A63A92EA0E908
D4B1F79DBE83B6B783A364718B1D05B38B2F3A88595A4B366504DA1861DE181F8A49EF2B4ED3
77EA550607A599292B7C8CC936DC44EEBB5C7796220825191A81649BA91BFCF940FD5E1969E6
094B31CFD2911ABF6059C1204FE4D724F49A56AE12803C0FD45CC2A95E63CA3CD3274B406FF3
CBB2FE85F30F52411C6445AE807759974258EB3A1EE9E72C96BB23ACA7596A97113FAE19AFE2
A157B8CC6B16E29A7CEAA523A5CF2D6C8B16204FF711B2DFA0F08A4EBA6BBFD1C4B603B4FFC3
2CD8497056B699A6AECDEDBBA164DC9E9B341473F80D628D025B19E35AEF898B1143DBED0D33
3AA60919B5B0779A2F566B4B967077A223C542DE8B0D54E45E819C8FC8AC85DE157AAF6D34FE
3CD673FFB138E7045EC617A432B8CB5E186888EF54CD02D6356D6C8F330C8E02CE6C4E559837
066F933DCE4375228558C1309B0A909DB8D750FB2AB68E7914DD54FA317ED9797CA7CA1535C5
DCD58520D03412F1A94BD90574129F74ACF3E46B7F2FACE2AFC53D6CCB3F0AA47B405E103609
FE2E9DF78E4D7863B594CD7D8FAB98871E4CABAD022AAA108A882044E4ADDB8EA7716E5EE238
CBA7ACD6ED9F9174F07BBD1DA98A4F2E275F9038E9BFB63490A769CB91BA21DF98FDEDEE8C17
974EE83937BFCB5767DD7B983915855A464D0DA943F1516E59059D27B0D6FCB3C2E1FB876522
9F94D1D5A4B21D2AC554FE4F0DB95B360E655D95FBA14E60125D0E81B4EC573201E59296351B
F292E7F5A0D4B7460BFE55EF2F1723617062193D947D569CA0F6DD92DBF5B3F7A2775D834128
B392F59A6A0F7C40861B4CA156ED601E5B5B7081BDFF05B0178B5671ED3AD1B86386AD07B596
40CC7E4FAFA29FCE8E80B81D166B5CEB172B28C08586FECB16E55CC693DC5D4D0B6F24C73A1F
42FB7A4D3682E860CD1E73B0E59645B9504CE6660483D1CE3E9B01BB7ACC7C85EA34C5F629B4
5BE307232F92C2BA9526270914F1FBB4FF075AA8F191B2C122F96A35194D0EB32E34AFEFA6B1
5639A144F54C15E2519F2B12E589CE8EA362EFDD12631F50BA0CF35F6153EA2A805894CBB5D2
F70E3180CCEAEE72C4FD5B97A68422134EFAE186A2C7F74D8C7C870C6BDD8B287BC89D75A9AA
938FEB99E7A7DA2A84D66D02713258E3756DF3F5E1DBD50CF289A24C3CDFCDE19E766802EE91
859C742D25A016C64C8C9CAAF0F133CA78F07AE11C30F1BE1DB579D57D905123FC2368963508
40FAD1E507481DEEF7B2799C5C1E728FA9067941BBA409094D9E73F756EF9E762D5124F6DD9A
D33980941437F9C3C4FDDFF51A9D83D85E834601B259819293867501C578B458C1CBF0F24B67
0E47A56EF46701B260E3A9A17B0B7A0ECFABD3E9561B5956A5402C4BB7D1EFBCB72A5028EDCA
47B5323329229BDAFE18740AA172174753CB9C4082B8711C62BEB765754481EB7A9FF3E260DA
B0F4720B1470D578188D667385B3E5AB464FB6EBAEB53F7A319DFF20C7F4C9DBB7A6342E7FD2
3E1BFEB7DFB93721ECD09648990C71F437DE8AE75EA9BDAF17668EC5A90E0E0EE04E6D592FF2
6139ECF8AC6BD368EF4D41D53AF7FBC286B6712E24CA73F601685D6DD6DD554761EA09928AA5
73A8FAB20F204C42F07C497915A280ADA09804A8F793D1C347BE765C7DC10E309FB8ABF13FD9
781269144C8E4BC6F3E28C8FC149F225BDC7B9ABD794644B0C96A11377322E81220003F7E348
AF9499686556FE4F835C5A785E9623F01FB872842CB67F5C9DBBB909FCC61C93B154DB1347EF
E7DA6B95A08A0CC06C76828DDC579EE3EF5611A4314950D9B292C5288CB4BB23172AE91E231A
98FEAC73AB070272154CAB31BF59E0FC8977E2BEE024194A14D7FED9C85DD91A683DD1DE2C4B
39AC3DEC565956176E19C09FEB85B6819CB9CFF5ED3E5162D64F1C0C230F18EC5AAE9FB10D0D
888BBF20BF8B240209F3C795B69590768DEA6DEACEC20D9DDEE28CE24BFF3C7007D385BC2590
7B199D99CBF3C79FA40644DB71405929413BC59CD893E98D03274A15DCC235ADCB7D6C0B0D78
95233C0286B75FE82E88EAA083A0477DDD970F9CF95C3433FB0D212F602D08D38ECDE4318FC3
6D45DC7C67BF9B45F795700EEA8BE7D9E99F3500700384D7976212E05380AF9E23347881EB0D
56043CF41FE3BB18ADE219BE1E38AD37F533C068511EFB5C1FE269806E0826F1DA41325CB9A2
CC9B22A3C32CC3E4F590F8ADBD35A124888E31E09962430C3E384F86685CD10723482A8F153C
B2A35E176EE21021F390206778DEEB6C3F8E16A442CC61E1D093CF37086CF6BB2A4C81292131
E40AE67E8B953C1F334BD439AA715849A8C513AAF632D6096E1F56D8759534F0E6FF91B50B8D
47F267F7FEDB3EA33C8566973F8045715D0722C51CB5D91BC38A0FF32A05CD1565338A96786B
F8B284539C2985F1200C80E4B415E50B892AC9A517A0CDC4CE7AA9E104FB6EA53ADB120477C1
5E93A6E7A173103A00E49C3B906AEE69D103DBC4211CDA97A191F200666FE8565BF2E121527F
915CC59C373E4E0943F3CF21C6A7059EECBD96A434887F899015A613C8506E0BF5F1F24D2222
D6E57D9194A25651C5A9F564C6E8073399C3CB3C4974526603CC2D571705829B50EAFD8C0038
DBB0B8F0EC9B51168C82066DD0965FCA1B7FBD5CC27444B1467F36A1C298E83BCB67676FED2A
ED77942DF301B7DF5C36AC3912C055CB31598332D37FC411AC39C57940E830C860FBAC9C3B30
97BDDF8A1CB41DB19B748FCDA8FDA5C11C965833361405F3C4D367FA8AC303A1A4F74E7B7642
49B4E7A5FC56298F3F7460E36766D19C617AD7E91874741BCC357E034A2F1345BF8E5E01CDF8
AA13B08BA3A029D41264A039D4B83EB053026788613E3D8B51D8513D1AB0C279C6661EB8C147
10EB38DE27E66A90AE06B25B4B23BD7F83243DCF38419B8E3CA605E2042E878E442413F62301
A09E0922BB261AE35737F36ADFF93771EF37F8BDDA4E12DF8DF21C94BBD9535B6F75BC584467
A860F872262901670AF6A9DB8AD28D364742173642D1569F2113AC864A5ABB9012B277683484
9F5136C2D85A04137ECE9AC08724E1386943DEA2272FB47EE6BC0E90D9A9200353FA9DB88D99
FD5FEFF701F16F0E0EE958C420A3195FF79AF3DE86B975605D2880643AFD728CC1B091BE8FD6
5D9DB7C9196F0568D79135EE3E4DC95D61134C181A14853BD93E15D27B8D5F627D0CB36E8C15
2CDAAA10AA02B9A6E602FAF042511A5FB49A515D9415FF920DB59DD5EBDD335DD506D94E15FC
3E4BDF8258C1E2B4331731A9AA35678C5B800604024B88D483D214140A9F5D22B7E2C13D20DE
1C911299468DCC801E481ED5C40D3C40923D49D7B8BCCCAD5FB64A46F692BD6E782A5F74ED16
C86235E5FCD9D150ABE50AB240DFD19D74D3E0958B445337AB94B228CA976D556E243B906A33
1624F295B2D0A690884F608096E94B360A975A622942C5CDD7C8BA6C08B42EE2338D907EE4C0
84D954A9D9E1F7F89B3BD508E3717F12606A1232674268DF8D6218023E6B6D646834DE78CBF1
11435FE66582669B4DE746AAAAE8CEDD16A36849C35DDD7D963B9387EDE48D89698AF8A30BCF
DB30F3DD1FC78BCE8220F4F4E40244D3A4D0228ACFD8C6C575339D8D99691EF5027429763751
84F4A1D165ACFEA854D6308444795769DD448651216D43448BFEB89D0CE6C754171CC96DFF39
1959DE60978DE38748F1807230C2DC537A7FDEDAD78FE2124C4BC2EE2612434C7E1EAE64B30D
899AEB33327C0A2DEA85BD1B9D0C7C71F647D5D7370827DE24C0446D90A4105AF0B9EFBC26A8
F83E1355D64CEAFAD76C255D2970FCDC9483C954BCDAD22E856CB3893775416D27236EE5AD60
BA92ADE130D1930525B76ADB89E9846974744C0C58F7800E95460B5CF012A2311DE3E4992A4D
7ABBD9232EF476FFB5B631512CAE65B5ECA0D71AC1F696BCA532D663443E6183BB3EA8710C20
B0460BF423D6A898B8E61AB0139E96825B73D0E113552F4C5A3DA6AC1559A0A28764C7726B8C
A49C7E8824125A90EA1B94B91F3029E2C56616AEC2306EC5F63FE4136690814049B33100414B
98095A81F770F5DD97D5FB304C29BB51DA11B0273DE1C9B04D8568A1C4B16EC349386C731E1D
AFE863C638C326F7D54DC71DB47378AE293442500FE592450BEB8C3368EE7D0AE5572F70605D
7A06DCBF53B9CFBD403CCE2336115E73D7988FB55BD189CEAC03BB72798C0976DFBD6189126F
7E37113364A03AD545E5E9E2F88CACC7B67E645D05E2E8B79E17599499A9604E2818448E8587
A1506EC778D6E26DE7646947996303D7B51990BE23CC3234E5D251568843BD646BE8AAA7D5C9
5D3D22FFCD72B78D92FFCE307F81A0C2D0BBBE3C0517BE1F9348D13D3E631ADA866683863487
232A0F41426EB0A650B94B12F8D0A2010DE848E8F04F435093F016BE670BDD5582DCE1852880
C5634B12CB0FDDE76D5546B41DE45262CCF3B6FD0C030AE2408B436A835BAA014B8558204423
1A8AF664350BC62654575906472CA43CEA42ADCA86E5D69A7547B9107A598B8765E7D9F31526
995FE9051C9CC9FA9A4532F6756EC3A0F6CA00DF9B6D47DF4920D29E4050C4293E7DE5AE4670
C0B0B61E82B13FDD9C7C51746003EE7859190208E2E3C96466F8FC21A13D0F10C78BD3517CD7
4ECDEF41F4C03AC41BE7953A5ED7B82338562A47DA86DF52688CB97CF3457645D2F32BD235B5
2F5081B4552A029637142A0A7C9700E48F42D54FA26D4A42E9B25285C126EA053536B3E27F97
2A055F418145D49410B963DFE11C36C111FC57939DF7786CB0871BBB7F0495EE0F47FA1CF4BE
109A75271812306312E7D00D7EAA2A2DC5E21D93218E01143556B0780E1CB50E8719471BCA7B
D40D78DBF482E0432CD8C7D65371F5E5C9B1F8477CF8AA7D84E75473F02D2002FA39A42355B4
B078FD97B3E47D49521DD01366961D16E4F5F919F80DA12DB2ED65DB27D2595C0396905F53AF
2001AC5CA867D08942408E47FDFB057E4722819830974A0F737E1EE08CB67736E52048D033F2
2C516EC8D2101020717953ABCAB1F08413835B2E91D896CBE1EBD3947F26BC15BF49FB1CFF21
56800675C6708FEB27FDFB91C2BF89672C4F9624C5993DD74D2D435895F74BEAB04436D56B0D
3B8F2ABA61B4B48C6F998D2633748DF2C0432BA0BC09D469F8A33364D04A5323410F7F51DFAE
6221459EFA2C0CFB0C507232966C39675E19D10580DDA4B369F847E92CD8DD6A4DA0016C29DF
E2516FD2C6A43E0BE3648A47550F7A466FD8133000D7BCFD3718C2CA02E590A6CC635289D670
40767CAF5F645B272EFCC9480340A9FDE44F9811361FBDAD420740FE5927BADD5AEF668E5FA6
30125361927FD081DCAFDB5041C6E83C869A2EE2AE129498AA5DB21A7EE9FD8A3692D66F90F6
2AB75351E3CEFC14AF882E87AA4507F64EC624A74E4AD6621BBBE6BD4BA95ED41961765EB3C1
26439E176552C296950BE7197722B2F509D84A3A39C6F3CFCDF5988B703C9A060192F492DA0D
7FBBB444A48907B1FF59C86EE5E845F1F478FD14BDAD0DC4444C4FFB4AC5674C5B5CDDB23FFC
A590616CCA8847522BE09CEDE87728AAFC3CC4F8FD647D763D9C80F44028D5B21502ECC9A3D0
8CDBD0AEAA00D6C80B79D71649FE6539B08DC1E7D385BAABE63922EFECE8A3E59E12081F8892
066C21D0B57431BA4A459671295DA94D595AFFF0A17F7D5EC754C8C5773503AC3BB78A6A70A3
6E37EDC3CAEE762FCFF7D5400D5BDCC03E4752E92F1D782187B651A42228A377A683E4DCF5AF
047E0BF0E1465FC8842C0D1C529109E9FDD9D748CD3B72E6EE734B8503D4DD58BD5134F5AA85
3DBAFEC62131980DD517E85EB8124A2C95A6398F552DD4ACC53896BABBFF8E80227182AEEC8D
12E4AAD9CF3CD77BDD7965F711A664021469CA2E12E225F6E032E19207734BEE90CAF4868D11
6079820811046AC6FEA4C683A752B0245A4D88076929C222F80B599E0D43E6DA6F1B95A5044D
DCA675742B36176FECD4010AA706CE2E595F906A4E6BE90A1C00B473655BD91B8E5FAD621474
909125924D61AF1E7C5FDC07829ABFAC5D9C8F29472DDEC40A9CBECBF7B2A0C73B719C840273
A0E63BC63AA1F1B661A320CAF887A763D4A00F37E74ADA1EF5D9CC274E8C8C9895F00708DD6F
3F60BA13614948C0BD8D5B01CAE7635B88C07B60717764A5CB9891682E013394D839A1AE9F39
2F8279F94973B3B71CA27FD04803C95C6A7DF3872AD63CC294598CA3929A99CCBD4C176B8639
9DFED539503BD664A554FF37520E48B32F76F05D8521C6B0E6FD6B65F5FA72E38ED28C0B1A98
24F6CEFCF70873FC2FB50D7BA1E8C55452D32AA5D260B8FECAEB9132FB50E5CBE2F0A68813FE
32684B1C6AEA78A3DA5CF1A7354B299AAAA2C0C0C84C1829A1031676708156EB8E3A4A535317
32CE5DA8A9484BB9F3C0A88BA239D55F0B521B7E11AAD4C052357D336A9D5C01B85F3CF4E3EE
CF4264C1CC063C1130AE5C1E5DE2D28EBECEDD3EB4F02F38568702505E5C99C00F1A7C4CCE5D
28BC373137FCA623F420C7F4D423F42A6C96070CF3857708CD2302FA534C80E44E6FAF3DA451
A5BCD38E310124468D1B5503147E9B8FD0F080C2FA152936A514F7E9D50D196239E3E788586A
F8D1301EFCE4E85A6FF7C561F280853C2E628B8CD37A55243DE3147951D992E4CD2AC4FDF700
62CC32BFA6EA65B1916ECB6170F0EE8274AADA95768FA1BB693D76F6ED09C697452771863134
124BDCC5EF388E9B6D85F497BE16D7780832535C3F6C2AB6A4C9F9C08653FA64893A69052FF6
779ECCE2F67284F2A7BC9C162CB05238F173BDB4AD0DBD00F1EF4BCD8524EB6D3EF08740F843
D12260ED63DC5603EA53BF2763CBDCCD3A106BF932A853CFD68468AE7536C74DAC494C7E50B4
4D15E55E06650F5C597CA6B5DA9A15308637D2475C73417DA0F490277CA49598A500431F930C
199D5EC6826E3DCFF805077A231C3B5DBCA16B8CC31C925F7EE0273257E97C1D2A1DB385242C
8D621DB150DCE25FF599CC411A28B08116828CBD420B8D95E9770E65B98152F20D089873F61B
42A35DA83DF3902063EC66DD4B5165B307AC73E7FDFF117CB3DF6055F9E07E0D00E38A7AF8A5
1442D1165A0BFE243286EBAC4604FAE887FB279E692AA6446BC56E29C97B491211CE87994402
008B64F9A6A5E125ABABF6447E024AC91DD75623A252AA14B33184B61E3A208A4A783A4C0119
F2D1FEEA938C65E1EFB579987AFE2F65CDEA0185C14381E292E2AB676637A6DAD3ADC9D67739
ADA45EFB2AADA7A0F38925CCD30B593197A73D0F683CA68EE3156FD04C7162ED42666F210228
390284F3C6F2D69E0EC47741978DB324C7D9E91AECCB2D45DEE231E77C6E469E868B7BBA4A6D
C259385926335772A8D96C7207FE5F9CED891F6FC56B44B691BC557BA9B2D93E49B53D4B9A17
04491E20E8CD63404033AD8E25C11C9790F07146D84EAAB5D2220F86B7E4BE4464B1C81737B5
39D0BA7CAFEFFC8C3730AF1C5F7AE3829E3F2E188C90AF4A2FEDFD34BA120A10D02F4CC36A51
EAFFC8CA4CCA364EAA20C7EF44F558164EE70CF328FCCB748007003B85CEA6E0FE38572815F6
D7F0ACFC8947CA427574ED249280EFE8AD0E02951472565D1FD3DA86E9DA4AE3B45220324E93
4A35DFB7A3ED83B42D3204355F6BB502E18585F745D72FB795E25198FD5D346B35DE2E0B2DD5
126019F6D9DFD1E45AE121C022D43526418EC31FC9112C4F736126099AB3E28AD640913D3C8D
FAE32A83D410A7265CB64E056CC3C7DBA5462526B3AB94ABDB7CE60A1C6D850E8A0EF92D369A
981607208321C365A5104FAC2F75C95605AB641DDABB9AEA8765AA6F1D3E64BCA4455B59833B
4E159ECF2A135C5D9ED876C71F36AB6ECFF487475C25339B2F9AFC5B2A26D90534B5F05D70ED
E68242B5470FD5B708CF184A035B044B679BA5FB406711947A4647484A4893ECE8857AB54438
E2FCDE603D5AA68129A08EB04FB945734A46B207BBEB8C657C1ECE2BED8148406D93E4C02B4D
51B7D9A224D253DF8B47433D5CA15E7970D352A1643FD07D8F6E372798C189256F45EEE01226
D5F7E5DB121CA4BAB9BBC7AAD69566881CF0D49DFFB1CBD46C811ACEC48EE8707A79F99F8253
F113AC094B2307843C5969DAB0BEBF9CB6A56B8AAAB4BF96F1E615C690CB518D91898A0BF4F6
57F580D6AF51EEA835E92546E65CE0BCD4E3E440F7BCC430807900D80DE834BEA59ACB85F36A
B0D3D3F8C527F5C70CC0BCF7237CE6B93E2AB8223853A2CEEF969138CEE54AF3F330CF80765E
1AC21D8356836EC47E78A4864DAA0D29BEA968FDA90DA7771F3D05DB475D1517CCC02221D0E2
59A327EB474449F9C7C140E568420AE14BE8EBFB9BACDA22C3FDBB33A9CE41708D4680B272AE
C89BCD06F0344A0807C87C69051B73A18908B29C1553937CAD7FD80167C2A676EF35EB67416D
62A75B442ACD802DCDAB9FAD2B57A35AA33B5BB2032C51DF4D131CB4F64556CAE494ABDB5D23
B5E86FDF153F818708EF6A5DD2766B508177219EAC151CB4A86D8A652CA6C2EC994F9F43AFDD
11ADF9DEF4D2EDB0BDA9D37B30C603692A4A83917B8E459C35E4A12A07B02EBEF81D74135492
C01AD1DD3E6C1C75BF8EBBBF42977E1DABAED256FBBC203167FAF0AAF0B988AF0E3A51ADFA07
ED9319E3A1A2CDC16E214D58637DA3AF5966BA1432AF434B105B859E9730691F8ED83CFA93DD
63B5CB6DCDEAA7CFB2753ADA56B00B81E4A67DFB6E85D9A34E39E16E256770908EA2A1811A47
05789EF7FEC36AABF8D31C81CFAD80243174D38155A74E1589F96CF98CE5C4AD93B37BEFF405
43CBA49B7570B53BBAB501BEA9AB4B0E73FD3B43A178C86F9A22154F01394F37B51075AD2918
B98780F1ED0D35A23960E0FC218F459C5AEE7939FA21AC6322EA0601CD675181BF71A594BC6A
CE34C39B349940BC1385BD7415470D3D6A26E979CE14892ECCBDD46A7322C7A565F2C50377CB
B18285BD9C0C8332B9475DEA0CEA0C536F2E5652C782E3B61D193C6F2FDB4E2CE4430207DD25
E9FA9F70B1F2686A2645F69E2A922F26C71A27E495C2AD75F431EFD181E9684BAF5D2F932C27
C0446857F7726CFD0634A25040FB68D30253328385D55F4FCADD8DE6CE829FDF9C18466A558D
91F08FFAEBD0A079AEF4ED7D612EBD3D52DB5175CF4979FEF08D7B953E9FCFF77ABB0F01923E
1D93187DEDDF3E3C64C1E1D74B6A1AA387805DE6F2D439F9B9F24B12F523A431E3F396ADF6C3
527F05A0CED7C26E24B02F2631F045943A05561D3DD5820B283A6767A7F0C700E0A161D31BBA
4AF0C1E759E8EF6998D749DB00433A47E326D24F9C14A51A8C97DF57BA7F14B9D7DB077C55A0
CA7DE47DED12FE7499FA50001E59110647A3D6ECBBBFF71951D04250DAD840F06618DECE5F9F
F994887F38E2C8903CE564E4CA673EE4090D181A4067CF8AD19C99BA50BA9D2F91A680041137
6E63467B711D946D1E2E8C11C6FF2F550F9784EA811934963F21B2973B7AD21D144976C12735
C36E101B1C5BDB6215D0B9C7CEFFF972000A88EA7FC667E57C5BA8C5870B827665CADE97205F
77AEB0E5C8837CC02CE6D53B54A745A91337C01347A773C73661C662B09F49F2DAD5369767F7
1868CD31173842CABC5E564380396B9795BA93E1FCC81155ADDF67DE3F91F14F816BCB9AA86D
80704A7EEF9017F3DF1A6F75D28F650F1EECA5138CEFA71693B9F0619521D52F2A7A8F944C36
30A355F61744326C0E3C078F7D98DB1B7C7175662A02E16F610A6D74E0BE0353127660E1D6E6
168C10BDD159B1DDA8A1BC36E62359042A68341EF759B50FA1FF0F54FB725FB182545612A7A7
FA832A565BD3F1AD07E3BEA2A753D4DF7B86883BC32B800DF704ADDDA479ED398476AB86CF52
DF8FC35E6245A3FBEDD5F862E68F50B2FD3DFB222B6EB00F9AA619AA540F7007CA572D739473
759E3C7E8876AD9540ED7DAFFC5A1689E5992DEFF3933907802F125BD6E83B3A82215E0BF888
B86A7B8A0886650A6F161F543A109A85BEA233DD5DB1E96CBE7B47D647C071C937014564541A
B8A4137D08D23359E1CC2E50A9F28EDB81276D86DD6C6CA3BA326895067FDF9742C14D6946CC
8341F523C11643243E0F96F5A0FF43CE5E6B249B6B2C85F66790060DFEF47011CCF62CDADBFE
A91A897509E9A65769724B4D146073C36DE9567658700238B4086776FED64600F9884251A71D
6527B5FD396AD3CC4E886C90ECD2ED022AE595EA82825EA7C476D2D08F6F63249A0E65FA1272
3FDE567E63136427B3F7448A61BEF9B1BF225AF1DC52142E58C6BC26430662D244AA65924AE7
5016F546758A9B95438EB498F078584B4F96195E9CCF75B2AA6F2B05E322908A3CDDAE0A8F75
97ACA3CD948B08549C92760B582B5A8B8D8D872250407C1E8C2E65DA0F2D6A353DDC2FBA3BBE
58A474E8CF2872F08FDBDA033EC044F0912A2DCE161ACB5F39040BC2CAFCE0ED9C8EE3FE377B
D9BEE169A6E36E6FF19F8FE0111BDBA6C963B6FE0A91D5B163AE1F00B7EB23DC61DA247ABA84
060580A01E3723B5CCA896E7E33858963EBE7D286FB1922F271FE6ACF831A0133621594107F7
7A556286536F0FFF6BD2983A840BB0C6418FF2FE40C8F790A4E1C0687CE62645A4D8665DF67A
B826B817FB54AC88DB9D5D037B6C4A110387DD4E055DEE4EF442906CDB90C6EA36CBA0CCBFCA
CE881DE00731E74B92389C2B74FC57ADD316909B36201E127B3CFBBA775F05FC154C320AE7A5
52F9883E55A7A072FAA010F2B1A45150C8C85504356AD02DA1D904D281163CC90424599E3D78
E4584447B8DEDC50B4EB8A6E71C20EC6E4C106A56071B5E575CFE45E3FB7148D953CA6FC6075
F14668B62E1B948F8B7E1FFB20FB64732FE12CE69C41D1F176ECE822BD583004B843B9D6E1DF
88C94C9C48CF3E6644C265086B4174FBD36FC1ED2BEA4BDB168DBA8E27EB5E2C18447E16D19C
CC9BF28124E95E5DFCC77A8B3B8B23A74EE61970B90BF2811B15F6AB9391210F3855D71A5D54
44DCA30D49CD8AE93E5A80283951E7C624F52A4CD5549D2B2921F65913332A097206C35F5C77
37EF02B60B949A3B70CF50CA1A013CAC8364D0B9A3BAF074F5C3E474B952A74384009AE47C2E
83140811E2BF16899C2E610CE432940A785765A7402F5D4BA7BE624215ED5B983664B136BC56
2FB8B71CA1BB53FD9E3E2B486AE5588AE45D59E07E1CB4A7FB75520F3B106FC2C59D37886814
8480E3E0A426605B1519C3B55225CA26EE523951910004B85553103FB13208260389DC5C3ADF
1AFFDFB82FBD90C41196D2360D083094FCF662D3F008217A15E3BD04DBD4642F98C2D18C8BA5
E3778C47ED61B9E17F8FE385AD15C81479B8183E78D2005E8D4E008137345A09B015F90C7E11
CE954330D674D50C095B4CC6B13C130815A3EC395DF4345F3506B8DC786D0AEC126EDC14E4FD
C07275B353E80AB6A004B406812BEDA9E07997AD04CA42FA6E96FF4BFEA5110E9EBAFB7FCFF2
CCEB205F3C86CA2A3D04E68599AEED1A750E2C4B622424F5831CE3DB50B811CE03F72C9417FD
3C0040A20679FFF40B6B7878D4987DCFF353078B50400C0C0597250315AD72849FD3176D89D8
1009FEF6BB780ADDC18692FD07C3EE4C4BBAF019498623518A8C8D8CF0F4B2D38AEC90F247C2
60B14CA1F713A8EA6AF46311AE61F40333A070D62EA97CC1AD27DAF6B2B6A3D3133FCA08ADD8
33A5E5D96156ED7F7B63DC9DB8C1604A37CC711364E249F86C2511A873A0FD1733825419F04B
3C763EB4BD35D85C23DB11A9C2F6EBFBC123C8ABB66F5524B5053D347417F72ED8B8E7D13D55
34734DBAE3EB89795718B64D82268DA711E62E7268885BB8AB0B5F8BCE440A6F568FD530AD4B
DBD14EFC44704CB6F7127A7D7552138C53027959E026D6272F3A49A5BF9BFA11FF10E7C0C27C
9C3AC61C444ED4E3C1FFEEA3F067AD7FA48586A41488DBA3B99B0D40D602EFF09F7F8BC91860
C5A4D791157A84EB490693F2E0578AF4FDD132C0D4421FDFED2805AE030F58CE96E10463E534
B12ACE4B370A25E2F1CBA4251FD05394540CA5BB2D938EA2805AC814340A6F7748D5B1D751EC
DA8D653471F5838B738EB916DE1B7E5DB030A04299EABC4A847B378FC4683AF06D20BEF95651
9E4FD83C2966D436B4D500D698EBD71506845F27B5AF028E4A0E7E0F96658BDCECD7C9B4AEF1
2F949083918B157CA4719B94E7DA94AEF659775F2CE6907B04697F94F27440BCBEC12EA75CB9
7DE3E9922BBE67994B924FCEE89D9B8B346BC841DEFF26DF7F11B2134D2CFE6428725E903B7C
3899AAEF93C9DAB0EEE73CA2064D3CAA150F0399AE258EED0B57A849BE1874A5AB5090342886
928622D9BD204F726F7C35C1780FD9743142BCD026E55C9B89DD155349A346B241A8A01CD8EE
9CAC977DFB7168051F1D656C9F951420660CA270A9D226FB94EDF1C11E40B1121A72E7AC169E
AC1EE2CE2F5C696A917EF0AE33DF6603738446111944BCF09447A4FDD161F82D0794B3129F46
7B0AFA2E2D57665FF02CA092F47CD3B265A6646E2A67D9B869ACC074949E5B3329C9DC3B1B24
D815BB27637ABFD3771E04A8972A94AA4F4086BF7F65792B16720DAEAC44CE2E77F50755C39B
BBC42CBB09183473275864A44EF4119D5101B9D0C098C15B4EFE645AEE2994BC619F57539856
61E65754C115F6B14743344F6917A2A348CD4EB9C4A62009E2CC446E2EE3525CCD6D0913FC2A
AAC3322B6333618889AA0205BE4A3DC1B9A47F7A624D10EC715DEF83224FD1D1B680AA7AD84E
B9E94FF1A92E5629A1D58E4921DB3D0ED997FD33E261446A7FB8CEEB002A2AD23FA4B4D5058D
2FD763E7124AFF65FA70E2F966090AA6C71FCA633C6D9AD8F078D34C85779114A22CD8D41B29
2BE38389B6F0DFDB4DE726A13FB588F28917BB26CB2657D0409DA795340AEF38237642147424
B90679815A1E6E9F8803808B386B54E5CF8444C253C5473209EF7FF1EE609D9C3ABDF84F77BB
985F50821F23659A8AD651A88717C63AC00005B39C19BC5F33B35759F5C50D1B2C65D56F7A2E
DD5BD8DB38A7CC83C6FB2F53CF380F72F2F75DC273E102466C88F53094334CE308DB22B9906C
B3C88E698399BE4FC1D6B67EA52230421C205DC171484EF5B68806346411601320D39E87981C
8EE5A8770060B07D4AE218C541B3D0EC72A9B7B709C8118DFFB1E0B4E85EC2F094AB06D4EAA7
29BE8362C10A070ABE3C944C23E454EF6A90A0016C341E6E3E3D8681D079565833B091FD883E
B608C37A67BEE65166EC89A1EA998E2B70EA8D8E8E5AE62C665A4815CD7F6B1EAEAE988E2101
69D15F4996AF26114AD8A1663A4E67A4317E3DC32BA33153582A5CE1B8FC6564A270AB738976
0F8C3F6A02A6AA2AB56E93147B32495C7151841ACBEEE9BAFD61A13B731DD105CC0349FB6879
6D75439C41CDDE324887F3AA4BFA442E71E24DB4B1E61B2F808BA90010C18A5DC921B72D4D19
5C32AA76992D19A45826F86CF12C5DF6DAAE52EAFCD94B40836603B7C5191D667741C39D4CF2
26ED5521521334B5B84BDB265A0AE8DC0CC6482183E42ED28F1513034988A43399D35A0EE33F
7480902A6F27C6E138DA036A32283D8AE1C4200A0999D250991EDC71EE962D19BE3D106851D1
EBC09E72A592227F93F59EAD9D318E87664600A98E3056F36089A488405CAB37D4313A7E35BD
18745DE299425D9EBBF06A2D3B813DCD7784DA05A86BE723234FB8FCDE431BC5272DB410BE4C
8A6CDA18D25763914374A1F0BE9CA81FBEB0864F0F5D729E2438C7DD713CD0E43351E372F937
3AAFF5379C8D0E3398642DF3F65DEFFF209DC505DD8D300D96657AA6D8D7F2CCA155E939176C
38CBE9D36EB79E5DA67A2D90084633D2A95820ADB195216A70A8AF91AFFA0B3DF7C7BB069102
5632DADAEFB2E9EB48F3D172F6211696506BCDDFFD9E756A0F302C2788670A2E6A76AFA10034
8F5CE43E7A2CC3907296DBEE00A95042816F3D427BB5E9AD77216D2FF4B3B18A7FB381B79BD7
DD95547FA4099767F4467A1C3E39500328989789AC9102EAF14D0BAF1EF7D2072E3D9EDF99D3
54C44204F5CCDB2BCAB00F131BCC49C12AB9B73553E596EE9D25DDE5BD8B2B76EF4AB4E58B03
A45F367E788F0DAA9F9B17B181AF5A5870BD5E2BF0DDDEB271B557475ABEF9ACFA4576509E31
FD83079BA780B3D291393C44D9C711CE3DB130686003E2CEDF29C64B62BFED6DD3B6D0094F4B
DDEB9B75D2266C148148B6B2DBEDDBBFA637F9ECF123E247CD2B5768098BE9D8E79281B9EFCC
7767DE271209A25CB1FA38F2891367F3EA7C3D51E04E5E38952B7E828F9E0B1EF16116FB119A
65E24463B8DF1301C5F562B63DCB996314E113B7E40F77F7F6EB0399432E8E8E559D9F0574F4
5C299AD9E3D15FC34C79A1D79CB5AD28BD619F7D95728712580C800632B64E99480A73D8F105
E1386AD6902C211F8801CBF24E2C2DA23E9A8A905D10709066BAA68CF3EB80701FB51559F8DA
12B5F107F3B94D8C68CEC13CA2C4D4BEF326B661F630922442997D48C5C5F3EBBBC93B98234D
2C949FA4AF61F8A7299572E00759349CCA8A314BA3A7E549C88885D7FC8F0EF98A9999497FC0
2DB51F8B9D556F099B2CB495C600CB6B1905140B6A4961BCC6726EDC969CD8572A4FB7C2A0DC
7032DEDDB21DB9026A36360F7B8DA554E767DBC2AE944BA1EED24D70C5D615908153F46D18ED
B877D747F03E54039E637FEB33BE228E72931CD967378AE267B5DC92F4E5FAEC411C16B13EA1
20FEDE85D271A4E6E27668E8CABE1D2880A0E448B3A3D39130FDEA93E684111FA1015323153A
407D1599B367D4D10E2D03A8B47F28E85C221621D0E8A4E171164B3578AD574B75C291126583
AAA9E285F51B6B4545324E22699887E1D37D418F3C7365C80B383A5B8DA540736E703E2ADF4E
3737C39E49D012A0BCFC43660BF03AE8647072ACEB341E6233395408F62E16EE3F01CD9291E2
0A0966DFAF065FB67FDEABFC66FF9AF42A2B36D4452D8CD7280AA801FCBC3F653C2919666699
BB0206C4EF6F8FAB82EB6D40C48871AC07E3D8A135FAC91D28CEE15A5FF87170FE4A513AA619
CE65945AE1CF951EBA47FF6B8C41D63B4B9F0F2352B11F3A65A7E689763029C6A91F2D6B5F18
77365DD7F86A6E538F78AFEB04AB074B203C47E87FBDD2BFDA7A83B4E6FC1628F20DB99330C6
34F6F65776B4484CCD59BCE04311CF52E0C24E5DF4D546FFC11B5FE2006D1A0D1073C55B34DA
5C81ED3A5380D4E39DDB3D9583E3C7686A50DD234E2E44D7E02411ADE6850F373516DF472C05
352EA201B3DF08241FCC92DC395DC8F998A8652FD8FA2B11F103017DD01504D2BCFDCC360439
BD832D5CDC3313EB780CA07C13F41A4E599C747A3CBACBF4A25BCF10817C9570BFAC3B437F15
F2E6DDD9958BAFE542B984AB52DDAC9B219C0A10B339F96B2C11CF6D05321F77FFE6E572381E
D81E5831DB8CFDF902FB5ACA0CC7CB23624EB37E16C2CF8BFB7B6923D1D4B97C55225F8DA2C3
495F6C971C51CC7CF66E82A8E03BAB8C79B35180666EB64B0FB56E527A148C72144F44095927
C572FA906DED1BDA246464461F9A373862217F4D0F3FBED40F614348198A2B60C50BD99BB9A2
1C8E8B3A48A8CE4E182D7244E145A0E5653DE82BE2469CA6706C7F9CF15FE361D15321F0CFDA
D06A0FC2ACFFADF0A7586177AC9A4314784DC68F9D26E65750DA0137C26659013C601158F4D7
DFB59FB9534FEC5C4DC5B3CE9BE866195E42062F5617D0496AD0836478C81BD523EA3C81865C
0C942441D51742CDE92B080B80F6F21A79659D9D14C2DC91FACE45DA84C8CEB673384EE8F0AB
4A3166F740E44DC24E36D871C6833E1E9F217C802B6FB7B9D010A5242F36E941CF6CD153BAC2
EC68772B68B50424E9BCEF95696443031402C3B39D16D38C5273B76396C99FF86D07C3AF5AE1
3FDC4B136F614F4D49E86A0BB3085CD760208A513E94E532A97E1BF43A105947054C2332370C
B191C7B3623C51DE746341988C6A8CEDF4126B4E93806E5BD982021DD6785309B4D62135C9B6
75D0BEB8EEBC2CD87B53BB370202D24541EFE9C47E5246A07A06DD6D77DE7B79AA8422437E8B
1985BA90F8942F023A69A259F1390B9F4DD777A42BB089CB395FE6BA32012AE45D3C61A8F587
1BF1E02C91C149EB637F30187ECB817651622D25C5E1EED33A5503FD3870178A379DA19DFCCB
E076AE9E2F2AEF86133F27206B0C2A74A88ECD70FFB93A81A4B566C41BDF16D25D79B0560691
B761FE3254E927A013122C6D78DF7310D01CD1314D06E584ABC9856992BB6DA11B6F9905EA2D
E32584E9CC2101B505D47225380DB6C9DFC6BE379DB8CAE85E3C54F534650FAE23504B8B3BDE
7C5FB2ED9D73BF7A2EF944E678649AAAD02C286020F69F92D3FACCD3C301CE19E89CA83825EF
8D59B4E3FA90AFCC29EB89E1554FE29B5A6BD44A99E715DD6BB6167668E2B2056C5D3353AEB9
E492FB18408BC2D170CC3F7A334B178A452C0D08B03A114275D2327372F34E71DE15AB648F3B
F17ADA15080AD7F89016CC3E4647DA49EDAE5B469B5858A18E5562E09ED362B6B041904CBF46
B5225D23302A63DD45E77DC31AF5FF3B2790B31B68D1401A7729C5EE46637B3BBBFA25B3E162
20E1227143A9D1CE8B80D5A7DA13B16A47F0B128EE5AE364EB0ED86E8A5817F420CFCCBC29DF
B06B52B06E4B6DB0A8F8A1BD57C69D692084AF58B5B313DF18C3F6992BFAD429476DD39DC229
ADF1B01E9980A5B645C9E18BA8F2C3B279DE1926832B672B856975532BBD7E8E703E4A6ECCF7
E713D9690C2F640FD874E501932A8F17DCE4A43F4A48A32CDE47DA21B4FC3325ED055FC843AC
18FBF090BA8DA4C95426D4127748FA0A273CCA95D7A139019F687663ADA376FC0CF88A925808
8F51A7CBA595F12E224D4C25820F71B148658A2FD0352520E5226049547E12DD1B69DC6723D6
AF0ADF7D9B0A0F02C1AB1C9123835CDDA02357C6657D03A49675233F0416073307088DBA1B5A
39FF1CD159842DD72C32A7AAD57124F681589E1E6112D093A3939238F2E1EDCEFFA982F27A1B
44C8353BE638F1C26B37647C7ED705A550C40C895150BD5C6637D177D49159684B95F1762369
83306618C40AB6D44FC4B2273F39959DD89A40197B06F48AC24178E193A12AEEAE34038226EF
548577A06B6C42E4F68EC22022CC2D117E12DEF1A22D45E27A3B1A3F2E9832F9B7A2E834B60B
F67E75E16928634CF7A1E286F14D5572A73A42A724EF60E6A15F1A45BB5F4658390E848DC246
8CCB412374D57C5C2BEDCE7D5B2468FBD36F04D94A194ACE7617D39EE4DE6EF8000423EC3BC5
98AB525DF7C69EE6E4D84D0E273C6A37171F4822E6E58BA1327FD3BDEC5A07D4EBB3210A93A1
E6A715BAFD21048D647250C57427327F6AAA9EC94EF4C02D0B4543D732E2214DB4C1789C5719
BF15DAD0AC396B6E44C3D300505D41D065FFA3097186E8F0432DDF5354D9770E19BFC00B5EC8
2707FCC078CEDC790BE1CEF954C14A9F4E8D4D9A1417FE80C8CDF1608D23592512CC9A79901A
901224F6AB4EE9EF216EBEBC24A5164C347E4A7A05CD4D3E6C08B397A72645B488B769B1E71D
8F90649B909E3A46F957BBE7AA9ECA11D3E06D4BD8E74A3BA41A4C566A62294DE42712B39DB6
F797EBA50E081EDC35185218C1C832B4FA8CB9D272E36387645DDAC6D27945DD043FEC164F9E
6F3DEBBD4F1D0FF3081F014D9F794D764D128485D390CA7056BDF663E422F59957894D20C8A7
11E852619A5832BD6BE579EFD04BA8082E5D5355A013DE21FB4BF4D606EA7D8FB779D6B939B4
CD156230ED0228FD8653F267E32521C1F7AB7107F1DCFF600A8922D2BD4E32D753FD6125DA54
692D11D8724DDB81A6F34434B48EA578982D5F57A623492712C805D86C8FCD73FF3553294D5D
1CE3694A758A4FC82FC021B2EBDCC1694E1A928353588491BEFF1F12D9A3420C343D6C9D552D
C54B091D2CC6F489D7ABC6F2A7DE424D487F02B75581656F566EB20F3CF29D87E5935CC87C27
CA01A2C7D70D7FCC2F4A776EB82B0C0CCADB597E6468319EDF9287983946996CEBCCFD0760F2
B549F351057110BC4728EAC80A8E95C8BAAE02F665D2950B7F866F9878E681A808E58D5B0186
AC743794FE0592545F4B4DCF56C8965080AF09DCF7CCA3B7C0219E5AB4961C7A227FF21613F0
77AF51259E4D4CAA6E1DA10FFA4DEB51C6F32B94815FBC6A4342BF4841FC820C809CF96BD27F
2AE86E00A89E27D10C004FAB2862265E3396B4429898C0E1BC65D15AB2B54F3D9C4BFC5B58FB
90B3505C16E24E52FC20635D20BEC6642FA529EB0FC402E0F451AEEBEA625126F3AB06615344
713E29DADAFD91987B3EDA376628DEDCF2E167BB514DED28BA3FC975F846E695EC3DAB298A47
E00BF9D8FD5B2308CE6072CB3CA2A7E419A19EC9A8CA1F51894C02A496B3350FB82C808A00E9
30E454D49B605C085C8CBFDD7E6FE84D7F2531EA89ECC6DE9DF07015974E274C65DDDE3F43B6
246FC5028777A056FDCDD2BD18C7C5C6C9678305C084800CC7B27EB5E810751B2E6460A6AD4D
7D02F855BF636709D0E4A0CF9B17522A21E5B11F347DB43DE175FEDE90BCAF00F64BE6B66F14
E35D8A3AFF78DA9E7FDF389BCDD925499AAA60C0D5F3124AD520CFF5BD62CBCE2200017F587D
740A1304D3E845AEDADF89AF84AA077267A4E9931F28981F9535CFD5C9CEEA99F47B632BD74E
C3D2A7AC2B3C4F8063C5BDD3E8F9E4E4063D909D15DAC2C77DEB976A26D282B2164D18B8537B
C2D7B8C3E6249942D951CBF9FDF19ED8698A63CCE2A4DC09F2024C5D4803F16161E4025B34E7
DE07F9E2DA623F21696D6E178DAD7F774FE883D4D9A0F65602DB361F98F97BE57B2B39C9ED07
A05F97FF034B1EDCADB27EC18E2BFADE0CE20E324CFB56A1F2DE75770C06AFC82B433528FBD5
FE6EA3AF6FA27B516933BF173955A86A320913DE0F6F503827AD79D2343CC18D03B728C9F85D
8B99F9EA2E30C8E308A063D6112BD59290DAEDD35C3F52458C562B61AF520C6BF4E7CD0B638B
9F18897EE0B079CF5022E248C8B4A93B1CD49BD65A027D57AEE830D82A066089A8759746C920
B2B5E8EAEB4343B2F900BD8804D3E463FE3E45383F83B03300C236BA388BFB2A30FCF4FE477E
700D11788D702359CC53BDE2A3F33AB9EBBFEF785DE43AFCAE38D33B0156077CD385A1736DCC
AF56640152A5010D2567D1631755D701DED76A7F464B4ED39231AE091F7412898AA5FFCB1DB1
73C0C041F0125502090EC9D95E6C8286750F1C218BED26217B34C1ACFF8D53578DE104A6C432
7BD69875E2B913C6ABCDD2FD15F5C0F79F2203CFA95518B764ADBBF319361D93974E41317AF8
D66D50C5C906B600157FAAF99BD1CC72E5DC290C6CEECE23B70204BDE7A6476A2EBC29A43658
3469EACB167C30F7755693131E4106B4587C048ABDF83BDA29B5147A2B2AC963953DED5F8BFE
382B210E4F1AA75BAFA54B7C0CCCA2F757C7D4BB7EB82049F6A373725041AD87FDDE437F7568
3B24D7C7E83CC4DEE124C43B32863B3C63B60A47A79785824508380550F49DF8B68464BB8EAE
E23C0AA0911FCD9708A2158593B3D309CEFE72041A8B5932FC286B1AB87FAE541A8C021B306D
D3D5A4C24CC5A964279010F52CB2E159514BB86467D45E88ADE94AE32BC863FC31809212BA2B
FABDD2EB241B454E875EACAF83A3A236ABA8A5C76B0F25FF7EC67C2FF8D356F76729D740DB4E
452759067C1EA22CFCD1734BD7A6BCA67138875796D7240D4C517268F511478F961BFC861397
677261A87C142B1D09B7A67CA9B20DF6DDC817834CDC989CB43217AF3A3B2558293F4C00176A
4A110C4464B6AD520E08C2FC5883BBE3B91DFC5A312205E2254F2B596680B0220CF71F715C9A
6DD98D4B69D748B23589F7ACE41DB514DB186585B32C9927502590AC499721E6FB41A11F6842
46F55C364D1EEE28603B7969CB3718E6A43756F4881C816A73D3AB5D941401C734313BAAF956
9A89A1BE8DBDA42C80AB8B69509CA6642948A49DDC02BBF41609EE91469100B35A705F032588
AFB61B7F0908D57C855F79A99C694D8758BB022E2CB243F2D37939D549256E3881C81C696BFF
31049D71B15D57CAB7DB62CFD3F924D892628D30A7269F454173B65C6E624444BA0258C46AFF
7D4DEACEFF61A65A3E76869329A2DB52821D642C2CD17654852B31430C285A148C9C13BB2074
5C31091F081F97EE1E5D9BE0DD6E5CE11C1AF541BC7FACD21557BF1A0D716EE22820E45915D6
CA98017C7C118D2C44318886A042C878AA6BBEF87CCDA30F4A22FE7692A2FBB94BAC40A0901B
02D476855EDDF09017DECFD3AA6F15E88C512282ADD2DD1CD21F0B308526D3CD24572BA500A2
20673ABA296CCF8A73CE7778170F9AAC9A988AD6654215888A2CF929E9F0C788053F824D7EB6
4AC0EB8A8FB77C7F8813609235578CF81D0E44972015E2CD249A8B173B2085B2BADEFC52BC06
59E72F76D393FE2FF271263767A71E43DE0EACF143132A6E16F076D4EF0372266407569C3BCB
448E01885E90FC562B903C9B3F4E3EDA9A10292628DD90361D6E260992E22121120881EA2FC5
3D16A6947D9AA582567001910C9019348D3DC92E5AFED308E7219DF4F6870E360036947E98CC
81633EC1253A2C08C58713B17F7AF58FC21C7BFCDAF7C603091D638E36A35E02985B62C869B4
0A0D48E7EA666D50F2ED245E9C917159FB7D5690A84FBC376192094A0DBCC7AA7E275D67140C
16CC12C7A0F7A3991942CC0934C55F73482EA940FB77BF3638175EEEC7E0C5BCAA85CB966B1B
27A6E4F41AA194E3BAA2429227DB093617AC18207433811585144BB91DF29BEBF564F30001D5
6B6BF8BBA894357AD7FB92FC402AFEEB58ABD2C8D3D55026E425423B07C35EBAD9A3335AC8E0
C4C21A2BB9B1494A567EB5BD5C4CF0A320F6880964D8EEB164C21412372446EE7C4FE288170C
ADAE0645509E8354E9D8E11A2DAC1917E9D22CFB3F8554B6AFD00766FC93C97C92099FFFBB02
A1728E44EEB756AC71F71BAB753040AD624465703440BB2FB8164B9A66B7BBD7087DCDF31221
C7559BAD09ED12395649CC78B2DB97E23C96FB3DEE1245A0A7C9440176ED5CF2A9DF45074075
7EBAE0DF23598373C8FDE9964ADB2C72A1FF5DCEEDA2623539C9F60837DA6D5BB6CB0B5D2BC2
4CFA6E77EBAD46DECA539B1761F9A89ED2E0A2D3F3D92FC8D6A4FB4297DADDBE6B2A466463C5
F3DDAEF789F1B362327BC0494AE7680BC3890398E433D00BADB61B460EBDD35184A15A074F0E
FA9D440E7A4B1498766322653300EB9BAE3819288461ED06C676DE7CB1ADC7FC86A1D6ECF8CE
F2BF8FDDFADD27F88B17869E8436473ABB44938B375412BAD602672F320724A695382FDCA77C
DF0D68AA6F682A74AA824B09138054F203C65BBA0493224FC452298F316E3D7298511397D813
C540AEA141F532055473F721F2696148E110CAFB5900471DBCCED34A569DC3C3D38CBA61B2BA
D0E43526E9E003A585F2BA5E1142C7A6DA76BF86F7945878EBEEEAE799E3F0EF8330ECA61856
236856C870B2657FDBFE573BE7C0D07E326E0C027E18432FC9564C5B1C100219DF0E19AD1843
EF5033244F25C7D959890B1950D9711C705DA8034438D719A2C2BB033B2F85FF25C51451A002
BA514D460FDB4AF404A4A1E7D4ECEBAF666F0EBDA7814419ACD76B26862A0C5C9F58C7206363
C2D66EA809EE59E83DE69C6ABB6694ABA49E7814911817DA0D0A3EF6DF1A67D716B8723799C2
089101B5EDF38723386F524E4AF6AF3D70EC98F06EF95F5820D46068305F0390E60D2BBCB9AE
4D642E7CD064086D183756E5C38310CA8C874654F5721C65B20402C02EDF59CC2149D6F4C086
05DA2BA6DEA3B60F32108AE4AF98BC0A1272F1306767691C145F29B14B4AA67582A245276137
6514CE182661CD7E3DC1FFD5656A5373BE74086546030A42532CD18EE23F01DCEBBC33EC39EE
059A8FA3072CAE0DC97361BE4CD8BDB5DEFF6611AAEBB31EBA176BEB2111791F741BB43A2531
FF6492DFA5D987A82B8A5DB66D069C64A49F4499066BCDDB2ADEF701CF14EB3C695AD187FC8D
37E11ECE364B08EA66FB64A96678D86054C2868A5792AE3F1B13526000D7B59451497F795B81
14D25252EF6DA37A4436A358C8D1647586C61154BFDAE2C5EFBDF320B8C6974190384B5C58C6
27F39194A07B96B3FF181058A150C2B174BDB77428E81C83280EFBF3931C262875A9A13FB025
41B4CB463D5DED7383F95F409660A55541ED6FD2C8C22FB53A9ACF1ED9AC73FF5FB9FEAB77B6
40C7537EC8A9D8E611ED7B56AA257918EF503C9B70CE423C0AAC62C4E73A9BCDC0BFB8C3A80000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmmi10.pfb 0 0
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
 /FullName (CMMI10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
 /ascent 750 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /alpha put
dup 12 /beta put
dup 13 /gamma put
dup 14 /delta put
dup 15 /epsilon1 put
dup 16 /zeta put
dup 17 /eta put
dup 18 /theta put
dup 19 /iota put
dup 20 /kappa put
dup 21 /lambda put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 25 /pi put
dup 26 /rho put
dup 27 /sigma put
dup 28 /tau put
dup 29 /upsilon put
dup 30 /phi put
dup 31 /chi put
dup 32 /psi put
dup 33 /omega put
dup 34 /epsilon put
dup 35 /theta1 put
dup 36 /pi1 put
dup 37 /rho1 put
dup 38 /sigma1 put
dup 39 /phi1 put
dup 40 /arrowlefttophalf put
dup 41 /arrowleftbothalf put
dup 42 /arrowrighttophalf put
dup 43 /arrowrightbothalf put
dup 44 /arrowhookleft put
dup 45 /arrowhookright put
dup 46 /triangleright put
dup 47 /triangleleft put
dup 48 /zerooldstyle put
dup 49 /oneoldstyle put
dup 50 /twooldstyle put
dup 51 /threeoldstyle put
dup 52 /fouroldstyle put
dup 53 /fiveoldstyle put
dup 54 /sixoldstyle put
dup 55 /sevenoldstyle put
dup 56 /eightoldstyle put
dup 57 /nineoldstyle put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /flat put
dup 92 /natural put
dup 93 /sharp put
dup 94 /slurbelow put
dup 95 /slurabove put
dup 96 /lscript put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /dotlessi put
dup 124 /dotlessj put
dup 125 /weierstrass put
dup 126 /vector put
dup 127 /tie put
dup 128 /psi put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 173 /Omega put
dup 174 /alpha put
dup 175 /beta put
dup 176 /gamma put
dup 177 /delta put
dup 178 /epsilon1 put
dup 179 /zeta put
dup 180 /eta put
dup 181 /theta put
dup 182 /iota put
dup 183 /kappa put
dup 184 /lambda put
dup 185 /mu put
dup 186 /nu put
dup 187 /xi put
dup 188 /pi put
dup 189 /rho put
dup 190 /sigma put
dup 191 /tau put
dup 192 /upsilon put
dup 193 /phi put
dup 194 /chi put
dup 195 /psi put
dup 196 /tie put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C545D25FE19253
9D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB47934F62D1F46E8671F6290D6
FFF601D4937BF71C22D60FB800A15796421E3AA772C500501D8B10C0093F6467C553250F7C27
B2C3D893772614A846374A85BC4EBEC0B0A89C4C161C3956ECE25274B962C854E535F418279F
E26D8F83E38C5C89974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F024
867411453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC21EF6CC52
7FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C7B0BD3BED7C6D8F3D9D5
2D0F181CD4D164E75851D04F64309D810A0DEA1E257B0D7633CEFE93FEF9D2FB7901453A46F8
ACA007358D904E0189AE7B7221545085EDD3D5A3CEACD6023861F13C8A345A68115425E94B8F
DCCEC1255454EC3E7A37404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF
07BCD13378CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFFA1B6
F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E4062C6809231B8C670BAE
3702AE125F9780A706EDBEBD58ED7CE6464ADDBA1E380573B133BEFB3892A0420054E30C3761
851A1AE79D6C4E175B392AC53B76DAB7CA35ED409DB30CA2510DFCF1D58B730E450B533F06DC
31539DF79A10B87E47E04EC6B1CF1C46F7551A63E736E27AE222C4DBD3BFEC3CD512CB1DE002
A8D5E6B3A1D19FCBAFAA88DBEA497988BBD3DB60A671B3221302F55FDC4D3693F72228229743
E0C9E77C581B6818198778A4DC377D53EEE0EE329A4D807AA4F213B5EE8043DB9D0C8CB27071
4A7DE096545CE5C2C4766C89474D325582A907724C6206E1D1579CCCCCD755F449B08DA43DBA
7177D082719CA3D363C3059F1A90DBCB7EB0DA4B461748D39E5E7A4632E5CE964EF7D23A1117
DADC7E3B5C789E25E10AFD91B35EBDC85BAA97FE66678DFE3007AF95F2736E54BF3178B22CCE
1F0A4095D39D7070F140962D45CC6170E79B4FDE215510A0226EFE75F24B596436BD4F1B4507
31CDEAC504B7954D851E16ED1C28C1DED3E96000E2718CBEB3476D300F67CE3E9AF3A0A62703
A2C917F7CEEF7E12914F417DFBEB3FB510BD935973B1FC224CAEECC104578C61AB475A21E0F0
E3842AE875B0D501BC007DFCCE09C1683FBDFE6CDD2D18BCDEE417FEC839407443F7AFBDF059
E22A2428352962F28E12994D31EF011D44676A64D47E385173298186484D446049BE5DF92095
47EC7114D10CFEF53DD2078C0528D2DDEA99DB803424845BB971B9072EB7C4B4C21C3F10943A
91BAE4092082F9A824B03FC6BE7149ABFCBE4A60C300EDFEFDB3034969096DB3A9EBEE77FA38
FDD982BD0FE8635DE5CB9E7A0C5D1A77DCB92F24E081C131089562062C32DAC108E364713674
438733DFA1204BE8721AF055176D8F66E7C426F9EABB581D693B531844266C3AF03D29B78557
F7544059E3E71141DBB5F756D22740AABFFAEBC65CA518C40CB0D494E33F2FA7A7343BE3F8C2
3D43F76D4B5C75F93A4B49EC06A933F2168A3BE687031AD896523CAD3B0BA2091A168F9A09FB
DEE232032C6ED2F6D167E31E62B4B2258A4DAF9B61A9EEAB1A944F1E6E6FCE1B06E6F6C5EC7E
947D99BE91592ED1D6428C63D72575E5B0DB0D83C5D68AA7D48863932FB46219412214BF4E50
7408EC6C1756BBE41DFA293436589F032821455BBB852F79B8B5CECB32532EB9F66260E4B6B4
51BB41B911E70E58A958E7A564BC69361126F8C3E61C36D2E216E9C0581CD176CBA03C66EFD3
AC62DD2A9E01244F91F7FA061E909B6241BD53651244BAA2A1784BE07B059FC49AE148A7FA58
41C5248390B3ABB8255B8292EAC87598B6FC55D24136F9DA482552BD8F2C53457568DD1F323D
0211EFE93156AD021E8622F792F21E65862DDBA5EDBC94A56E426565D47FB9586748A311DB55
816F2EEA29ED07253B440CD6092D7339850F32F9DD1D0E218348A4AE2A73C518393F19FAA57D
BFC9B8F879939557A744005878384A0E87BAAB534E5B3FCEFB11CF19C865E97DDFA3FD3B826C
32936EFED8C95D58260E95ED42FB787B1A98351DC786028D978CEB9972E88B9E13B711DAA277
796188D20E9C7296D35ACBCD4D1CD7D19C3BB3B5D572F1CAF8A5D6662B4B8664878A86E3B051
ABB6AA9D07C292C3EB738CEF804B227CAC1E63753CF8F1F715EB9CA50981A56B9B87918D60FF
03BCCBBCD56B48F542C98365D76067F6A9A4A5BA39BF317A88BA20EDCD4844F4649218E7EB03
1F545933E2696674179A7E0475C42DFCFC52696ABF07E5A6F0267EF858BF733B13C78E49FF57
1E61344FD7EF13B48F29C08AF31EFCED0A89C9D9BF270947EE262B3B3CC5CA827D7349E62620
7F7A277AE4E48E0D364AAF82CC718868F12B9437754993FE918937D152B509F0F7CB714941B8
56F71EDAE36137F8A29693BCBFCD9D4229E4EA87B04ED14382B8C671E518249CB4027571DA99
0334A3F83F5F57A015D0FC72E7158C548CBCFF50664B0F8E0D141FAE922C989779D4B82252E8
69AC9B34F5C2AC136CB86EFC19C7555AAC09422FE7EFA15CA7138918F809ECE45E33AF72B9D1
853CA35C187AC67623AF11DD21EF46B8336A38FE7B38601E40EA0DCA314BBE1E98FF6991E9C8
A1B44D5EF00D5BEAB8E2E79540FD52ADBA0994BC9C63DC3F010E10D4B4838E4197885A7C01FF
661976F03186BBA8ED2A3E0C2082A53A60CC6147B17B6D88C4ECB0BAC71FA26A727E50918CC7
A17A5D617499B3ADEF13E131B7DA17C25A12F6C7C135CB71E89F9221AD2BC92AAA14F2E6D8F0
60763F5CF5FEF92FE4B5071D34AEA90F73B68FDA8BEE03C2FD6755A297664BD74DD9FFA4ED90
ADCCD20DB68C868789C27C9AD6D1D08E1D26C5CEDC1853C358666B979C95C0DB0F92DB44AF8A
1F8146C500BEA331B2A79CA6B90BF57CE7F9B975FA42559A918E1B27E595D92D588896464A8F
6A119AA6B88A69454B0ECCC10C2A2454C48553FEF9E5F73DB77277AA39D2D21723DAA7234185
D3985B0DF9E4295055D6EC44487DE4D9770BB51D4039D957A97D60E7FBB03F185DA2D9829970
BDF0AC31C0A5E4037DA595C67FF45174E94BA58AD7972667ADD43A80ED37CB809AB4F89AEDCF
2F4A95599956E49FDC6587024E4DFCCD30F46B4DC205101E026BBEFCF4C2F30B2A05DAD35549
0EB296F8BDBB84D6B2F035199D1325E1E54498DD98D16E6340486D2A57F70DFFCC9BB3E8E416
FF1DEBC2098025B985206EB0A5BA79B9E73ABEB0362EBBA8323F1DA75B3047868CA6C6412A38
78DB9F52FAF52219F63D505DC87852E45AFBDF441B0D8E47716D800369F86C4C90338CAF2981
C77CB506B690D22751C87D0352A021FC0767FE3AF39D42A57A3A3357E46A36B9A318D0C8A0A4
7C1C3FC8868545D5B2CD42EA573619AF5AD385F3917756B82F60B16E7A33913D9144B2FCA93E
9C75ACCB70DC55DABB5B1E84F0BA757954593BD61A53F41864659D9F1BC293417B4D605F2F67
D24CBB745CEBB7919E9BE1D93E9461181A3888A271E7E094FA64459385FDAE96D342ED2E593A
EF5B0F5A2D01686B696461091A16DEB9FCAB20F2632732B52637E81E598BF7C8F17970B6E3BB
3822F2EDF69EA1746819413066EB2ED7B43F1D450799EA12EC58DED38B5143A90896D806E37E
F1373011E180D06231829F6C2E8433E9F56D7A61A96C55463EC5E6EC36695BECF3E7A3A4DFB0
63C30986A5C0D1103F31803D4457AB0D72C44B1BA2D1F0FC740D98AF3E9EC01F84FDD6EAF479
48236D988B400D94DFE926EC2EC38AD6DA2F374441620990DAC5593CD34E154C3FF004E9536D
6B9B8B41CCD0C9AAF237299B91524E39F867DA0C0CD33B05646A10B13CE1DB4D9D82FE29D528
8E761F55347DCD040928D34560C87C7A93ECF8A1D31086A33D2BF9F9E4CD06B11F0F197E8EC2
132AC23976CB80FEEE0D68A30434C276E4AE9D46468397934F8856EC2E482B2381AF05C58AF2
ACDFE0D758DBAC363F1817030BBD26FDF5819633C9827E27B1DDB43A56DA5001D17B59A6B218
D2CE2F47C5308235C60EA08B24736176207EB3944C0C2B0A2F5DB51EB2DD1EA27E545A4DE795
E16061FB48496472787E4D06DB2927700CFD5C2BE68FDF12038F06FE86474186F647AF4ED1BC
1C8B446C5A9CF538A9813EC2142A9781A88D524F8B03B26D2B3C5F66BE569717CBCCAA602876
7D5D7A4BF00CC49827A766E67C6E98542A06B479D831754AE7A895F6CE275F3F03E8F09A5BAF
9403B9030651336D8F4B3F8D0DC2EE50CE8593D2A365652360033ACE6D449BCA26BFE2908344
BB6D46AE7EA36AA4256E0DB5E5EE1EE666C302F00C782D02C2A251B9AAE9DF91EE1E58BC17A6
6AEEC65A75A8BD1277B3B3247F57A9AF643ACCC2AB63462E3035B2E14482B625A69934744B0A
A98113F919125346C854C73F7E24123E70FBF97BAB700B8146DD010F4470B08E4F95B61675AC
033198B0871766002B6688B17BBD2C010A44CA430D763C3B4E7F005B7BC21A8F91072FB3CDFB
B83F5B92614683730F26AABA94398A506BE38A2A6393FB78C46B12E2665BFB3C543EE45EBD37
AAF6DD641BBF996869ABE0983549A76B1BB226DDDD7BEF928E06EB9C1B185BC3CB9BAC42B9E1
63DC13193F824CCC82A16907AAE7352799F2510746FE287BCE1097AFAC2C5CB2E163637E5626
75F81AE43647FB2FAF61F0572734D41258E0F290D2F16E653FA7451991CA7149CE3911A0D943
761EDF2F1045F274BCE511C8F6BA6AC76EC5C36CC7D18E6D1FB151ADB459D5D18715F9DE964B
4FF2E7529000A29DDD0A80081D3E66919A2CD2D2246DA276E42465CA9FF24BA1112896BC8B84
2424E8743153B0B972BD829AAA296AC452ABA0300BA89EF0745CE65102BD2B5C74CBB0963D83
E1EF4B3C2A58D8055E696DAD94861DAE50234D6565CFB7AD2947727D76482DCD5AAA516088FC
A6AE15D1CAD26B869FE82AFD428D0A077C2C490D260A75BA834B7433A3A698FEF7CB1DCD2723
2D341939409FDD8FEECC663918FEC5CB68E7481B9C97A90CD7074B2E972D87CFEE0F3C2BC0C7
44E1F720D7F33B88B2DF064E121074F338AE0C57AD3731855519BDABC623AB061D027DAB1B8D
5DE267ADC44E93A675680CC40A3D1CE638F5C565AC3485F048BCF9D485EF2D72D29A0CFC31B1
9171307AC6901B2E2F275F6907E2B9DCFC471133A613F62ED32DCE4A146ECE788EC534D5C084
4A08C1BFC8CDE3229DEBB8C4125B0D10A1440FA313B0377074A0D890EBA590CC2207C3D5F825
CD0C846A1B47E885EAE2ECBC583798754A64702BBC3C032D4A489FD986CB7FA37CC4B633C8C8
4CCE56EE6A9C53D334E18DB204E43F2D084B0AA0435E1E5009957AA0487C7B654008F1B83B7B
C5EE4290986F106279A994116F2BC3B36ECAB14E1E5A6F57383983E0D48520AB39E999D248DA
7D1D376C28BCE9B74DB2D38E6FC89D217F948971526087C02D1B4421D2B81204C1A210F9DAD5
65EA8DB2A23BA3DAE525331DF23748802AEAAEB7C457C9595580E1F903D6C4718FB1843D9C92
80FB1750EEDF4DF8D18E168ACC025AAEF11E7D57D03D3DDB7B001B7A6DEDAA0E443075C99526
BCEDA1F1EED6717BB775A141B925A27D61EE376441206E18B23B8EC62D755A250EE1520CC279
A6F67A3587F4A43439C194BDF6D9D95730CB744F847EECB180A241D1B3DA379EDAD4C43B7838
5FE83136F4091AC9313E40F3E39A3EF1C5CD95CFBC350369E6F5435BC36EC337E8ADC69C2BA1
EDEE45B6E858B76A10FA145B9F029FE3DBC669A5F91ACE7ED62FE70AFD4EB2CD683E50B5BD7B
2EEA06D1A2F2EA3F2509CF8C5E19219405AD7FFFAE0B22F738C4844D89EE709021E9F6BD78AF
46FC120C37AFC3F29A315F801D6B2E354448D5EECCEFF62C43A016FD810052104CF9B0193885
BFB7308110B285F95599B5CB732C856C70E665860E1F88EAF111B2E3145E5C9BBAF4C53D789F
7DCE86D8700B1F741D342C6E8C17E89B3432EB47CF263D11486AE3F3EEA479CD6DA86D1ED0D1
403E5139C0CDECC5889DB49B24EF64E06F9619522358375FD54AEEF7984A7B4998058D23B065
BECE937C9638B9380C4AB40BDCE27E0F09D160121DE52C7A7FD8F9DBF47D78A3F89FA2778FA8
65CA61CE2E64A420E60E1AB30633E632992EC7CE37AEE15456446664AE34DC0DA2BF08AFBF6F
6BE4DACE7067BD1EF1B45646F99E34754A4C434DE88507755207C31BFEB8CD8DEDA6EA06A719
22A38FCC7D33E6EBD78B970FC94528A8DB5D12D2B8222CD5AE9703D256E8D75945AA5B7E87F8
07981E551C767DA543AFB0F87CC4D9D35DD3D790AF115E9688732FA2513ABD5E001F237565A9
078B782198971F8599C23BBAB1C8ADC098688B59619C07DCB2137ADAC3A0F83AF46E7B9E420C
70D92E5588985D94DD7D1DD46361DA4FE7B3CBC1F887112F1ED0D5BFABB41C088B40CBB45D2C
1D0A6114C2D613A91BA2F1CEEA5F0FAAD1D4C32AE8D0AEEFE4E3EC36935C209DB4F8AE49E279
18924F4E9BA0C813519B7E0A8C71C3910BB0970E7E3980BCCD990245C28F7676A77934A03D60
C634A478BFB1C7FC811E65C5770E74ECC042F51183A8A570B986F27D5DEBDE77137BE74BF14F
3B92C30A9C1B1831875F795A0C141E0833DCE32A2F396DAFB4A3ABBF023E5795BE3417AAA442
0E1075E8EED1489A8AFF4FD51A54B517E737B7734C4ECE1721DE9D7DA8106BC326C8B28F6D1E
C46B903F4CA044F663C03562132A08AB8CB50ED917470EAE0F6565BD507B02EC06FECB8F53DC
B01651EB79EE4640E8E1985C2ECE04D3CAE9616753555F1E34E75EF364FA93711DB9087C713B
6A69CCED8A5185F54D3299F9531BF7EAC47BA0C27ADBBF90A4955C986C38FF8EDAF559CE3095
BF7A695AD178472BC5709D0ECD90C7C537A4F65DAB6A81E87E2355D2854EDDCBD9173676C779
C5AB91DCCCB74A35E2134D2F19B6D495280BD595CAE39BCAC779CDA2C61A3B6B62CB34DE7D3E
7AB665D6E460DD8522E97B27EC820A6CBF1FA75EF0768E92D3CC78B8A78D25856E371D7B9480
68E17D071D62ED07E307F73B7ED49C46D9DBB212FB89C5079FE0DF25D2D18D5FFBB8E82CDDDF
B72F1D1ACF10AD23F2CD2CF003235E3E1518A2A46C95C7C5EAD396D0989DE2DC6F1EDE08D2AE
1C763D2528F49EB3C6E5ABFAF9BD05A3D9C5CD27846A743EC6CC11839AF6364E6742840420A1
CD3CB76D9A1C548ECED1911A4F03E5FDA3AE0549AEA276EE16A37F31E1485BD5AAA9AE3AFEB9
540D08D43DB9EBC456BF648B6DE6A53F64AB5A65F756AD68EF9B5A01B8AC9E54627ED1A6DF8C
FE87DAC019A6A33603D005C6B492609380D388FC68046495C8CBC4C050BE8F6260B578BB4150
5CE0BF93FBB5E75F6C237C8EED48AD41F91BC4D9249C190316710225C4C3CB3F3BB5CE41A81F
9E885BDF56744CE20FE1E134F31793C8C92E671023108B9EAFEE63E93D8E2E083ABCB78F029A
28BB3F7360C510BF86A0F5CE584C959E80AE6D048D250A0AB3899694EC569F5A60FDC91CEC7A
A8D06D3F20E4C5EA037ABD6A54F5330A04DA05617BEB1BA01A8EA4CF94F1318D6D58BA2F4980
242F2F39BE32A0DD3AEC378B08C916ADA5271ECF7AD07B0BC2D74BAD8F21D6963D5A44B80ADA
5B7792642C6ED391BA1D8C26257C8FA2C9628478C1D3A04583F3DDD5AA9BBDA20C8AB1CF2429
2E3DA39F0AAE89A2BF2707A2A0B9F99A7E4AF7208588A0DA8C5E58E1BE9A934F659B3FA24F8B
C762447A1249CAC524780A1F27EE4F3FC039BDE351DDBCEA00EBD4A0F65FE6AB022AE73A65D1
162C95C48E69C8284A8300216035F189CF3B4A051E3DA7AE134145C93A9D36BD71887DED330C
98638C065EF056061AFE4AFA9B8C5422B1DC82FFF65B8B276FE9E560BA16573295F76F7C8826
0621587FC16FF6D48BF9B8D258E120C3C1B5385962B6DCFC453DEFA99DF6B76D0987DC232178
A078C99CC3DDC5ACE95A878698D5F83792BC666778465919400C21CE472097DDACA38264B4EF
2F0AFA898C8137404E4BA18F6CE51FEFF96043D0015AC61D7671A40A13FC7E10ACF9E778ED64
5AA1184ECCA49857A84C6D9CA2A0817887BCB9F55C882CC665A6AA8FA7988FD05797AB0DA780
23E249A6D758B036E8DA6C035AD861F21616CCC988E29D5060813FA27C1D9884BB0FA3EB65D1
FA0ED45D531439F600F61C14247E632909EA78CE4568A3642551DFF34F1AC5DA759CBE317F5A
44FB1233392D62BAC0126036564A37F263BC1A45093327484763281758727B11A4A8A4EC4EEB
85A418E6D008B2DC93191346042AD7144F4B9BF6961A45071055FA029E53DE2D2FA9D92E65C7
E7D14E7568A003A88D25A09770456DD457469896108D4EA5F62DB179C9EC05D87566D0FF64AB
D151041524AD6BCA0EDBA36CC2B96315572528C63416BE8EA4B48402844D7453035C1D46E821
750FAFBA9CC104D0E0E770FA802BE0D09B56C556D32CCE3268D06EDC9C961F8F34A682439A26
B12C076D2FFFB098EA0116C08164A673187892078979BF133A59AD48821E93584774ACFAF0A4
00C8557D7C0D715C712D4EACECEDDC049DC8A0C019435EF5E5B042B64B376B162308D41EEDFF
2FF5F7C1B2309B8F86FDB47F905A0453FF2DBE0EF364C1CCC438A3EC818046F07112EE3CC218
15CEF16A7AB1D6BEE1625C57FB3179BF7B5701D0B47EA3BCEF53D6B455F321254CA5976CB3BB
53E381AF19769DE275AA44CDE3BCF83F7C337E59058A2E5A1F50894F78EB461C37C9E3E63C79
F31E76BB68A767AF96EB097A8D930DA33568D47324B47C81CE0DAFBE3BF007C55FEA4B0A0BC3
908A2FB97263FE5F2837DC90C1F81F56A6EB014AF134E0A8E36E2A8CDEED7725755F776464C1
86E92D66DFD5E59140AA63C141374E1D883916487F33FE14567F18F10C1F39290B988399B275
3802A1E28F5643412C907A02AF184F44CD506CFBB13CC7413CDACD2EEEDF3B160B01FFFA5222
C4764E652EFBC89E44E7AEFA9F275F2DB1E5B95AEB4A7088D1EDE5CF40D7ACFE4A3482A1659A
570971CD5997F89AB3D20E77398215364B5814FEA406ECD4BE1467A41BC9CCA2D48E382F447B
386AE5495E4486B02871406ACA754A3927FF0A63CAEE3F33CF6334A1AC3E2F7432747CECD5A5
C39ACDD151341A341DC82EC8E951A2F5356A75124911FA1E9AC9029F06EADE0D2D5281A2665E
0E14A8491FBF84A24CABE27D908B7DBA52377C6E95AC3B7486902006C5E40C4B235444E30715
3AB4466756B5B3B45D77770DA48814B2B908DB4665FA90D14872F8A82D452FB2264195EBFA0F
F9BF255A9B773CED969F9072CB9A69FC23092E350287FB55F5BAF7B2287209970714623A8861
8780F4A52A63936A009A2889454022DC4B88121BEAD8C1029208CBCBF43DF8B27AD576AEADB5
887B5C3011F9EE757F7082C8280A0DF6EFD62C5748F093F0EDA116D0915BED54C87257961D49
D9A78BD3516DEDDBCE1995D8DEBF1C0021F2ED25835EE7FDCF6237167399069075D892E33BA4
C81EE7537EF02190ED04141DCB21DCE6E4978A86B94B0BB3C08B9CB270E50909D780B0556AFA
77409C168B61E4D6B81D4371D1667C6744A55EBF628154416AAA6EFEEE7D0BAD3F5FA4AA3237
1893D9952BDD20ED383ED83904821B1834BEF0CBAA0B00EA1B7972990686477F6C233D2AAA9D
A87F589446A89FD3C83647A8F86AB1EF20E3E9435374BAD83E13388DB4ADF5D211136474109B
DFEA1EBB21B97702EE3159A4719F169B0CE3A141CA48316EDD73C8AFD576D7A4826677A1ED61
4CDF61164679F34FFA68E40A0476CDC04636674AC36AA22122376A0299A18DA803363D2C8957
3E5271C57DE0F58750E33867363653E1A717CA0262D0017F6DB8B4A8B705A084F0354708A49A
03F0DFEA45216E50DA8633BD448F4109AF8864B7749CB7A0E8EA4D9D28ACBC7BFBB42CCF7D10
5488FDF1D814FD6B2F47A9569293814D6D7FDB952F5D85C4BE0E437A022A394678D2C842120B
4A2FDD89516C5F00228C6365B7F60151D451B272A206BAC3255CF5D68FDBD4B89C92897D1736
8EB84C740BC0421FFF27A307C640BA27C4EE467ED3BAB502E0BEB8FCB8946593C70C8A21BBDD
6B77F21DEF4AE9F2530F51E95DA7B8A85134F695B8B16DF2E10ECAB744BBDF3FBFF4CDB9A091
767C7C9C8D3656A1AC5E277353DE528943ADEF524A41666DC5D10276F404C0F1F1606CFFF798
3F52436E5A34EE91D0E4AF98561298430EB63E31C51C4BF9E65B9FC8C9158DB1918DB3984C62
9794AF50C43C18611F59F1E3DD200153EC9A6B628D56A46AAF1276632A53453EB3496DCF4F21
74F3B86A5D4D14E67EE18F06C153F88DEE9A91AD36A793F2B3D11436CBAF71811B3742C8C578
1A692410F18BFB5A751BA7E977A37A270187FB97EA44ED468AD03E0050A3CDEEE397B377EC23
CF20EE2F72ACA6B5129C6A4ECA5C7B5C4C9A03BE54956B638B217D51D416D79FB3D069989A03
63FDF688FC3D61529B08036B1B3B8B0BE0101DD9F5CD0260FB45044E09FE59D6ED39F9C66189
A5850141D33CC7CF390576A052DCD55586C90188F50088D6F038C1DE31A636A042266B834F93
39CD152A84325BE676FC6C94312E6C5582E3D063FEFE33E321758D7CC38BAD25DBCE0ABE021E
7F17F84D710BAC4CEFF5F44BB036FED06B6614A1FAA68A7B175378D5409D983BD1775FAAEFC0
8B93C7EDEA64FFEB7DE8105F0AAA9F8463D0CDEBB37DA9494C42181A2AE778F738776A02EB21
70D636582B84DAA97F91ABCEFB09748B8660B4C59D18FC35D6EA7EABD2DAA46C47362B6FF034
E1E19ABA030E06418148FBC88F331AA341D4471940446E4BAA085867C020699401010626FAD2
8BB1344EEA338F7309AB42840D60648D1AE5C3FA516E4D96263BB411F5CB3E506F639D3C399D
6CE2CB00DD6E555A413D3D0A52265ABA30FA0BD32CFA9C890D5B0FEF16C98DCC205023CE26D7
6AB91C343CAB3954BBFC473EB78A31AAADF1146997BE3E214D99A95B32274F289C087E6AEE97
443AFDF046F923069DF8D162A2B4A9CBCFF1A98DDF00F13972378F76CFCA501FA81867E7AF04
6C3FD1FF8B4125F0385D78DE487C3EB1A4EFC0F0BD1F9421B0B3D38C48C5C54C064F4941F55D
46A06B8D4369421F1CDB123C143130D64D1A9F0D69D8CB77BB18FC678D5C4E41804DCB55AD7E
31860B855696908A2255A4D4016D0B547C7AD0029EA4B8F08A54FFE7CF12A00339087A132C5A
8DA7ACD499EBF4D37E73D3D3F6F3546348A9D0F842F0249674982FFE0713E1CEDD0313E507BC
85069D70FAF8F8A2E36FCDDD22AB9C1144D42D72681F464760CA78D0A8EA0EFD0797DB43F50A
7C044D1421AE9B41CB7F23F18978442E65A962F891A6E90163F70574236DA0F536AAF7402605
BE6D076CC70ED2935BEB6CDEC6725CC6ADF5DAC73052EE0D073E07E953AA9FEA7E88588E98B1
9552506D1F2538E14C1D80FB7DF3B7DFDBC348D46F285A1543491828B072F7D42EF82E9EC755
CF05A292A26715B42F56773BF86562F41AE18A060DD7F2BC5891419FA1A313405C76C056AD2B
22AF876680F8C28689B4AAD1AD71B294454F305FD382AA98405D6A8BD80BAE503C39D570A8B7
7A7E17E3982A576790634BABB2C82D33B1A1B25CE073002A15BB536D75233DD4D907B81C6985
768E76C54FB0AD83219C747CBBEF093B931EE5110237DBAB1305E6668777B3341748034D05F0
BB4547E485E975BCB018443A878576F9B85BDE41A7BB6EC20EF6369F795EC24597E7FFE309DA
42C01CC7CC46FE9DEBA8B8686185B68D37742B8AF331354FADBD843119620127AB8D3123F121
D88EC489CA76E0212F4A7A69BA6A1045AF054EE33AF6D43C46866277B947BC1EF241E556DBAE
8F1B5F5A57EA1E76A4EF1C06A926BCFA464610F93432AA880BE65213C15CBAF727E9174DFB8D
7B16A11C8394054CB6BF57A8D8A9FD840D21F9715773C05FAA10735C8486A2A67F925FEF7C43
79F3091A456622439D8FB7ECA200FA8D26B63043DA049742A4FD9E5AA5DA6353024606C9A2DD
6EB9A20A392A9D3C0B8BCD02FE28491BD822EA387B5F8831AEE6E419F8E7F7B2D87CB9DAEB59
7F50E413F78108C0EB03612A18AF994902ED5C91523E070407488DCE1A7B459F9C1C483C7F3A
C4734F8F979CB87344DE2F1E81560CBA80F940945787F375636170E2A16315E8526BD42AD8EB
0A1B00FA47BD3CFA00571A91BC04462DA38A41944AB6E6A762FD34E8B2085690CC934D4420EC
52269F6D7ADAF02D7A48464778AC9690EC14350221FEDB06055DB4481672EA0FF6AC2105A124
ACCE497431BB6A21490F8D76B6BAE99DFE5F4A1F91B68E23EDA04ED030B757F427B6D1734097
0943CC90E7C9356A3E8A49C057532910FC54D05C9F604B7FDC6CBA5C52F82EF7611D256C2172
7A4B7F7D2886430087D3B02D44B3E4EBF31D3185418224100C32A176DB8ACDD27A3828507607
B8A6358361EDDD2697DFDBDC928BE154BF1232EB37CED424BD55B2879DA7FE7C30BC82A512CF
1E654D0CC0CB4DDE59399B55BB9E53C9469F6813E1A881599B2F5A1C0CE63F694F288EACC9D4
D691EA5BD5E4D725C3939D5C2B4EEB1C27A2E36071C99764EB61C597D5DD0EAA594FD503ADF8
52D6212E92C4021D3D755B35FFFF2000E67AA8C8A8F887907125A703FAEE4701DE5B054D7223
389D076AF1E78CE229D2B7AAEDD3B83B9FF16C2F100C552521BD8EE293A019967F783D5E73C1
174AB8215BA5496520EF03ECE4E0CC189B3805209461202ECDDBFCDFFEAA81D73A3E2D7A2F0C
086417454D7F90449A7FAAD52A2177E07A2289B7A2A990FFA14ABE6D48267F2A3DCEDBF4F75A
A4006CDCB985067772CB50A88145BD8F799F545B6FA34AE773E25E48CA6C85320EC48560A051
B68E0E06F173133E2879369280C02172905879DCED8ECAECD8906F80ACA1DF9BF626F5510595
861D88C681564B868679E5522765A809B2DEC2A107A2275FB7E5B1768E27E0684CFDC2242132
5E1BBDAD855FCB0A4EC08D1F146CEF2CF68208F87957A6A15FE1E2755C38549AFE1672D99C2A
C75AB8F1A33E2907B78BA020BE9DC1BE3EC75982A5CE6AC241A050AE3C36D885EAC4E73F0CD5
E21F1773F8E147918D4CC694403D0EB8BAB0150B8CF48CA91F9BA174003D13CE9F410A5AEC31
296A164E6D611C8527BCA8DC71A2AE57C4D7C9DFB85EA5DA647ECEAFAF417B0F6A0F70FF771A
31FE63F6896FACCA9647D2849F3E6067308F0A26A151DA800F9C9902475E6CE9C73214B7579E
7C7A019798195C89722FFC804EAA1BCE0917DEA7C6461E7E6A30D27629010BE7B0E2D8770B49
F4C04D0FFE05FFF2AA626F05CC3D2E4852A9C0D61013227ED4389A3061620C8C1DE967D227E9
4FFD522AB24F7EAAE9BF4203E1F259F5CA16EFA197DDA8CA0519B6F337C5A2B53FB855BBFA65
1B729C88433561DD962B347294E8784C1B7E8ACBB856A567A9D8A2CECB86177C3E63864D82A1
F795B2B67E6FA4E700F0C64B051D830D5F20F214C109B6A16D3EC5DE0EBE8E1737162CF7133B
5EEF94101E050AE455BD4F90C9CE7B5AE34F114491BCC80B1422AF8921DCBD0850E30F986716
C8B968F77D7977F825FA32D5826C2F4EB3C0F7C78850DB3D0716F6A70016A7A249712499FC52
9B928DC66E388D47D00EF777BB0CC69965A4C4D737C1F9199D677552B91A9CF7FDB8C03851B0
8006861EB360998794CE0B955C16CE1F6FE86AAB4700CF6E2BEA44F92ACA4E6B779454E59FED
0768F578FC6856AF8BB2022BDB32B8FF477595FEBFD382CAADD04C695132A206D68A0CFABF88
C8A78063B2DA93B3D70DBF77F70AFBF179BB0E0B99B88D3654F7FEE3CA18A6243C211F297898
CE19D6A90D4C5744F11C8533780F6D6BD712508DB98966E163A9136991CA3066B8270D6A5AD7
891FC0D6C241B2085790B2E9632FC8A583CFDB200841E01EC500E67D3DB1E5EFE36D708C2424
C896FE3AC1A36D798C9BB027F3EBD7CD09C01C2A9B3E8ABD32044F0822C6B0FCAB6024AEE7DE
4AB5A1A5387BBF87271B5DC4615D28B825C0610DCDF0F7F4CFCE880F79EC3217C2DC72193441
FCAB1E76AC8F51881A10D67687E1168D7D5408AE252686303F20A8F5E40C45ECB3DDABE89582
98CF9853E5D0EB6645E392228EBF0C0071EBB8B239FEA5A4390DEE73C505B9699E44369EA33A
0CE909E1BFCDB5DE6E949B02163650D6ACD4E125D9BDF310368C41E601C26A9A150843CCEC54
035DB2101703E666EFA11F070C375511A62AF1B10E8E590661BEBA214606D093474DA3C8E0D8
400DA49745FF02BD1859530AC09C5E06F2AE5AF23858E108D0044DA583B2568EED4311DA1028
3A87A7AF3D486862C322289CCAE116C89CBA36C16FFEB2A511925A981EC533258FE80A6E75BF
EB4AF396CC664B33AB4F8A161E715410F55A702B4697E51898CBA67E345DD272ACF6EDCD9F47
4378D4A97E9140CBE2923CBAF1158BF6835C7F5E3E8A21649BEF43AB7AC13F481F85C26D353F
AB2625BA6A5B3A553D10D6495D2EF4868684BC25392DD3720C58775E693CFC4E7569F569A26C
B392AADF1292209F27ACE70084142DEFCF0E2B261D1C8C764AF52B63714A499ACFA62F010A83
8E77DDD525DB1C4C03D33D551A0B935566B37874B9B75B8ABDAFF6B68518CC581F32C7E2E2F3
D3DD3BF7EC74D28D4763FE1EE50813D9415734560BCBB5A52A823C1EFD8BBBACDBAC34E20861
63337C50945E7DEF65F949ED9EFF4BB11C36F21346C1EBDBB80D937BC7A485CE7D938D76ECA2
001274528D30301DBF65879DEE2FEF93B031E930CAD083ABC10545F9E6F5E65399B694CBE958
BE5273910934D9F58BE31ED7963E5A59BC8E40EF77AEA65A59B7778EA4AA54312B47887E3311
9BF3E1BE854C4282FA71227207B75AE763F8D5DBB10A091CDB0BA8E83E376FAFA00754BA34BE
EECCAF0FA84C68981D35112E483933A571F08D551AB39003B6484DBCFBE2396CAD864C02AA99
6561056DB2588BDC2175D21CEF1B8DBC9701BEC6A41B1B8E128CB3B17F4B17627F8088801102
170B13431BA9B1DBA850A74F4E5D1F69A9FA83D28D26E4C545E3BC40FA4BD52B93AA9D11A114
ED30134C05785867F926DC0A1462F6241E81F0F0D9C8378A9E02EE09F35528490DDABC52248C
12D0B070ED1A6EE3A59B7C6DDC563767983DAB24E9EA254FD2ED4344ADC6EA2E815DF3820C37
4C4C6EE05F0993FD864FF6BE3DBEFA77F5BE949C4BB8DC9511A5211BF561BC025A7372EB8799
9E9419D671FE53C4782510DE054A1BFF97671BABF428B0522E85C3010756B6BC235C07443E8E
27D00322C392DC724627284141E261CC83AB49B65B8513192F7B53A4F70E4A41DEE8A7662373
334B850CACA3CA53CCE3EEFBBDA2C041CC823725E2D5BC9BB8F33BB18E59E507EEFB1FEAE5AD
D86E77406C4F9BFB791D14CBF827A12B6C8BBFC54DC8916A9801FBA958AB26C2F43A7B927EDE
A84985C3624FE9EEEB08D0428519CF426847DFF0B7838C9C18A2EFE7C3E8ACB68E95866B8CFF
5E5E567BF1AEDDA3769466DA9B0108974429E7BFCE72A309901C67ABBC61365325EC26078148
8759050051D22F80915A2677CC2C27BCFC79C07B871D86340AD06E0E53FAC4269AEFDEBD3DF3
080CF9C7D96178C5299D8DB975572995E5350195BCF4C83F16CCC823825B8AABE165CFA4DD4D
1651606B834F6EA375F774D6961B39B501062881D70A15232749BA8A43DE23D3F4D3EFAFF602
7F6F1FB9477E2A1243CB2E7772AA8438D31CB3B7D11FBAF0CC1F0ECCB087EC67AE9E13632451
BCD534AC7B2CCDB5C6B6C6324002EA2FFFB529BDFB7A7E2E9BDC7A6B46A0D332DC4285639252
F3BBA3357590320BF8650389103771D430D8C79839F74AD77B27D3C230CC8E2D5FA25C582D72
3433C732CF0E53B066C56B7B4DFBA2232F6F21667BC6F74D1976D86E21C62447E8EF2092CD0C
8AFD8533965683E7B108CC8EB4E384727E36A025B786D2F1197DFF1F85AEE880145D7DDCB02A
780C87A53E51EBB2D2E99984AAD4E0D612F57F7CD72C3045EA63D9B648D72F7EF57B5E9687A9
354D468B8F6B35510C53AD8D9DE10186CA1ACE62480F6BC57FC9D26D831E9E9A1060B85E94F8
54A67ADBBDCE00D1BAE12B04654944A0C88A1BB6B95E73140E4FA21043F5ACB21B6A16598977
558A10532BDF3B604637801F9C7F4304F1F6C7C01C431DC8495AD308878D0BC8EE61081D1BB5
F1B60E0FB209678684CA11BB2B57E80131A410A51F9262F16ACE34A8E9962E903799D374369B
1DE57C3FE9C9C09C7B33F4AE3D02771CB79681FA4986A4381146A02509D8755324C32808C3C2
B41117969B4B33E29D53256D93C20B7F28BEFE788C2709229CC5D96F7C9761652DAFB0558946
FD6B51DCE07474F42E90AAF2B9ACBE87130DCCEF8F4D2720CC2A89FCB37DBCDEAEC7F44A1E73
230D9CD11DBC5A9238868E723DB31361E849EFD2C97801373FB28184793AA82DE22FA932504B
D558C9D46F4551F9A9D9C012C2A3025119285B17D7F0BFB1A71D988D1149C1641D6E76C1849F
F3E3C5D15B22A3E0B0D5D796903BC96A1907144E32263F5185BC2FEC93F82C7F63E0230C8C19
27EA8EEF440B7610408282D06F1CB8ED9CF1A65683C3CA2E875B269BE99A042A9B936B9AE5ED
7FB2F3EC1C01C50E512858709ED2154185C2CF22585B0B3643C7B642A7AC808B8F4930FFB50A
05875B03757886B66A5D1DC99AB3444A0631C3DDC29F794300736AECAFEE7D46FA69D7E39BF6
499B2147B7013A99378DAD5B1B3CECDF57A1B96A4B2077441FFECBA1924D326A6461D3D89C0A
DB6B9992285687E54372FB449B2820C94CAFF63B2FB49711000D44E3681476812944A8FA28EF
59482237F8DCFF59F1AD81AA615BF460E2466225F07A9BF084D348158C6CD4790598AB894E33
0D1758595CC2F4922C9D1566E8FCF6A8460A30977DAC988021C917E255FE0E1F7E0E6240838D
0F4D821067927EC46753C952CDCFCA4DA2A99BE0436BC0C70CDCCA1DC2B45789F8A95ADDE25B
752BABF81F9BE611161384D7EFB8B53C300612D53CFA142918850E72F2975169F6F7440117BF
0611F75469FA6ACECAD3A3ECFD2625223D70D0614C1EECB6149EC4A52BEC4A3F229E5BC292DC
9572E63D43202CF30FD1073DD1ED553C80E33B08DDCA87DD3863B7D28087F68251FD49EB3F83
EA92577457DE19452A87564A1257DF1796F73214D4688870CF681AB39BB0B1DA8D2999D93D88
F83B827E2CE58D46F84719ABC5F6D8FC62D48F4E74305F5BE732BDE8CAE001547302D519E2ED
1DAC157CFFC3FFB7DB7BC637DB052A4C3638B957222CC0E9DB61A731F9109E09772FE0591054
B198B2605C26CA25635E3AC337797FB9BDF5C9F5DAB3226A0DFAEC8723360362A33793A8753A
7F553A4268039BE77C53CAC5C462FADA77001B172A4437EDA49154565596AC8BC6288641FDF7
38B75DD6D841A200B450BA19F2D177E4CCEB6984F048C8F97926E207DB2C3215040877F73D2A
BFE79E813D0E1D5DA7B3ABC9AF94ED3F2F9761C7369EB5EA04C0C84F42A9C798BC35D6FB639E
99929A59C2BDED44F7CB3EA11BE88F115F12DDDA132F30F0B0BB544330EA3862D477385A3E27
D43747A7CC03185C5FC7E3A1B9816533C1EBE7890CAC78C34B5BBE6E20FF4B2D679911744B05
1961AEFFCB8477D61A5817F01E47803878EE8B2555CAD97E24806FCD5EFF6E703E326FC46AB2
1ECE67E60CA9899DA6B2ECAEA53E6BBA97F485F894CC08DAD3EDB8C08EE653C82076F60265AE
348E2414117029D250FF553B3B2111C921C5F468932995098052206CBAACF00EADB4186D68B9
DCFA41E59CA0182A70518FC0469C373983932D5C8D73182312D13BF03F8430EBDE31862D42A1
57372DE1F85EF55E5B994AA50C0D418262E1A7D5A7EC6B8A95709859509642D780107B5F9AA6
380A67BB86E17E3F1F1427F5826F5DA3C519E22D3F44BBDD69A60EBBA9FF91DFEC338BA9D2F4
132A097E0DF1E07804DB4A077E37DEF25B8FEACCE2A03678724C59C674D1B89BC0BB798F46A7
EA9BE7D5743C2F4003A2FB995A6E2FFF14BB0F6372B70E94FDB4BE0AFB203F6D724837C455ED
D0CD807AEA01F35122C5B047C3E3C5A2C2E2EBDEAA116C9E08089E139104E5FD1A1F6B4DDA21
B9C805A220BE54B923D9C790CC00FA72083B5C34A15C2527F30B5DB3DEE56A1AEB1AAADF98CF
CC174DECDD41D91A6AE1C423EA6ACB0F9ACF9E3B495619D75C5A3F6FE9B7A189D2A4640A7CC9
6BC19CA78C05A6C58B1B28A0020890552B798273F3BE08366E85BA8945BCD835DAC185581A41
1197AA294D9914D2B37F3B9F09F19E7C3A878BC13DE769B51BBAEC279A5BDBCE63E5813A85A7
DB0F2C275E242E6B3406238E8AEBA3AF160CD3AF0FD251878419322D6237B3A01E17A76D7F00
D5EF44D1B1166D7ED51C800EDA39FF5735C83F846B376AAB6C0DAE5001BE673BA46CDCBF3B91
986E935E9AEECDA483E2B76D3C639E08E27AC04CC9D0F6F9884A2CF9517DE7E1D1BDF872E184
0B5474BA4B974CD1F3C04A4A29B0A4AD26E166301AD321358AA11FAEF06A4B121532B21D2FD5
BEB4485C9C1D1019BCEC7407A24887A1441E18744D02665F36E36EACA5B9CDF3958CE1BC9294
0C590536E69D15BC053D3286E24A76711AE0E299213C543E33437DAC56768CFE4A190345B020
B8368F4001F1413DBD743C765F120AC0348A834F7068EAD20593769505CF891CCD3D351F3873
7F204EBA6EAD77CB03556D4E567A1390AD64F85F21B9ADF835518F5843A0EE6F0B15AA90A484
0181A0C67677197106A6F92F00D20F47D14D5C213B8A5D32E08BCA99277B9A8858D84106AD2A
F126E03BB893945DA9A8E1EAC787800B5A0506DBCB104D45398DBE06A2B1B20403BDAAD14B56
E3038A04F05DFC62E91DBA42F273C7A044DF8B7763A51F466E9B2C160BC033E361D40FAAB8A0
718E1339304B4D6CBFBBB21C900D439D5FADC69F5EBDE98D4BE4CB9DAD3BF9433471D004EF25
2CFB63FF8E03F2A5CA39CD213D5C5DE0A718E79E96FFF02B809BBAABDB0459FB67978662C948
DEC5283F92C887060C895DB9B93391E0067192FFEE82E2FD7C66167D35EBDB9FC5888DBBA45F
E50565A4B1543FDD89CB9C5E48157C3CB0812364E96F646E0746F0C929C499C05FA6FAB2434E
8E7081E2427E99D0B6DA67A99DD709C6BBBCAEC577DBD9BE6A8EA0192E0A4272DF08E9C67DA5
CCBF4FF38C396C55280BE9A7F7253F7F273629B94A3BF268CC05B12ED6DB9B9EB8C3CA62262C
050C923896B5D7B5B49BE5E31F70C75F054AB73129259D14B758E93C3BD651C85F2003C23A6E
EA4734483914C64221C244314B1EE691547D83934465823986A46503A7E13A3C4065E0CABE4C
2CCDA3E46EC297756FF67634AF788C5635E3EE3BA67905CF27131983E16AB66FC6AAD19CE73E
C51990AC752FDED9D25794E20FF0BCBBFDBDE419394ACC2A37E7EF0BFA8707BF9B193FD5ECCA
A235115FBE22A4F090971AF19E8C6B777D611A16842329E977DAEE443969BC03A334C616F110
C335261E9CF9F8270C10EE7166BD8D3EEE98E4E60C63693D398F903A801DDDBA2FAAE2804507
E8791D3E7F2194105B0A97A4A248F27172EF16A75CD230C04EA3C27E0474EF3A8DB470FD9F5C
1FB0A4A1C04AEA1A9AB3782DB8CFAED0EABC01F6D4B3F6C67575CDDD48F804B79E162A6FECD4
06812DF4D8F52CC88FE5EF5F74EDE924EF967BF5CC412B415F5BE193B95598669A1D87176C3A
ED3437EE11C686861B1E6F92891660FE8DB6805593D11C5F78B796F69CF8718CE75544C59A22
0703291899CC42955D44AC6F52BDDE513926DED284AD69CE596FF7DB262481F19C747D7DEDE7
165DF22714845B0F5FDBE177DAD835434CCE4830A283721212CE5EF708D7359D6B5D752151BF
40DAE4BD028C615E2E8DCE4DFC3E3D4FA35EB6E04F4394AF9B0B4D85EF305D12D428B3D607D9
FC5306451E4F7FBA6F9DF7D9DF6CD8D46DEDFA5ABC0D73599B46C103D3CF28828D1355C5C297
1CE14E1730520E4CF20F1E31501B2081AA1379AD31A018D4D7E3303BA31D07286666A0206255
F9EB2D2FA6036E9FF472D06A703A927F10AC76BFEA916AD1F0B8619ECBE9FFEE4F7EA9FEE669
CA4CD7E8203E23BF595B0C9202560E05E0ACFEB5B1DB40E7014DCC2142B2BAB6E0A7D14A9764
77F91CBD4434BFF24F3E8CD5DC5DDA34BA3B24B4A220FCC668D90D962ED169E39BEEC85FB63F
B473D86087600E41D30C853604B9B2B88E550E0C18E25A5CF7BEACDA6857F70FEF09E88CD8E2
FB9A54D9A060E33B608D5CEE327C32D1CC8C19578E65C6E17B8C982B8395B131FF55BD568222
3AD42FF5ACD42E1C6EA8F76F1ACFAB1C77825825CFBFB34752B779E56B2CCAD3302F16AAFF4D
73F812FE0E3B1CF60B2A977D65ED505AEE4AD27A7653C74B9C7F7C87B5CF051A8891B2986EC7
678C20B6F5990F2FA389E547BD5E0212FA608DF050D1B7BA12348EA8CC01B6818CFA54335D42
8752C54142596CA55850B3713C577ECD7230B3F5627B68AB7D3A28615676C5540BF760B99344
9E17726592EEC9D74E4ECA0E60E6CEA0B470DFBF98F9420F81707109D8D6BCD2BD2E0209AB41
D9C6020486E9ABC518D0586FEDC942D45AA4E76BB3B33D361FE7CEEA92A4B3EDF2F5D3A3F8BA
4CA4F5F6A76F3B825967CCC80E9531FCDCD097DC86205A713F29327659E3F5523307A73C43BD
72FEEBCA54DCE12C401B1BDADE58765E396E38CDB60CE5D5037C94BAA2A19784B5D169ECEFD6
56E9D965308D88BBBA8C9588AE8B687FE88156C7A10C4B6C064A73E47F841AA5A2F05C3C4913
E6257898453AF778B06333ABC6A3EFBC4915A0C0403F1780DF83549CD62F1541DC908CE020CD
E768D73B18CE02C0F5DE968B0223E83731300E2A6A2149284D310FE882EE9ADC96754724B574
D88176B65FA331B116451DBB80AB999F07B9B04AA66031EABCBCE4FFD035F8CF19188F6C063E
4DCA05AF15E5731F892E1E7AC924E7690C1EABFE7A5A5266D88B78A626CCDEC2ACA7E91E9ECF
4254CCCA8925C6B004E1D5CD056063419F9E9D105A1E3B866D181D1443107FF10335B4C4856A
76FF9483B4781F4AD63F015A117D22DB63912558B2F4FFDC8BEBFBCF9D44DA23438B99782B63
116A47D5FD1FA88C1035DD4B842EC72FEE1AE0C5349FBD63B7F8089AEB5FC2ADA226C3572333
516187BF3AF460FEDBEC607E56471B69FB616333143610CEEBF2040EB6933750415CA80E8590
F5831C873A92304EF15A18F9418EE05449BC5EDD434700E7993E5F291952A4D876E6460595A4
ACDE51FEFB167C90A83F49CA77961663AF955EF07EAD20C5A131F82E89C0DADD1E0AAC5797B8
B599B0CD16F1EAE45031FC390E10923DEEF75A803F49B7D7A9BD18A3F032DFB948D0D9AFD90A
EC51C7473B66D4D1ED80C718D1DA4405A3457C567AAE21ED9A6FF02925005861C090985BBA48
4D1CD3AC669FEABD34638881A54C4E33981EAF7A2B83AA286E7578269A9B9527383FC7EF22DB
C1D62F1A030DBD9627DB99F0668ABB8FFF1953EF4CCCC44269FD4E9F6F5747F204204DF5679B
17E8658A2E533E38CBD76232FDEBBD704C13CAB33225C03E7689A2071631929B3A7022C0736A
2F627B72D2D824A6C3A44BF227E61358CB70BF1D01C8068A367A804AAF4992C6C7708507DD00
672572DB5351BEA367F4EA323511FCEAD2101ADC50C569655F68183715F7334A7FED2054BC1A
EB8B92BB3487865581F68B6894B08FDBB5C2B0906C57304FB912731E102BE9A13EBB4F091E91
5A9C44CAA778B4F582064DC5557789242F6FB9851C9A9AEBF187BB25BFF4F61230E8600FDF75
BC0975505E57C1FF34E896A1C2E3FBB3ADB1C6627689D0F10E17B7F6662FDDC45E3C797339AE
E58DA4BD85940DA3C3F9626BADB53B6B4674FB02C8F51CCC9AB186BECD819245813FB0D6B3E8
B29A5828DD1E2C9F43769365DCCD5B8DED758208DE7347173D93EBE6E3B80D059A238F2D03D9
FDD97D8C53C50E1C954A8851D9B5A5880DB0DF8C531DB7D6AA99C6F801A431F491B2A3B3F9C9
5459E75F860F448CA3B1DDE43F908A8EC27A5DCD70AE6D38DE903097780576ABF33B77E912A1
229369A7CC41B036C2A1F94E667505D6272E5CAE42252F19C69C05DF283036E31DAA8F8BB862
6EC9C940CE563D49269BA2FBB13EA087D4CA17134A2ECD9CCD30FFD5C8B38A4ACC899ED3B4DE
58631DB3B240E1E7783868D8B1BCAB29AACD2741D93B60B358541A2336B960FB9AAA5448474B
EC223F4CC7D7716BAA4D372D181CE262EDA55054D22B26BAC4AB95914A6BE391FF77E0AF9F08
FE324CB387EFBD5C379DC77FEFDFAEC984DA46430052383FAF2938B170A150363250891406C4
87212466727685C98104281FDC4A6194353628976EF3F99AAF9616022E5536A7C67B62155EEA
BA24D4BCFA2CF2A6ED89AF3D71D5F103655D8E0158E66D263AC300491B2511A8C3D78DB95B68
E8EC2ECE2948D779900A4156930729736675B75A15A5CABA334D6FA8F5CE59BB442F69FC4F81
07FB59A3A4550D11A05641CAA8F517251631FB2FDC46982C18CDA7D910F0384C9C069AD424D8
0434E2D096E9F4B85783EE7CE5FA2D6349CE04E56B8E54D42824F1DD6C3DCFB49AAEDE74CD27
D7E4460CBFAE5A17963B705F8FB0752CC069E4643447CA2A0BAA72EEE8F29419BF09E353300B
13963F0B5DD22834652E3FBCF185635243400FD0A6F7B6BA64C604FA4BFC58CF31D6A83773B7
8FCC22CA7E06A519E691499C0BB44797A18579FF6595CB2130A9B9657074005FFBA690376DCC
DA69B93CEFAC268ACB43694C0C5E9C60A806E9C737F6184B36771D41FBC6DD601D17D38FACAD
DE8D7DF9D9D0546188388A17DE1212843C8751F13D969B13C680ABED16CD9A5CA09AD58F94A8
F1B5A3C18418D2C43F1118967C982E35B8436099099C36478C332DBBECF0A080801F9DFA9370
C8DC3AE9B1CCDD75CDD251FD0DF74C19EF2BB9AAEBB232E9A0ED0BC69E84B20B358912FAAFBA
9C4A26D32644C680768BD0F4F9C253E14748ED7FE2C095140492F303794D16D38A04CC602804
FA9C1FE1313ACA0F2937A7D30C3132215D32BAC22049BBDFC23A6D18E16C72481A3F372F64D4
035651B2DA10E8843F692F679A54F33B63FFDB1D7815213721460ACE8654665C7CD5FB89C7FC
E1360BF6A61E49602E1CCEEC94A18A2505D25D0CB95D12C247CFD22E467678692CBAB00BB15D
2355C62D0F793AB32A3A65A8CD9331F0AA794D98901D5424CEFEDB062E7F338330B9D95DFABE
E513C6B2356B10705B2BA650F21EA7D33BBE7DC522CBF711B2E5FA682FF91948367CB5404E0D
997F1A82FD1AA72D87072A6B0AE21627A82CC4486F753F84F4C01FD874D19B03D4DB4F9D7E3F
88D59F59FE3CF6B9E3A7E33F8A560F7EC0D5970EB50EC0942B01F83E23A25352FDCB5B19AFD0
5D2758B3200550114FA05BEF17ACE4C42A357A7A0055397FB666F2F24A28416B74C3A26736E5
0BC8463FF7BA58640A1AA29C95BB2B4E91D80D5CBB97C83BE135A201F20081C6DCE6825099CA
54C8583F61BA07CDA5D0D10943BFEC6FB073606521C1F31F3F23FDEC9183740AAFF05CAFF477
DD7ED960F45CA8A8A423ED3D48235250CD01AF906E05FD3A28FAE11492A3F0E5CC187602A29E
669CB84E19DA01500F3A38772BBB2ED0CDECB076272D412814B31BB78F5F1522E2F96111DE22
A2808EE2C01C7095E01D1869F6487F505132DFE205ED9C040A9A8E5517F7C143D82A990292C9
6BE59D5DA12266E264905ACF9FA9FA0741F0F4425290D369E23506CF92DFE63EC557819079DE
9D53553FE3CB6BAF59E7E229B0B5700BE143B0F215238169FF55204A15EDE026D31F783FE35D
5AED1852D5F9E3168931A180390C322D4F3C6A492042018C88B9E4AB9BC5D160A51167F1197C
DE0168A59915C7FE54863EF9CB147EACE2BEC439C9A518A2CE32CF88AE5B08BF5F0B5A87AFAC
3914CAF1EA4112D1FF06CB065267A624D70D760B80E4EF517071FAF91D108246BCD12205257A
48066EC3B1AB708BB50DB97A8A7F1D485B636E87AC024044F7F06737A864DED5A0B2A1798846
5A52E923322B45988D335F91F7BD4A181C4FEFA0A4CC720D8480AF4E02F3D2471A58D6435AB4
7BE415E8CBD37EA99E61CC21DE250F20BD152822978C70E624A27028E1F153A199B997988E07
5222026DAFB0354796A4B044714785AC0FAE6B0EB9536B65A0444036465A6DDBC5CF245A08BE
FC6E89B1A2D17C87206EBE479BA6395B422A3C33BAC43BE9B52FF5A5545E2033FED2FE60D893
E2991E9981F342BCB1E0F89A0D5881459E1BFE6BE3FA652BF5F5D432CD11C0674A23F74FAFBF
5F9740A81F9572B038A82F59FDD0784353BE17C36D763FBCAADBAA92F7D19B52987E6EEB11F5
E1CE1A6E57B4BD6246AE212633C643BD14B90BBFAC9EA2B220C8845F37D93560F31E5B19CE90
7052C9B3292AA1F24A6ECCFBC89FAEACD8FCAED983C57C361D81C420034255EC6132FB645DC2
7F1E5075D535AB33E72B347C6FA2F5A6E1EDAC8D8B40436D07A732BEEF6F129EE4A660FDC905
3AB05EAF292BC50766625B0AFA3B42D5E6A619D2E3D7A3374DBE3AFB1BCF9122CB54526165D1
D59A3DF54F59664E4CF5B3B2B26E585BA83C69FFE8C0BE36F56C90DDFD282D78998CAD5D3455
A52ED86F1BA90A8E18BA2EC097CA0A7634A2154D94B1BCC9473CD337BC412029734D1A0C2F29
872274C92659844E174215501E7607864A7ADF4AAAB1226541C71CFCF85AEA97448047DC8817
AE98EC5146AC703B48CFAA56B6AA8C7DDCC3416493DCF59FB8A3722C70B14751EC6D8374301C
149637A02CCFC1E9B28F4458CBA8DFCD3EAE3D1BC0BD8A3AFA436428C3AA2DBB334E6191EA8D
4A5A4753FC1F15620C12412C39B85F7D631C774CF6A423D79989FAAC69B46B4C2295BB8CE20A
05E411F87F33CFA7DF9A78D070FAAEBE4FF60F89BFBE3151856B3A8B4AC8DB98F335612BE65C
228F5EA60640E08FF51532340A998E017DA0415D0D906382EF33340793F1195432E2507C1B0F
B9143604CD056F150B12E63460E19F6F1DFD90E6FB50007961B589CF760AF92A049854B4A043
82C50208974AB808B2EEFD439AC69E68B1A42B69FCEF97E92B2272BEB13AEF27D58EEA02BFE8
687DD2AA1DA5849C077A4ABC53A9FD0DB9B3C5E14B7349591CD5890A42D6F72527E699B60AD5
374EEC51EE0E853A80D5B714B59B9482E758B6545532EAA43A4C39F846E518D647BA39F9CCB6
C46A8F6FDE1D2562EBBCA5018CEB9880AA90CD18AFA2803D71553857879813C8D229FAC466B9
1DF73F820B00E188F5CC9DA939A2FB63535CCF1E13B0B5ADE9E926A1AC7965253B6DF858571C
E2FAD605754C9B46AAF5C08D03AE83054AE0B356B89F374B3071D5C9AA62E487B59363B5934F
0953FB9B201EA5251089A2541794CE1301F2817FF53A55449AB02CBB81B8D1BAEC61E85050F1
0BA6FFAE1A8C2364FBC6522EB0311DD4BFF2A3B55BBDF4A971F70FC8EA6ADEA4D36022E3DE35
3BFB72726863E68B7CBC380974E6770442EB4B6112E4FB669A04FE36B45C1E046E78E41C0C0C
04BF734C70E40F73CB1F83AE9FBF3A1A8DFEFB80172AF4C557FDEFD3DB0C47C0F94E989DBE57
AB4919CA4F57F5E30F2E62E16F33B32ADDCFF587B96E44E533C2B5FCA428E4425F2E82E50EE4
97912A4ACF8B380E8F033AE89969C87A1942736845240DB752AB5641FA65047BF710D4AB8E91
154BFB6E2541AC80B88B8C0456FD36FD02A245A2F65308C6269C6F8A0F3173D060082F04A828
856F01D400E2679943E7C1C02EAEAFB0A57E820AB9D37F5F69A5ABFAE1898A35CCA442B114C2
9758B96C308C7D8048C1662B5F5876FB01D3BB063B23AA0F8451C35D055129D58FF08B5CF458
113549EB2DF1E991F20BEB0FFFF976E024B51678B95AF7CE9048D92C010EEB90D7BCE8B25434
1CBCE47B0A7BAC62CFCCE16E88ACE7E4160239D3E23206AE2FCA2D35BA40E5520822D3BAE5AF
60E26014C2C2A364E918DAB1E51A64C792D43A3BD711D7239AB21A362F1B31531ACE927A169E
D3D6DD4807F0C6AC77AC052DF6C915355DF24871DD4E22AC5EAFFCE6DFE9CE3FC110EF3674A8
B85A0D3447B6758AA86D96E09CC859A2617DDC0CEA8746A02D19795FF377B61A360EE9B88910
5CCDBCA63F47E448B70B6836F54284D6DB4602A83C96E8F352FC9CA45E5FEC18EC0C5F9682D7
D90CC91936A840F1320D1538CA11E47B69CCCCEE392D37C302154479DCECFD484587BAEBEDA4
427BC554EA4212E3BAF5562419CC1E39ADE481379F795131C6B9AAA8F780297E632C4BA29BA2
2087E48CADC58D8D2A4B5362E1D90F9B0654D0207626D7E53551A1B291B8A053E5CDD1AFE7B9
BD33A4D5208F5469357B87CA290E3BAB4693D439D003005BFD8769AE2274EC40BF80AA2D8829
2691603DAA72551C4C48DABCF8D7FEE0E765185F2131EA22F720DB27FC70A58CD69CBFDBE4F3
1E219F9DDC411448A50346504B4FC367170A1A3662FED42E57251E21283D0FCEA963CD62D2E5
8FA44CB0F342DA8706ADB56A2DEE3E184DA3026C03AF3243781B018DE4F67278511AC243EC2D
25BA814B3F242293DA7746C1D0CD0930708EEE1B01E0521181EAC01CC6AC73ECEBB1DCC23164
0D576664902989AF0F7A51AA874D3FA6C678D7204DFDE8A3EA1A97A550633BCCD6C85988310E
D65F784D130446D8196EDC260790B2947361349D64801EF5DB80E373DF130455D78EE8A1493F
FC924749FD9B8FCB657270072D85DE0066033D5F9F8A399571AD2D37F034D6DDCB1BE272B237
ED5D9F353DEA917FC5DB58517B0DE68F4673038A36E7D0D2CF8A1721D168C05324650B335528
071C139A47D9F88C432FE88B266439074F9209CBE70B1295711044946931CFB2A030D3C5BBC2
79A93E897F9428F36E5F26F729EE80045E6CCF0D6041C052D8323324FEED4127249DD4F54CEC
5CA4183BE06EBBA091A729F39C19826B8170AABE50D51F2C666D5C867E81866C6F68E7F57531
28B4EC241EA565D38704E41DAD62EACB31E078DE3BC0E0E14211D270C7CC6644EBD087B56A64
D9711C3F2562A1E4C5AAF37180B85E968374D7B6B059C3D5DB001F67BE24248A9962CC2B2BFB
FEC99FF46267DA5BA57F9BE5BD88E416977A9368D76E1076A9FB58264049CD6CD452957B999B
73088052A14285E77FC7290C43A8D26FD54726F493A53C3C1B3734A956144757AEC98C8DFEEF
C557992DF57303D673E3780810718CC88DBAB84F8673831AD82B5FB074FBE364604B2F00A35E
EBE7DD52661772380773CC086F12EDEB1FA63A8EFDAF5CCEAE27A9B045BCD12DB384114C9A39
5CA7DF68BBB7DC580DB1D88C611F7058277FF3605D20C61EF83D16AE19CC7B603D4398215307
FDC83480F32DD4AA7BF9D466CD8A761ECCD1DA0CC00D5CB420444EABD8555C8B2425150C5CC0
52391ABEBD670C9A6CC0F085FB079636681E8B7686C0E49DC6BC183BFC1FE0BF0D047EC3928D
A869EE0F9FEAABB40D18226ECFD03D982BE19A0A9DDA19E2BC0ABAFB208799BC9268D974AED2
BA576304226864D5BBEE3570BD58B5AC56D739AC96F429250F640DDA287DAE5C2DBBCA73736F
991BFE2C447A7EFBD64D72E6FDB06D7C98F743B37073052E7340A93E0C6DFB9B8B9B750BC8CE
FBF5445CF0255ADA1DD84F0959035C7A8A977128A62A8672E8DEB5932AA498A33557FD639AF9
B073452CC8C76B06075B12EBE168661419B57867E3FB261D49C4F6E9F67522C8B387284E7AB9
B3385B54C72D957BF0D6DCCACC1178356503E1CCB0BD590688071AB2DCDEBE2D63419E265CD7
0968083DF0A8B56FB86E7D6E1221F071F580772538FE3856090187E40795274374B8174DC0F4
E20B4B1D5A2449FEB466FEC133C0DA1B1B41F5A38104A5F0A9CC3CEEEB1CFAA18F7534DE348C
DF12DF83C8D4B695C0B0A82C5355153646B85A0EAF02CCE453286DC055FC48142F1DB5D8FD45
8342A35D62DAA9318B940ACFF349D2763C82B546745D627B34C9D5328806623B79C258729343
05FAE0D228A047A23DF0A893B6412C6B4C80C4EBD5917A38AD5E05B22FF05B84FEE897C28826
ED85FFBCF6C296141A964B85C08DA862053733830DDFD0B40F144C30A00A6E010BE460EE0B6F
97DBC59E63CB677D0777DDC8ACD538AF43761F14D030EBA29EBCE8EA43658A5AE55F69A73CC9
A17C999208D5B78F7EA0E80214665D3A4A63D83AF94443EFE46F31F929472753C2785696660B
E4FE514E4F4864B836F0AC747227F899B4A8D3FB00C2997135A1160B7B06AA1A131FD4715258
DD81E91C84A6A8275F92B259B71AC055C2FB889D309BAEEFDFCE2B626EF704CB94953AFBA41D
84D99B98335156E80A73F35E3C14902A5F9EE805BA04EF4D26E4E957F3CFB3BA9C53EA8B23CC
629F4279F9EA6EE86FDAF86B66E646547C9B492CF616D2DC32B030C13312557E8504314B0EDA
8BF857410CF7CFE74843961272F319DEFCDC22D57666947D2B1EC54544C6AFCA68294125332E
775CF03A279E271AB8C8E5C2DFD996F37FA37F96B5DDC6D403F120CDB06883395D80EB233852
CFAAEAAAB5588C021BA1F1623E59E68B90E2709C17B2F7FD1EC73B606654A145E10C5C3A4E69
7D52A071976157ED19350258DC7216275C34348E000A664ACF3A5D40149D82832A833AA3CC33
E9BBBFFBC913DABB75B7E2A026BA00687ADDBEBECDCEE7E4D5A62CB81A48C12A2B86ED304A2E
CE0CACA59900D444F86D9B035996234FBBF0293C77F4391F8A27EAF75D00A29A7520AF77BB0C
45138544F2A08E4DF0EF44504F51BBFB909F6CBA437CE23720DB1E2E97BE20BACEBF1CCB17AC
779311190CD7096AA90FA57D10734A752556B6ECEECF70AA3919C2C77F3935BB0E3F3B05A3F3
71A828A6A489E59F1EC773830C0D2666FCA9C2AECF3C1CD05D9EBA7E5745D7050451C3A733CF
D5B6DD359732E8D4E76908CA33652C0BA542CD6ACEAFE9061BC7720696CD19721F2B671836A2
AA5021ACB69A66AF8F580A9DAD35FA31046AF6AF33201E7F46A3890F0F8FE54485B5E81AB77D
C82AD90DA7120949598FCD8FA11DB42BD2FF0CD93B197207F0AEE1FFA49C05F4BF91AC4FD3CA
D057C2C790F87D997CF4E73A57F554994169B8B6C588DDD8CE0286912B39A94B0E234BECE8A9
6D7B4D2A8BBAD54734944A9A8A6DA9D1A24E63D059725F08B0331B782CDA087B39D5B693A0D0
4EEAE14801BB0CA11AC758997E7DF2CE0C0740F2D2A3BC7D07FD17263472B47BCEB74421D747
9D8C14A14FC17CF5CED09CF717D58E93248CA1ED631BD9B6FD4511A640569333729C1208A62D
518A6B22B1943FFA50352E1414609C70FBC39806061A41A81DE11E44C256C603C8DF3520B365
B07B208F52770F41D12996D4EB9CC4DD984DB10200E7CC75974D00006D691E8F2DC2D68CB53F
5E8BD817C7055F8EB4FE229A546801568CEC1BE7BFFF3FFF92AD5B0FFD51E5ED907606658400
F7D601C2865AB43231E51E65FDE075B693E0524BA678B50FA392E8295F6E9824B294F7A48710
2B40CDC7E3E461EACEC78ECAFF9F82A3B84E19AE54ACEF85DD0E56A357B7B302184B85B52351
5EC15888F0829F467A0F541F8E59C064BB411C5E77958F7D2D20193F5F0B3A01B01B5095AB6C
54D0EC76E243028AA653A7F8491FC5BC5B73527A42C7EB65BE5F461865A2BCD4D499D75107A1
88B6CE465676F8833F49E729061F060D402E6685253E1BFA892F7F1A019BA9CBC9452A08A255
C230140568C2E1BE0E6C4499025FA6E6DE28DE55C1BB42F6935D1B4EF96D25784C1CF721E0E6
ADE0F042780C8ECAA4D618366CF64636E722DD31D1EF37FCA2E2009C0A3FC6DECCB5D548869B
33CDAAB5900035192B0BE49578452F74828A5EEA7DDBE06FF8AC7181DD505B52F07554A20DE9
8EFD1F935B9E91BEACC12C4BBE29C0A6195A40D377F89C081EE74C7B317263FA73E4F17EEC3F
FBF34A12B73CA948E40DCD65329C9F994351E2FBB60302FC22B92468D1AA66767095382284A1
2727CF3F767A210ECF85C16F29D93B3D389F221A05A66F532B3EC6F6BA84DE0D465B17176322
735E6C27BF0CFB700F41014D784BB9B7B726BEB4C02EA22467E482536FA4EB93FC343BCDD31C
94095F1606A7FF72DB96B9E74A35869926BB98400C0E2C631A11C4A4B70AEB2FC3C3DACB6EBA
19E388D46FF725124D06863D79FFF418F86E8A2F8BCAF495D4D1B312FE52ADD646CF6339CECF
F1130AEEFF89C8024C473E4CCA55D93BBE1E446EC09C095CEDC11EE288BD9B67E4FB11B69767
B4F033AC504F2B9D36FDEAAEF8E64BFD66BFBE6BCCF97A6D36232022A3AB4F507DAEB9F6CF9C
51A367FBF53C216C540F70519DC24BE4E45B4A5505493B460A32233910029663DEBA50554E0C
231A0873F0C351AC44109F73E7E1B76BB99518E25AC4C5C4403C71A36FEECB05E355B424071C
5223D3C970C3E7DE92F4818443EE949B02FDADA65A8AC61F346D54E8E6DB341AE0F99E778373
F30439E80CC3C0BF1227BA997F0F8BFD1BB2A02C6B49A52E5AE2B83FDD5DF8E3CC01361559E7
F89449B5DD29CF46BC063A76442F8E1B722B8AAA5DB2B58C0FBA3E787FDBA29EC29B9F453843
F8F3BC6889EBFE5708639274FDB2DD8EE405B22807B841EBE9068A9C6DF281AFFD1612F46A03
EA56C4142C997080D02D14C13340FBF406600E5AB62C1AF1846AED0389715B4297AE995EB147
AFB67EF9B258C7FC1D0D4E050B57D190D626C8A262EF895FF7875A44C8591D9579778B9F962F
EB65467ECC9587DAA9DBA76F8EED6B9F96BECF5A281727FCC093412093ACA1F01DBDD6F59400
9B8CC665A15DDA79A7D51F2397BD6B4EA476FB35F82C480ED6F5F2CF6D20C4A9F590D399A9F2
AED79399B2F043D68F5A73067EB8B24B25DA77E905A711AA78C331B53BC304C4A89E00B2707D
F83DF080D5D461E710F598FCD130BE6FFC17A0225F03C0958D58FB48C1227F97CFA83077A80B
7DB22C8F1321E02323B2B35ACC70970BB2643D5E42795FA98F517F7665725288B185BDD1E689
7D8144C711EE9239AC7D1BD9F088CB5970F207C3319C911EBDA88C95AD36D7D067A5F208C710
A45948C0F980A3F308456F33DF4000117281107AC5B180CD420CDA53380EB1E273AA7A633044
24B8B94AF55B2A8987B4CA7414B3BB0BF744451165B32528BF3209653C0657838F7647183483
497FF2CBD25D4B3347CA7E29DD29EDE355FFAADF1FA2E5E7AD85E2F2751EAE55AEAE71A94907
22F6545772DEF80EE610C0137ADE25EA4E29DC9FA5B9CC9394D40D517F0C82E33CDE655BF211
2C0582E9DAA52DB442510429783189F9768FD17D6BB2F5AD9D48653D0C4FA24D7D62BC8B29C5
4E606519F688C0C4FDAC2C932ECC754A614B4CAAFF06F6838707517C4113D165797B722AE518
0E85064A229E57FB76DE3382F8A249770BAF8C86D1A24E1DBF1AD62352265FF90AE4F0B81CFA
F8911C0DD7A4687B35FCC2AD2238E42AC50D1B787B9A7230680457D6522B3F81F3A5E0F92952
DD775E6A8ABF546D28F678097946D41F100B6C949F652DF9DBBEF585DFDFF77336BD9375BF99
5DD6331C9368AD203469E2121DC214A1D14BC88E686F39F9232C97872EFF39CA0EA66EB2AB26
E7F6644ACE9E5987C272995E4D208F393AD8E1FA5710C433E63A42E96DFCB7B078A6B60C1BD9
24C7A6783F8BB420D070933AB28B2E234C49876153911770B40D646BE209F545323ADBC8957A
CAE29A936D4A1CA4CF881C27D212336EB15C0C478C0768491F4E4CCC84CFA9DABFC8A4E47DD5
391E8DFB148C2A42F5A3D81EBF09CC4E52936ED51210DC7D3ECB4CBCEB99C5507ED557D2CF1F
6B34134E6C1744777BD7E991A5ECCBC09FBE8AF6B584E2172CE683C9F6CCA44DDA58B04C8070
E6CC96A8539C2908871765B46C6D564AA445E377CA5E84CE2E389D83E8C4E8F6F63D5AC181D5
B788C903DBCC02068E09C643213B1DE7DB1E3DE58F85A96DB3B83E4A0B703373B6EBBDB872FD
DF8FBC0AAF38C93D0298E227F22043DFBBB65ABFAD3E60E40CB69F108F6179312FE251430AF4
09469F969FDF4D4E8543D1462753362E46F6E3F38F6B52718588694F9BC81DC256195B089C2F
5A8B8AE47E8ADDC1E169ED031E5253206C31E6F547FD3C9FD7215D4600FF361FF6BA5EACEA00
38803DBA4E660723A78E36A745A2BD809D613D86B53AC9312B11261F5EC792FDF2C1AA5D0BE5
123E11F433EF92635E0DEF412543B5D6011A9F724DF6E86366CC80359B4DCD7D393BC9C95B89
1FDFCB5325EAD88F505FEC98D957045D6EE85F9BCBE73D6AD83ADD0BAAD772FCABBEA7358B5C
82A5979D5ACC8B1FA26F27D2DBA6C883781BC4F6731E3504F408929DF315CB0EF99D6E4B0C1F
9B08F3B16B8AEA8B5C15DC5E7ABC429708A688707B89EFF5773C10AEC71FA3C0737056262619
D181226B9A0B509A73E1C70F55008941830D7193824935426658FC51377A3BED40D210AF4126
0C6BAE3F8631BB14EFD73BDEFC21018AFB810EC4E75E946A361681F4D443CDF18E9A848B0373
413B81379121DAA618C4DE6062974DEED48677C09C7A0ADFAB183C0D8548F668372BFB722337
CF20E0F19CD0CAA4375249E4E1C5DAB674CB6A1DFFD39C3FF10171257BD7E2D4577AC2E5C80F
D66AF7E2BFCAEF05172C72DE8533D61A8B3B77CA23E7BCF50CB351911481BC73A1C780D8AD80
9435FEF402FE31B76AA8704EA4A3D9246E2615C649D3F36CCEAE1C6C8C6602DADDB63BE9E7BC
7EB204B35B2930A3FC55463AE0080E2866608A2BF156BC00D140FEC3B04BD9675082E66651E4
F8ADEF53A14AA912EAE3FD16D5E29130F3E51C9E19CC5A37377E6C5906D73A88A30EAE6DE570
D45194DBCB048D024A3E803A8BE2627D3C8354DB7D844FD32F84257FFE52133E32B1B8407F74
C0FFBA764F329F27861DA3588773606DDC60B9F3A8DBECDD16BD8AEF5DACBB5E88D44C3659B5
47F18C454F35BA8DD7A9EA6564FD726D9C0B7BB9340A443156058CADFA37C1909720C2A978C8
F431E15EF229567139F9228B912E25F2218CAC594A08CFEA15171D72F978F03A49B4E3AE7866
B9960F79BF1D6FB5608F51298538FF56F9E0F403C9648D7015CA1FEB4C560442FE35E8E5D31C
646B0637F9EFBFCB256D2C741A23403D88E9E0486CB62CF90AEA0AC24EA5E5519FD4A86B41E8
92C54931CA061A4C93821451825776CC26B3409D8B3130C62D872A48A67560BE044F1F1697F0
6C0B5A11808CBB3192F7DE26AB520DF0039CFC58BE4EBF1A2AECC882CD293B87771306E3CE18
794A75AE6BE391BFCF0B8A59697CC507CF2C4A456B4B233FE209AC39BBF7155068C99CB2BE25
F0B755960C54ACD21CF9651779903E1C8E7AE7A5853BB26AAF69D43916E1560D54E40A14ADEB
ECB18CE848C151AAE3D16794D8C124007818545F022EF2A1EC7EA7490B556E1BC7876A46732E
61F514848A196E5FBD4142A341A52FB55AC8F5014791E5144CCA96D3D2999B3D683D292AB86F
C5D0CE9D55763D9DDB5FD6428B52423AFC22AEFC7F5FE1A1B878A0758CD4E59FCB099DF6FB95
F29EA45BCFF043D707D570B9F316929226BE1A54B23F28485A9DC8C809ACA0076865019DA221
9AA9FC70628139F8B8BD64BC29C119EBCD23413D75931262FE53664EDCD93DB31DCB25A2AC09
0B04A9EA8CF7833E34D1FDC26B3EFE65C086233A1A1A1C1FD5791D1F358019F7D098EA72EE27
0275CD522E72F4B8C5BB06C78224BE8B8056E11B2513EBFA09A0D155630EAF2AA4204F77ACC4
AB83C205DD0559DDB46FB0BCE65B16578830BDF37B3F5589CAE730FA6A11EEE8E6BAD3125F59
FEEEC295A5F2E05C2E3B6CE16758A080C5B6878753C7182050E296B3FDD446DBE10F9FF91E83
8B4B4BA0034E134827F941EC393CBC54111627B9351DA460D2A6D5D81A6F6144DC5A5638ED70
171594956A838661237D07D7DAEADEE51AD0F09771DB822299265AC292AFF7C49D4ED442A685
106F25798CF38FC48D5EB13F821A7156C850A20E9CD8179702C91B9BF425F370F5479CE97030
F369E32D2930658C7E4E6E4DF87A4EDACC66ACA3B3E6502F9CD086D9A10D9AC7B96C817A7643
7D9A5D653D6575B4FBDBB06510E996A0DDEF3E3012E9F948A464CDC28A352F999DCEBCD83B74
039531F46A7B43EFA9012C20ED0DEAB569F3905BDDE917BACBFEDFE88EE6E9832F040D84F7CA
8AE2E519A53EA988A3BD0CB16D3A3292C27EA51BCE3F84CF5371A7CC10512DC5CE2FDDBF7453
36B2A75B056FBFB763591481BE5D6BCF9FBEF914F1DD1A1473F8C8A72697FC4AD66AD69AE74D
A230EF274FC148E45BA67E61919BF46C32CC3D8B2E2889446E203B4040BF3FADA3AA9408F5CF
074C25F1BF20FF4ABB074592B054BA634BDE4A8062F63DE02CED708FE3A39085EF04805C862D
E1604A55CDD7B282FA910B3035FDB41BDC171D3D0781695DCF2F9DFC86ACB8D3CCCF32C83B6D
51C6A87FAE0BA5B527041D3B3BDF74C9545B0E9F0666D0C35F0C8FF84384876934FB6FBB6CD3
1FF26C386C1BA290D6C7AC672EEA424C44D84F1AB18D4FA41A7C8A08592733067371207EAF33
F13CFC4DAA1F5CC16F5D5A919127CB5E44A3E1911947C6C4FD86F001D9E0576221F41DADC527
35D0224F3DB69654A8C4B6CCFA9B4C8D6E92BD0644614857A06FD32FB3D98041794E01A39D88
4075A946FEF57FC8E566BE276BEC81F7BFBD5F545FEB3FE8B0C936E8D8C4128B418BC958EBDF
E5CA02901FB054B008626520AE6E64EF87C8B3D5A73B839A8EF115961B89AF2A71C6D0E14A14
1A5210F910ABFB1C7E83CB8AF3B2F4CB2B76A72F28E50F668948AAA20D0FCC6071E125888EF0
E1D420E18D33B4C946646348801AC42E6A89B117770BE3B067E8B2B9AD9F6936BFDE738BD5A4
568888D6C29A5FEF9484C735B766DC66002EEF699F91ABA21EA8778290899F335D794F691919
8AC9041BC1A9D875DDF91BAAAEE61A2BE1B80203FD7D7356EA2EFF7382F33CBB07D656F1A941
2D6AFA5144674E368CE1ACA4BFCAA3386933F14A3309E3E6B03A056CBA6852D6B6E617331F66
0B47B01BF60F0B2ABAD06BC2573FDEC871FDE62AD6A8DEDC3C8EEE9460220AFF30139A2FFB80
B222C3DA73BB69BC304B37ABC3B44DCBBB6EEAA3D9137DF428A56306F3A0C0F79F8665355B4C
B71A184533DC3D35F9BE1E5A9D5A5208AB5667465DC382C6B681C4C68101A0A46CE91B568D12
76822C069527FAB7329BC4D93E5BFAAB8C418904930E28259A6DB57F28C0EF1B85169A7B3BEC
52B4B34B51FE6F95141E9DC55B9516435D856ABDEDC26DF75B004E78492031CB5416FFE9CDE4
AF300FCAA08E8CFF6BBBAE0CF7E2DE402EF503BB6CCBE7FDA50987088460B150972676AAFCC5
C693B7D3983A60FB306094133197B58F916E5DBE3B2AEE1BFB570AA3CABB6B44153EE8AD9171
F6AE40FA8AF8821A617F1C62DE38961D4CF0AA6A6014E6EFA65D5586E83DCFA9C80481922DD5
FDA1B86CAEF2449EA5006EE07285D89C8A09F416DAF70F68D742B1F21D001F8D31C6A336417A
527BCA496CC4FD6ED7D001DE59A44326B53F06D1B269D4570980A13A5D7A8D48623235C539EE
6FC8564BF06EF0701AE2A8CB09BB3F72AF8634F11EC26F7383DFE8B72A09C3C335C60DD1FC50
3C4476FB0DB86BB858C3F148D23CD69F1FAA0BD8148B19D5319AF9711BD69C72072975C90951
E2B0BF44E0EBB7869AEC436BA402F32EF3CAE3D7624F2CB09A0954A8A802BE8F83FC29CFAC3E
0A15AD37A13D08FE3AB4C08201A3B060E22E4B767DA23E0063443A16E675C3E83867C0AB5053
7F126EBC5E276EF6554F31B89C4D292FBDEC55AE303F2A62E0226544EEF480DA35DE3CC606DC
71789B9538C10A9A1A87EFDD0127E243F306DF25F353AA35A149AAAC71B61DD55B30CBFD2B58
C4C93130766C9CC39EB1ACBF2B86822FCCD4E2B70D4FB4E6AC8E9665399BB5CDD3DF09C4C1E3
94B2B2515891601E9AE1ACD5C4FE9BA858C592CEC2D80D0F9E7D8450F9DF486DF1BC8B865B44
A2590CFFADDE516509752B659ECBFE98807B42BB1E79709BEE4117B2C36DA8D5D52A66738983
54422CAC1DF463CEF092120277146457B1C54BC3BF884B0077C97287B143A0A4FD9EC1F42A27
5D2DED2084FBD5026D0B75662210E42C25524EDD98DF8F374176EF4AD7C4218F529BF5772F11
5384F7B297611D6FC711AFBE43186630EE83512AEE9D61E84A2537C0CCC862E4B7A7EFF0D9BF
27C163D8C08E86BCF60B0C90E58DC43A105B044A1C53FA13439467057BC2C22E829FD813A0E7
A065DEF959F3193FB401D3D87AB7B54683D0DC3BAD4A530FEAC44A63E208382031BA1C8420A8
17C5C2583513633206A2DF738C9EDA192813B1AC108C04E05735234173EA7C14D12EA6117C1C
E7EFE367DD75B795B68A2335797EEC2EEA29A46EA272B67E38DDD5C2B6AD9E3B59C037A9914F
5EA5852A32818E3DCC65AE021F0D308080460EB7E1C410DB05C67E9FAD5773A93DAB602CBDDC
F9092AE538E1C879C0FF1D540EFCA789FC64358C5FB5F066BB6C30413DD3E90F5C1C28700626
DACD1E602793B95025D0D49153C1D36FDDD8171DA27834788B3B7F3F338E71DBE5A532D3C5F8
944844E70389B8392F8483A1F4E8590B4ABD566669E21EFC691E66D8703CA5D31BE2F0F5DA01
F3FF9DCE4CAEC9BAB0C4BD89621588F2B2A6A02E286CB4290B895BDFDDCB51316B248DE9445C
7E6CF4D18BF699142D6F5D682E0A069F378DD9A92C362D1C5E19C63C77F21C2C3F4462F60FE6
94533757F829B6F57D007843CB22217CBFE9F929D431E18FEB621E450AAE0DC90C10A3C563AB
88C1023FAA8BCA390E2597194E29DF540919D9382387F200F51D42F99928C9057A63777B3DA7
2F26C917054A964EE65C81D52E0914A7E0BF757B3B07B93FCBF4B9A39CE117683807965BA1F9
8DE922A226D564C8D19D48A2D51D7EEC607464A6D1F55724C33E35C905F71605B823C7A6D359
BFDBAAC68788CEBBBA77A41A52C10036C60E683F8D0316D8C8E37E24F4E80460BDD16F382036
7B6823B37F2581914221BD590825BF1B5A480AA077F44AAD68952E1BBF50A2D75CE489DC318C
0C21667E4E1466356DEF034026B65C27DF125B0B2246A1F83A97C75982F557F4739960F5426F
8CC0416F1F997C39D6A8C765FBDA9D9704ECBC480BD63FF484F5FFF2294BA6205B5C198BD5E3
5121E52DA9CADF557B4DEFDAEF6C657D4503D2D527D6E8FE6EDB084D6770572DD51A75595957
3191A719B4F6B37D63F2830EE459B9F323EF6D5F2AF830ECB7B751A27B6ACA11D8971A735434
B1DC2B1580148C18BD9AD265D39C52909ED8A57631D1D7929BD7A265A929D6E75D25B93ADB0F
8637753D79E886F451F41FC694D1A2A12DD723C045120848C3AD8E37BD1CFB38EE9B8A561A38
17B30DEBD83EBA10BFE5E07980F832FC4027985F273645E96C19C1A74ED0ABC0555C5ADF48B3
9147D72FDA940CA8D2B46667AECF1BBBDEF9892FDFDF3A38CC1C9FFDA83D9B34E680E088BFAA
8E39B049DF8110EA9937A43746B97DF67C86864B18F16797F266EB03C3B8B1D08FF7BAD68B12
6CB980B1D0E1955FD8FA8529EF4FA72E08344039EA5EA41F752DD3C66BAD15BC220091C5EE82
68F6EA9E6E684AC5A675CC671F6BAB30C56C6B6A4A7FD4955F6F28060DCCB5FB4B00BA077905
89BD05B2DB56564A1DAE5084E7EE33D2F7CB265F6D9CB904580809793B99CBCA69ABD6ABF313
028C9E8E71F423A5BC19851C5D5F0BC58BC526021123E83B4B5AD33694414290F4EADA65EC84
5EF90CC7BB784AB25549C28BE3140A289BD163A08D4221979D679A2735A34ECFF91FF7A4E58D
8A0DC2664B12E21642D84C06D5BCAFB5BEF0CCA3DD5443724932518CF9D855CFE752019F6B33
E0BEF54E64F76D88AF25849A46EC65DE3DA8007E4DE9D245A20D83598737B067070347FFD057
4211E0EB0552CDBF57EC468A63F9E9AF2C73FBDE4511BFBC66B074AE90371177948F40F6A300
9D64115977CA05F12A043A41AA699FC87BD04F022BB3BA9B856CBD12BA3D1800FCAD32251D03
E730C6F0872C28108F7E18A33AA6EB490FF27FD1162D9852114BCDE22ED85B4B67872DEA5B19
B46CBF794B9068953FB74E75B9F8F62B024238FE8D3D2AD952D6E0CB5B65C70F67AB2216FDD9
264ED3E1F628D7F662271053440C11D57641E9CD206AD034426AFC710C2261F2249BC53FAD6E
417C9FB4D2CF69EE988B19B128C6058B4400277C3334B3F56F922E9FBC79E0670A9EF73A1F7E
AD2782F305BC8C5413CB44EF6B8AAFEDA7BCDAF1B5BF749C3B9F799ED5C286F68E8D008FF9AA
8BE9FF76E3AD75D3A9D557283988016B89042FBF612D8AFBA25456D5660DA31C8DF25B94D2B2
EDB66BEBF320279E30B5483F99B154D0BA512C2069F2A87F902F283615737D694B9ADD65BCD3
0EF360FB82E9BAE684645619F3AF2296ED312C1CC40960BFB92EE2604DD0C13EC61F1941FDE2
275E59866B349848C9A18D032217807FFE0266E17AE653F41EDDA7E36DABEE2DFDFB197B9FBE
CF8C044B8792A37CC83A0343243942F8DD38EAC1D24B295F1942417A979959541C394972CD8E
8D7C675409F7D1051B1034E260390597D84E4EF8115623743F3094BD75A6D5438AE7AD128DB8
A496EE6B9B95C1DBCE8887EF1AB22E29CD17EEDA48B57206352EF7683794B8406906B651196C
13A6E9CE582E416B66786377EFA27955E85102D6730931D55A06F649340BE9612825635CB60D
9534121A5A66444FA51C4A09A30CC209F09FF64980E3E83F6B5DBBEC4AD830805823B784D9DB
4DFB87AF383760553AF30B5BB988E18C5F455A853F5D91D30FAB2172405214491B699F9C6EB7
D7368622C4810133D0C4B75C55363F38D6974AD27EBD5E480CFC0013456B0C54F65B51BBFF2A
A75DE3B262B05FA25AA1112DAACAEE9722FB241E0C4A966160EA9861FFF7CA13B4785A654E15
32CBB7118FA372EBD41E963C93AE5F9D4651F56508C1E89FA34548F72C946B4E384E9A08ABFC
BA3BBE1520255CD623EAA863BB988F635BDD9543B607933EADC0EAD5E119A11244CDC7470539
FD0E926F03CD32D9D4FECAFD3B6EFE823B3B05B94CF359AFD938575D2E733716C4E932C04651
0B0DF620E87F6F39B99D738E66D3383CC151381BD7611D0B44A1A40BC90340534512B3FEC4CB
E307498C773A253481105700216A5BE3CCE442E00219A0A3412B274DC8640CC4E759FD2823D7
F48E614391E5059A1A126D0A1626FEDCD738CDF6503D9B5C876AEA31298AA287055C7C24F20C
CE51BFB14B010C732F84A13B4A1DAC571DA1948668DB9E786AA9F4DDA0DD25528D785BC0EF33
CDDEFC80747C7EF0EAE30B4D687AC8EE8BE325A8E43627A2846CE3FB199F593CC83E320B8A34
254D8FFCCB45D04C4D41FEFB65AF2282D036AF8B614656EEEA10DE9409CFA0B3E6296030A0C4
91942A17CC43614A5D43EE2EEB2F2DFD2156100C452F1725DB3B7C649FCD5D1CE8080B148497
E8E57492DF0122BE6F1FEDB9B8EF8AFE2F119FA2767E9D451CBD637CA9BE588A0B876EFAB92E
5D238EA9C05EA6D92115BEC4614E05F83DCE5E70CEA9ED15936C20275FCF467FF3AAAC5DEC1C
EE55D9805A37AE0BDBD1EF8C6FD7A66D33E29828EB9C0BD6077F862206C6A1C734916811A2D1
89AD5A48E5BEBE377E000951BA74B979CFC719A03FFAA55A458146215A33BC58A42B6D535E4F
15B1525B8B29524188CC192F923DD9F8BAD3D203BE862F0193334CD2546385C55B5E5959F7E5
7B2C679D176823BEA88F86EB9F2FB5584A821329EC7328AC45EE0C992035D0A2EF6C71986E95
E0EED9B4390B39A3E9EA4A7D79E72936A0BD4722121722621A05662431444C0E90CDF102CE66
0D977FAEAE5DF63CB289D701A434F14BE992BFC1F336C4A43CC77CBF8843929A9A76CF768B10
0531FEA4712B37C97B1773A36E290182548FC42C2088D028A938C6A2647C74E5FADBB36E2AB7
5E07750A56F08F626B1A7C41F8642EEF04EB5F0B5ABF0A563C5DE626919FEBAD2B5297F58204
C5C5D2ADAC3D3136FD33EC5DDD98C3F521E53F836B21DC8A8CBCB6456A5D971C94414C7BB3E9
1F7AF3A1B6A7AAF71F95926B04C288C647E4A8080D91EF3404FA04042A584765523C6DB40FC9
6397AA843FF4BE0BCFEA2ED32B276328BDD1EAD7461E5FCE8D3AA3BBE3183A6B4F56A3D16A86
20010C88E82DB50E3F81DA8447270CC745B708E42034880C2632DCB85A4C6DA78116226D8571
68A6C9C73680AA674B1360DA8D17CB8F642D3D0CA2559B1E452B1D5641BE4A664D4528135911
0855E4F957762F536E4E8CCFB3D9CBEEA8C0E2AD2C1A47E42C878AB16E0DC111660F54349AFB
9BE5605C1F821BD68C941C42557C1736F7DB2D37B17D49C0A77153E99A0C99A4BDD125F3FD51
3F3A1A496AD3E17EF623979BBC10DED32E319C764F5DE1D1DA61C1D1053EC4822495093ADC33
FD9BDAB0A8BBAB65E0A24F30BE9D60048BFC29A832816CB6D543FBC850104B6322C14612FE26
DBA327A63647BB3C71D2F4ACCBBB798EAD3404BCABCFD85188E875967D677909BB797DF62255
5D7C5ECE1D8C59A5767257A08A6803E3CA740785FE5C0F3CD640E14CD8629FADD09522CE1DF5
7BB7A7E5C10D15A6435598D1F0D112B9784D4DA881251C245FEDA1104DB6D3A6DA5A30AE293D
14D346F93EF45D569959513063BE28C1048F98C1AFE5B1433B7097C0CD5711FB68CB54B8BDB8
C37046FE5505667CD4D4BC92F357D58458D5CB06CE517AAE44F596B83E7AA1CC8F17F14BC536
A6554D22B446AADD28EFA83E8469DBD1563695C781B030ECFCF3513E4029FBF6C109C79A9DB2
B5C7636ABAC5A4A282B74B359376DA840C62706EC64D7D41802E5065F5C3A364A01455BA6F2A
A1B2282E3B81CAF1B776B1D3863F6E02F68F0A91ADC7B9B6E3431142DA75663C9AC606D55514
7BA418E7CB2B2C379587218D8A7B71A4CE552C980E95DFD8F9AD95C429F66DA569FC5E1A61E2
DD1A6816FA54C7BB85D0BC6533A52BB1F4E4FEA68505D1CEC0751E21354412F72CB5255DE620
690676CD20596869071B48D7B8843E5D2C006DC2FDD4461C4AB3E0B1D16D16C4A270765AAA03
DBD1930B131CAAC997F41BFBA9C3220B972FD5B724582EBACD95C5C6BB2F8357DB8ED353D010
ECC7C586F2D25DAF23D8E38DAC200E1D3725D40D7A11F35EB7FD572AFF074E67C3C0A620F972
6D4CF7535741F9804885506F5D0311E349388DD8892B42A81058C34BC3F8E4AAB67590316973
0F448B4B890DFE3789EA67DC3A58A295367D00ED283E50A6B961CEA798C075B5FB914F6CFE0D
A8B183CB5CFFA5AB0CAEE6E321E08DF9D67949BF1892454ABE8E5C1ED844FA3668773C733F4D
0660575E2CAB415746B8255BAD4F8715A8F01BABA2F92DD593B7B60DD17E5CE0E3F8EBAE6A05
17079961C4A1F8B225C968BB3786581A277DDA386F3AD05382340EA03CEBCA7E0234444D7085
454B657F6F3CCADFC192B6350F241224686B23792341B6DD7A4B698991AAA3621EE07ED1B642
63D4905C112A0C92541E16875F7224B5CF48327FBA64FFED5BDAEF9355AF9BF50216D607770F
A79D33FE90BA99787F0077D19ED0E5197C5F3D839D74903D47C958A58B36E92345E84595D971
154489B33A584148B4E0EF976A66E955F8763052B5444177E960EA6E6D3802DFC402DCE6F405
4BA3A9AEA23FFB106F82285D1BBA6224AE9A5F33EC1901F93673D6CA54BF0F096C628A920C4D
97F2B78C010453F2A91798A07A9C0AEE9DA864044C6FB492483C51D4107663289BA772B77175
7603F4A3C5A862D7FBAE1467DCA7792A2E56DA65FBD8F35E67109ED12E04069A32368E9ECF65
1C5134A06616035C9B784B900A7B6B96FEE2537C17949B4CD471BE647B50A1BAE48FA28D7DCD
F8878B36226EDCF8B39F49AA35BC1AB0016A23CAE8C8BDEFC783CF35E43F76052CAEB4751732
6652B03FC748EBAEFB54FA2B5E0CF3E6D07A9AEBC3014EE2DF9165BF63253FBE3D0FF297EFF1
0E6B6260AFB6B09B6CF522BDDF10C077AE16ECA5B327CC6876DFDF38764FE0E7FC100A4A773F
BE2EEAE1BF68CE9095AD0FA4B465745E4F7B836AA7C59DE045ED5F9D99DDA77A7C956395E9BF
0B169AB8E649A4FC66954F2E65342FDE5324A7C506EF568008EB73D7575EF5B796A6784113E2
CB3904BB51B5EB93FC0960E6A5CA6A8DC3F7E8002A7272414676B237D224BACAFC8AA2303EDC
B48CF50FE71BEAFF551831C166BA538041D7F62B78AF227D153C673CDA5D841CE6F168DDCD8A
113AA4DCBB5118C51AA70961BE08DF8589595E096FB341AB47A1EB7887B0B430743E4AAC5348
E406CD325C3BF7E838707AEB3B058EA17CC8F103B2222A426B8EBCB6FE7EC44985808BFC64DF
DCB59B9C8543EBFBCC295A6945825BC2A3681C161E111F266DE158776EFB087C67A29373C7BE
DCC24272E4B28B6209CD78FACCD729A8A5EFC68DBC32F45799C581FECCA978D24D7E85B22F3B
B1926A9E9D465B00D5CE2BCDE26E37A91A212EEC76F7D7C43AFEC26B84FB1203FB9EF604CB3C
BB2847A09C2E04F6E0F9430860BA6837C18A449F9F96A51EAB42B1936C876208A61EC17EB92B
53CB01E1226AE96B7CF57ACADD4D2D76356EC420561A4CA88F5910263EC9178A3AAB165B15AC
C2AC07F908E3B6F37D88BBE780AF15114D8AC65D95110BC8BD9D25C7DF3310933D9625BE765B
14D1AB5032EE9F7D6FB24FA2AB57561AE1FB564D8D2705DEFC9FFAEF7303A99523DBC54B9C79
A20D5F00A96D5A21D2B4E2D1FBF36AD4440D6179F5E7E672E7BF45B6FF1C0787101223E91C14
8DA2AE709B7E9C6F576D1599DDC97DEED39831930C70CDEC4B47E899C3950D9D1EA3C94CEFB1
8080C6BB9D46AFFFE13C4B0FFBF71AC75C79879437E22E634602776DE13E175D9EC5FAF508AD
F4D443EBA749BB4B50A1F0808BE0519D977F55024212C4601B86C2975B96CB8123412A33F762
9916648A8097A2C58AD1258520D987CC57F712BE770BF1A118B56DB8AC89A3050E62C98F6D52
09C2A668E8BF541DF27DE2500994AFFE9894BB56DFC60D8C7579953269E44CDC3E2B63E5C288
8DADFFA3F9AD060D67A1A94599970279B2D45DF85ACAA6ED5A6B11A809C9E067739295AA2DF0
A9FFE09F07574252FFC8FCDB39DFB64B29607038CE4D6F0D7B84AAF5281F7414998398FEB89F
DF598EF5B2D7A617B373D7BF1DA47A7F9ECC5952A39A71B1DDAEDAA45DB4839D36A7A60047A2
1EDC798AD8D9AF7A8580610CE3A96A031A0C7CAEE7FB68CF51EAE29A899AD15410A692AF4CBF
CEC43B424A92BE2AA7ADFFCCE93AA8C1886476B1A72A4E9384B2B59BA5AD1883654672C5A93C
C2426959B1E1CB2F820A41002A4BC457D79D46D11697CF0AFD6B7A23B1A9F14F6E1166D59F99
6162243BF998B1C64CD3DE638187097F33D7C1D23F78D3392C9A9D260281045E264C342EE708
FE86466F6F7C1E8E4ABD455226A535236256F2056D5C6EF9D91F340557FCBF8393CB982A84F1
CF9EC1EEB361BE41FAE829A468459E5A995DB5E0FD1AC9EAA687F26BD04216E7BFABCFAFADCB
AB3A8BDABFBBB7BC47CE9EDAC7A148E1CE35027D8A5D573B13DA6FFEFE2940EA94C94B4903F6
A9DEDE03EE1723057CD83CE8834A3C8A29A14582CBC930990DCDFAD1986895F348036656FC33
41CE6FD4207C17D5A210ABB48372E73E5756A7E0F50132826FF9EF97D56530EF705944ED9A4C
26EAE0F737A50ADB2CC9099C90F2D54CD103264D93F4BF6B5A9C7D837B2C73C664AE9BF08172
805CEA546FC3EB1C71C68458F8153D8EF41ACA46BC314BE963A921196BE22E3162798FFD945D
93893BEA902309D7B2254ED921AB8C480EBAB7A389EFEE5694934D7FEA330B7D98DC67F13308
A73A39C7A9C87CDE598776E51CDB03C8E650DB86749EE8324BF66D1435EE53B1B7502533982E
474DB9F6A0BFF64004AD995065083A78845A4EF2755626CFF4D26D7D3D7FE5BFDC5AE420DB9E
615411316BC5AC1F5986DDDE4783079DD06DB4C9D2E28E523C054F741485CC99E9238B1E39BA
CC625FD94ACA6B54605C3273C142805D0BAC9F39A99359E52BC92C0C779C4A4C10BBF95DE79B
55CC736C80AC8F6F7CD6D0A316E7FF1946E15F41CA106A02BDF6F33C2B83016C121D9330A0B7
FED025FCC47554B50DB8CF7800DF1F33D7D5D52C2B238F0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmr10.pfb 0 0
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
 /FullName (CMR10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /Gamma put
dup 1 /Delta put
dup 2 /Theta put
dup 3 /Lambda put
dup 4 /Xi put
dup 5 /Pi put
dup 6 /Sigma put
dup 7 /Upsilon put
dup 8 /Phi put
dup 9 /Psi put
dup 10 /Omega put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 15 /ffl put
dup 16 /dotlessi put
dup 17 /dotlessj put
dup 18 /grave put
dup 19 /acute put
dup 20 /caron put
dup 21 /breve put
dup 22 /macron put
dup 23 /ring put
dup 24 /cedilla put
dup 25 /germandbls put
dup 26 /ae put
dup 27 /oe put
dup 28 /oslash put
dup 29 /AE put
dup 30 /OE put
dup 31 /Oslash put
dup 32 /suppress put
dup 33 /exclam put
dup 34 /quotedblright put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 62 /questiondown put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
dup 125 /hungarumlaut put
dup 126 /tilde put
dup 127 /dieresis put
dup 128 /suppress put
dup 160 /space put
dup 161 /Gamma put
dup 162 /Delta put
dup 163 /Theta put
dup 164 /Lambda put
dup 165 /Xi put
dup 166 /Pi put
dup 167 /Sigma put
dup 168 /Upsilon put
dup 169 /Phi put
dup 170 /Psi put
dup 171 /sfthyphen put
dup 172 /nbspace put
dup 173 /Omega put
dup 174 /ff put
dup 175 /fi put
dup 176 /fl put
dup 177 /ffi put
dup 178 /ffl put
dup 179 /dotlessi put
dup 180 /dotlessj put
dup 181 /grave put
dup 182 /acute put
dup 183 /caron put
dup 184 /breve put
dup 185 /macron put
dup 186 /ring put
dup 187 /cedilla put
dup 188 /germandbls put
dup 189 /ae put
dup 190 /oe put
dup 191 /oslash put
dup 192 /AE put
dup 193 /OE put
dup 194 /Oslash put
dup 195 /suppress put
dup 196 /dieresis put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA0E079529AF9C
82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA9351BBFB7CFC5F9152D1E5BB0A
D8D016C6CFA4EB41B3C51D091C2D5440E67CFD717C56816B03B901BF4A25A07175380E50A213
F877C44778B3C5AADBCC86D6E551E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206
742D1D082A12F0780FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC54
3273C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8569672CF
86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E72907924A5AC880DDED58334DD
5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A2255C050CB39A389106B0C672A1912AF
A86A49EFD02E61E6509E50EE35E679448FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575A
D61BCDF42E2E421AA93E3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92
FD60AD26D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24D36E
FE7F5C4E5B5C610DA63A48E26BE9FC0C5FF9236372483C265681DD26303B962BF46BD2DDD7E5
AB42C609D12E83D21A55046C3E50E41C605EF2AFF78F91B20F9F17D90DEE6171AA799ACCFF77
E3E4D9793D1D8B51FC0E8979B8E2752C9E72A51720C018DCEE02736480DAAE55F5F1910727DE
3B9FA8D0BED2EFF3BC887AAD72838B7A894541D923D3D253139CDD747B185238B79E569F2448
3C423BA5EA55860289C4CA80924224A52B8E68CD15D47487340C7FC925100F08A0DB63EC18A3
2843C299201B3FFFF69059B10CED881ACB7D0115D735791ED587758150742B0A23AF8FDDE157
C4571039D537E52E2B4B069E0AAF299D4AA3A36EA316D2B55479B72886C76C1A876D7558FC2F
B0659E156CBB253B8466DA34ADE7B1506F8DC66EFE35DCAC71451F8A426056E129A9CF21C41D
7DEB5EA6DF7A72ACAD4BBCA3E4081320BD7B37609A4DB67B5DF63E25F490B8DE0666D17DFDD9
3AD510ED7B41BE8B0F4C4B2C1348E047C61623CDA21EF0E64B393ECA207B812A7D6F49CC29D7
0529F6829881A092F98C934D70CE3C5BD2E48C3C57AECF77B55DB937230737C3AB65C9BAB8C1
BE847A4C61D1C0BDCDC192C225F1FE28B68B279CF3633287286CC18FC886E8C711E558D4961E
D9B901920006C48F8795E1947EB63B4B6A63BDFDD1DFCA3E9A354C37AA33A24990FB70FD2D36
9D1FC5C89A6BF0851CAAEF43215B2201EC5E09432D1DF364F2EB570F8C001011A4FAB268E40F
B630082F53AA19FB8C3410E049F1F8DE85082ABDB8ECB5FCA536F824AAA39F968D3585E469CB
5872794236771BA5320DD8CCF58E545B9850865AA31607B8C7F0EFCE4A0B2BAC4F48EFD4B599
FC52C4B9FA6AD36E0FCCD3155B874D4FAC8A02AFD4CF6546842E31928A8806EA44C7CC03E03F
DC1AB9E47F4D455F69EAF32D6FE4A3070A728B225687761E0F2D48138DFA3B2735BEE1E654C8
A6AB0E136D4DABF9B695F5EA9BDDE81619A7875591A7F39B6493FFEDC7C4812E18C36C85EE59
7B7FFA207AC57ED8187F13B9997DF098620557843F7F9994FC561D70554B8509C137FBF881A7
7F86460F53CE7BFBBC9C94167FB3D408BBF95E7672E3DB32F8CC2BAA731D6CAF1675DDF0F055
62773D9F37E0A473FCB74CD67483B66EC7B42CF841625B26A32201C05AF07B1E0E3687F260A0
4F2296ABDF3E5DF972AC56470AF0B4538C0B4ACFFC2C1B5309BD8A2510D228D9F41E01783E63
AE1CD0CC827F15EE2783E818972E418C75B03C1EFB4D564A6D26FF8C8B0FF6DC625647FC5A8D
9D9EBC2B36EAE9C8DD412D6639278F6432C3D9AD4C6C478EEEA0D4A9F111908A8F37ADC0C4E2
8BBAA0E5556A8ED46850A673851DE8991338E59B906EE8506203110B315D40EF4A59133A6CD8
5F0FF35123176FB801A6464FF3F77BC8828B782C9B8A18416B6CCFE557DBF14856A0A3162A68
723D538F95BCAAF9BE7B369226A72C401612FEF48D59C927FD8265DF9D29026F732491709CA5
0B9FEADE55F701A62076ADDC0BD478EEC530F9119D2564C87F445E9B8C529AB3A207986F75DD
CCACF3DB48878853A1C3B27D8590E81CE20F1271DF019E9C2CE34847B2B69AE9061CEA57BF2D
3CE3DC261D5955E6B3BF8B933A345B3BCC7A302F7614BCD0C2B6E1F3078271A85F232A5B3B9D
E2E7F048CD36DDFC316467A01866276CFA8D0218ABCFB0C543752EEF59635F48F92EF7CAF035
C7363BE7436F564D1B4FC37D47A2096C886CFD6EA73DFEAC3762873E9BAC2FAADCDAC6D83D56
E4EEC7DED6B1B99D6DDA7CE8C35C6FCA645940DE0150CEAD4B6463EEF7EDAA509B463D0DBEC4
3E7C43F9FF16B6A8688723855B9937FAF16EF89688373C84DCF5A57CC309E14B7F72528B1209
E7F276306FCFEF4DF98C72F7A276840EE2280B88E8F20374B964199B6CF1B47E8D9125A85815
32FCF9F45E9E3491A9D5357D37B1C23A2E5AD04E02D74AA80E35E77847821B987E7C4FC3F037
C9E95CA50067EC8F16A8BDDB8412E7954BBD115147EC48539EA6BEBD1F3885A4D12BA3233833
7728A2C3A8F496B5CAE086585EE6ED1B20EA3FABD269D4B786C3EE0C3D9BEE58001D4D174AF4
E87A7FDBBE4C3D270E2689840E4C4B6113BDAB8878126DD066DA8E0251A6AF2EA6458214B249
809ED92F4EA6966D40D4596D86D6F05921C7814884501DB8A7941ADBA5702BF2B0B9A852B7BC
8710087974F2FED4A8D7B89E643A0950B0258A41A74AE4F84C004F9536CE1E3DE91E8E050C97
C32B0AD953D0B8F4935235F55CEB7727F9EE6E45931CD281D31F5E2A52772C4053687F7A2D14
B2F7815F8B316EFBE767FAE0636F44BDB1BC9B27AAE79FDDC0038A30C02B86D0E98B16CE7A7E
E8BE6A3DB03296C5B05A51FF470991B74CF893343BDD4A2CAB4B7E28AE4778B42EF31E789CB1
AE28A8F0B112E399D73A388D3FC41CF8C2EDD7E3E6EE21BF01A833214F2D2E278B8F701B9A90
68A34A78C34FAA85E60242233CCCC5899AE65F026DE91A4F184F0E626721C4CD3AFEB6E9A1B4
AB410B816A49A5E38B4137E36B95E2FF0EB3A3BD4337137096E4062BD7D13C5137194CE85A14
15C9F73095EEBAEABF2929BE8F203295A2AB6792D1031CDF4F96A58DEF44B848B687EEDD4239
A6FB1944CE6527523FA3641693B1C128A675F98C67C2DD8A3F1161A1EE2A7BF7598D3A9EB560
A94B4E8D58D1C38BA3D58DDE6D54A5F49AF3E03B9F7FB23617001E0CB03B7938BCF7681F7BD0
721FE1720B723A7DA0694B9A7637935655C5F147BD7FA15D1377500F7F192337A9466A74A591
7FD51163EAD5F26BC9867F2709EF15459F35710EB47B86CA032AECE26ABA9F79674E30E0A8D1
AB25099101BED7FEA68EBAA28641F5EDE00D0C15C4FDD500DB5C9BACDF18B320B14F7B836A06
3BB1BA30D382B2A8F3583CFBFDB1777AECB306948ECD8D8C9D3ED36FA733C15E4059215B3838
54846BF6F7596006D9DD1CABD8E331248AADF6B8C206534BB545F44FC7E4BC9F3761E9849CE2
8C0E9E5D99325FE771F931288D989C43138A805663A9E63F4738929B5B03123B6BDF0A135C08
CA3AC695B72E92B5667F6F0FC8A7079EEBD572CEBA5C21720961611021E775AD8DD8E6E7C4C8
5969282A49464913B85C47F7D3A875548FA3139CB5DBD78FAFC6B7074E59665A568B1AC49456
4515A3D8B64AD0B6A4CC6A186F35513289519403E937BE3FC969A10ED68694E705376B718056
047C006B73FC88C87B3D84BFBB15E7F874CFF12CC2E8E4A8B70F158DE0C15B4C5E933F0011F1
F654D33104AE72543A11F588F56D3ACDB8C83A5543C2D5B8B2561E56F53FA9749CC80D846783
80F55175C853698614FEB73B29EB8556EC0453A03AE894A752DDD14AD72776AB32D13D3175B8
44F643D04AD36A6B97149D9DCBD8B7F1F50554ACDDEB0C9AEA463A65AA6972C2C384CEC24344
C89DE7BD914549A9A3CF9139E94FC75AA93DC591977FC3519391677A3086B7F23351AD6B1FED
39E7129629880870D0BCB035C9F9BBAFBB1EB9A822F583439BA0A907B5494007FC9874B51CD2
7802332C3B411BCE6A544153E51D0458E56880367EF4FE6AA8A0970445FAE112A40F4C48B943
46F937F35AFBE27C244220406F7E2DBEC532C1FD99B713580ED318951F90D0E88314639ED7E8
B886191D6DD3FF0DB44BFA5A7BAC6102783EE01911E05DE270D41AFA7944FD6B420AD5BAFD3D
02C95FF77D231DFC977823262827BE5B601F4F3702A528BC5BD4D87A789F6C976DF65C4103A3
5E20352801825BF2AF07300F359A673FF845E87F391C058D8729F7109B379D8AE27506CB3DFD
16F6298EFC66ECB27A9D5F59749E6264180B0BCBBD4BE0B13D8D4C3344AF3D6BF4B73C29D63D
C19208C751F5F319888D7D4049A29126CD28E985FCA986CC33F2667F752A0B2F175A99F90D31
906AE108E82F5641386BA7F9B360BB3BD5D5952BF2167CE10AAE9D41FDB63F4E69873D633997
2A2B5F6007ADEA075C8EEC10C090C74647098439BE7D9F48A9F79C2104252009B8E6C44D7508
192D58DE42B0962DD1B7CB6255F4B67325A456C069CB52B905EB491835D92452D0781CB7E656
72DD43D6D3762E0FFEF0F1C8D63163631A71A2963D9617F96A0C984B7FDDB933456055829138
6CFD35E9736A942C7AFEA53E1E4937A5AD56E66E88E9A8AD46C70349173AB81DE285A54855B4
16DF01D8CAF03615014386AAA4C94903D6005DBABEF8F9BF283894FA8C71284293E436605856
D3C4C7859978286B021F0F696F43A1EE8F810E15C7882EDAF03C5B574BA492AC5633BEEEA3F6
5B521F12FD11CA4ED32D0B666253CA496DAA243108947445C55CEE5252335E6C43FC5FAE3524
4E811F81009F514442DA21DA2B4E9608BE8D594520B1062A8AE3ED07D00F031D443D14126998
92DA2B252299EEB4D9EA8FF3B9D785B4E490DD6EEFD55A77BD924AD6C289734DE20F59885194
050BA0A60182952CB292C18BBD65B784C913C0DD1E131A31AAF2C4892C664EC5BF16E712D342
25079AB4361F4C7AFA56E499CB6CCD1FBDAD41B89F66A8A82AD7963EBBF5B19F8352241C0B5D
F1E13343A4955B47E88DED9E0757651AD5D059EA86CE7DB05F95BFA92DB1D1F511AB1018AAFE
3BDC4CD6379D797B1E7654E5B772BB6C910C7C405D0264CB1275D49937C3005744092E5BB3C8
B40CB98F3BEB519AC3D3AB76202AF6E08D0D43DC379E2583342D33C3323A5B696759DBBF1B85
F638403A43113787B0A5E4F988123EC6EB768F4A745FDB4FA0DA70D2F610E6AE1CCE290C5FFB
6C4FCBE5520B43C36E5F966F4355E7D67662B4DDEA480E0FEF650C65A0F0660B608A61C623DE
59F75FCD9E5F47BDB5800E2A49446F0B142677694F3E8BA4257378FD9FA8C8A572C6A8EAFED7
9325804D4993FC0A513CA992F8D4A8305C2394D026DEF0262D173D150B2C662B9B9C6BA7CB2D
04CA83B136F9162C42EF686AD2A31F40066937D6A04ECBF632F1DDEE29F414DAF945E0FADF1A
231752FE7500E57FB0E22622FDF22E756DE999948162DF7B9BCB4587499613B6331E03B79723
09490642DE2EC4F72A1895DECE59BC117ECC2717AAE37EB52F1167965FAF5101AF2BC1C31CD3
DD17596937BF73D697F59A11000FC8FF94912DAB48134B39567817D9419FD0D3B231297D1723
331EF3C334582CC012A78CFF55FB19132D91A74353632270986AE645B8F5C0584564EB8C71A6
E5FAA52AB96FBB210571BF6C1A2EA223EBC7AED8FDE47AF489A429BCEF68407F3399A882A567
E70B4FC69AB47D6C05097DEB3D912CF1591C6B82CB6FEB1F72C135A4CEDA64C4AFC62DC84C2A
ED0B31D0EF7F8962DFE28D7E3A91314BDEFD9FA692422529A6679F184537FA92BE3E429C289E
9A1834F07117A0E7F1F4FE6862870165A43BB9E430ED07FAEBBEE0469EC79F9F539CE25DF296
5963D2268A0ACD1FD54BEEE6AB200D52EE7CA4D49A747530252164D6EF5430E4E0242EDDE595
5C5FE7E3837CAC40ED2A6FA8F9801F9986471EB57E1F38CB3A82A382741B4ED3A575C4967186
E99D2C3C121B4C91C8D50B26CB97BE9AB4BB224BDCB7135145914B06C9DE48DC53A69CB4308A
5491627279AB90AB26F6E14DBF51AB0E4A9BEA64F916F1643A10BD91FD365F8B774E79A8383E
3D5D5595A92A79120EEB341213BBE6EE21957F6D46E654B9FF6CF65EE8DCFB710E326DCD9A48
812096D3602D5C2037033B284F266A229CB1641405594DE3ED1FB6DDB1496EA0598E131D2C58
60474F78CF937F03C5D1CC29170D33A7F68B8BD1A601423002DD3106620E6D8C423F7AC7682F
C2F4D97189EBC2B19E7DB5ADCBA62D17A0D4A7A1D4B3E727687EB9638498547058815EE958DD
81DD937AD19B1492D773090B1324F18741EED75C8CEA47A75119435FE806E82F214852505081
F02B43ED1BC67FC4D1F5A6686665035B3612CC4E166A646A786A7B0BBC54030252338E496929
B6A54AD47CA90CC54AE1AC275E523982ECEF5FBB741D00B65981667FE2453FE3750EBDE33B30
E9540172CA5D94982EE1E99379D6CE06F82B65C423AA95CE42CB0730C80AEEA34CCC827AE92F
AD3D38D19B5966A48184F1182A47397C12475058E3CD011D0F0CE4DC30ECCA87406A1F1D6998
93163D8D8E604D0B987F8586F4B746C38D4BBAC2257D0D6844B31D532F66F380438844D45AE8
31226DF075EE6CD391A2DAF954BCD4E03E9981F829B0965AD78EBE8D41CFF2ACEE386DFC8037
958959BA8B872A7DCA0964DEC6A7459D4206DAE3ED201031DB2EA02819D3C12DE56CEC8F9A85
8BA6B0FEFF091F827AD6FC5F117904B0DCA0AA3173FA49C62BA5A5CADB35F6487801660CFF3F
D476819B149294EA953DAE6A4D55F9D3AAEDBEF13159794E128AB0B557CE775D0429E4D4B7ED
D061CA689AE0745A19658E04C2CD5DAB627F801B16A4BABF2F8BF2EA218916F82F288104717A
F149BBBAB11637311236B540A9FD344852C8384B87FECF7D233F8E7D0B88AB11EE92991FBBDD
ECDE4765C999D2C4EF8913C1BA706FD995B05199361E754E486963BC9CD80DB42EB766C43EA8
EFE81CCD0BD8B5523CBE7CE1A709AFA648817ACD9AF2985E285DD9DEE2A4E0C77B13BB59F689
9BBAF1038D5A0660B358015381B30731415AA81E601F8462C7F80D1171D0F9FDECA392AEFE4A
828DCDDFA642174AD8C48CD6F3ED28A25DDB0F768C5ED07364011A5DABA61BA49AA10A71A260
AAA7D5DDAA898831B388B738A836529A8F7A123C89D9E36B65DDC7723843DF8F6EF79D8C7CFC
3DEF3B8AD39B3E4EE0F127100EFA9AD45829598DF39441855FBBF98D82008A7B64AF0A919051
B5F4002D7B3E4778ED61B9B4A0BB41A1E212E94D9244154C459D9FEA7D250F6A789D944B0741
35F16C063ECE58708EBB2A2B286A71824017C08139CF73320F32127B2633140570A13420256D
BA85988640CDE5AA4A2448CDBF277D74115B22A1380C54D02FB55DC394F720B75E4D7BF4799F
06D7A9742B09E13A1D9F9CE503B5666A480E6781DD2AC4273925E4733FD17B219B1AF8049B7A
F1D37327A28311208158CF2EFCFFC0F10D731E60C19D08AC9C16F39FB896F5B432D5463F7F42
75F6ECE30944D74888511C34BAC3ACAB64C7116AD6112ECA722456734A2D016A3F2B41D60A4A
97818C16224A70ECD13CD6CE5AF85C2FD5460C3ADEA16A3D222752729BAFAE276072CB3A3A0E
653458ECB394763865162146F58B4259676F8B661E90CAFE3ED0836D626266D173FBB4B4B4DC
6E2A0C02381114A761189F3C2B6436F6E437590BF7075AFAF72A5E1DDA9F6C669965C39D3134
6CC638D2C3C32B415E13BAD72C3EC9E458FFD5916E902DF3C0772DBD300126E3366CD16105E6
9C676DA925A2B9219284D91DA3BD49A7EE70E9035F12399AE9693AB539E16AFD38956234C19F
733625FC6FE892E4C2476717C6A77397FB210D86C97EBAC165F81B1E9130A49529F728E31C96
5BF2615123BDD600E8C775366F1A60C239FD3649D435E03538FC0CD4D5855E3FDE83BC432632
AB3CCE1DA14B6133155383EF6400CDE665C7DF79FBCC7A4425EDDA2704AF53CFBEA2046A6004
C94DE7AD2DBAB0B421E63B4A5F8157CA9AB9528E8464E6B8A2FA8B5BDD20FFCD0FC6A5714706
9194E00376740082F1317E62C5E23A4D6862F0EEA28BA7D1476F609C27A9147FA8C3468A4947
C8802818BAAF5D4F33C9E918A89FC415A0BA6147E6650E09640E1A5D2EC97518BF39E8864C49
65ED91E251C9B90166977C9390ABCF5429F216CCC8688BC3CCABD5C3EE7287DF9D4F0170546E
37FD69981864FDB30C5A3EFA3BF27EA7857D8237FE07171056BCD399B2CB1BE4EE0E1809D304
2B7CC8E67D9464402EF4A7BA2612F343F5EB6FD5F7DCD112AA701B8DE9E2F17118842C898580
1FE8179FA6618A09D9A01862A2AD4D40E8251B828B5BCA97C812F95A342E23C186DEA3A96154
096BDADC299C1DACE3EB09ACA94CB2B7F3EB519B7C209007D9B80347E971D8C02C24E2162E8B
EA9275E4F1DB6DA1915D4634FFFAC353D691D7781A15EEC3D66BBCB322FC0E5E2C57F8D74699
1808645E015E0632F38ED8605BABA3AC007CADF7984F8A0763A9D322E2ADE5F56A56294C4ADF
C4F456C93D7FA41CE8496C3CD1266992C9E60B128C7AA2C5C67C49B2D16F3CA00B86C57DEF55
F8D06628A0DBBD11D9ECAF2A50FFE89869F929FF5CA0B91186D308E107EB2BEAB7480E40C62C
01E1BDBEAF62F00E36C57355479178F345B1EB3B7E87807B32F8AA06F288848338E43DB2E6D2
EC92513659D3D113CA288DC767537CFC71092878E139B28407B56E33EB79B1D46C9F1196EF10
AADCFFE5D16393E3A6C5869C39C925650D8A62496EAB5C67EA1FFA3C85932525DED921D6AB2E
B62CE8DAA2F4381657E2F0F053DDCB0DA23B418FF169EE4D6392B3EEF70A777E892F5B7B20AB
83F907C8014CE6EE9C2FA010D4F11307135A11CD8C2E0F6EA93DD9F0EF162FA24EB17C99F375
C65348E415F460780114F9B8AE5DC1DC1215163B15A17F811E308916514EE8A0596D3C962339
6E5689F57D0AAA9E205C7C32C2724172E4F8F04F60FB89D5A9EEAC9E36EC07C05050A3E0FC13
5DC4C6B5CD8170E91DF79604744B30A2CD3DEB4B3A98274659361D233CED47B79BE91245C85D
E0838FB8478B1B678A8B20552F93E3FFFC77BC547B588C74F9C22D546203219903AAB916EADE
4D598287D5145728C12387DDC05CBB7F4138AEE81EDFD8C7A0CD6BF9BEFE017F4148FB0A1218
F2750AC532E975687D8908F985795BEB142DF493FF926171B0E25FC71A7437940A7A2192F9A8
F216FF2692C23A0807EC188D449C867D7B28D6D9FF15957194ECD03E78CBB9963A0E6CA8AEDC
E35163AE9A0805A1D9494A5D71F7F951F199375ED5B4BEFD88CA1A2FE45A37211C866ADA6842
53B00B122A6F0613609A399DCB43E5A857C0E850A953303447EC30AC83DF6D4E53F9912D53ED
ED956660DD356A02B9E177CC9360EA48F10601E067D8283DD1AF6ED132A2873ACDC2B3039B29
8C9D8BE918437C74889741A2D0A398F1BDB9AC7526DA3686A7C2425A36CF9DAE0FED314A80C4
D80AD24605A8892F1E20B401F3A783BF474B6BB3FC9B0D3049E24B9333867CEF9C81060EB6E4
442F00A41A4FE88655F94A940B34183F088ED7A1FC7CC863D116D3B956AA065922DC674CDD36
AB998F1B0C313619AA4520C8614D4FB1125CB75850283A44B1EB69C07BCB9DCA47E2A97CC920
F95A82E581DF07C3AAC37DFCFD05135054717CCAAF6D21D0E35BFED91C2D4250D3FA4115947A
C4164A80A4DAECE90B15EEE9289568800EC50781674DE8F7C00C0F17D72C03B8F77919CD5827
33B90F83FA43F8CEF4513A5FFE86C500FEC4C4F9E32DAB05B4FFB0432DF191F731A9D3463C43
12EA23A04F6D5B1A61944494AAA1B82268A3E87FEF0AAC3368C061A2D99F8C01DF71FBE3AFE0
E3AF28807251F21C60C2D90B32CA25B859365D6B2B5CF07A9CA496B034396FA9A62D337FCD12
8CF0D17CBEBC1508FBCE413C07CC76DDB6065CE54C6780B73D1C80C1C39BD569C07458F8BA54
D931B5A817AEBB5776E9526B66BC38B0CC969919E9F91AACB192B5ED4AFA254FF6C5B74331B0
27B86937D0CBF2548A4234FC70CC583D93547D80CEBA78482305BB4B41E36C675B171F8128AC
F24B5653E17486BDD41AC562AEDAABEF4AF432E653D414E66D4D6D96E18411BE5683EC4FF273
07585A40EBE145D69CFDF430F8365C103728D370FBB4808D45C0391B68AEBE055C6C66BEBD1F
6A6B725818FE8B59E24FE4A96A8CFA6D30120231799FD9C1D86BA34911BC3B14855A0B2A724D
F5D392965EEFEB5B0FD7EC8A333BD4B6D33D71003681B4A816B5DB8475241B9A4B4971ADB498
37FDE6E78E5413D9584C93C10FD7BE8D70FACEF356BDDD8BAB3A21534319E195268F9BAF756C
FC17BBEF95108334977EFF3BFC9E46172907F861ADDA6641747F70CA9DF38E72247B1B1FAE69
BBBB8DCF7D8EA7CFD6D7751BC88C67B14D53270F16B082A028299D3D1BAFB1C8042754FA8DA6
1C034EDDA896D6075C40EF8D4C06ADFD140853F2198AFB70CAC3EB9982CEB1FEB0CDEE2AB494
EB9595B5C918F0139932876FF0F13AE6977B58FB6FA47D6F8501CEBD4666ED5BA410F144846F
BBBD1DA827F84025A2AE5F9CB69101F8EFAA980AFDE0B49CAA9C5F0090BF47DE6BF40C68A293
E45BC33ED9222E7494D4D5CEF267CDDA36431BC8BD41341AEB9AB78F25AC668D4D9D531EECCC
7031C60418D244656DBCABD7D2EA53509E0DB01679962FEF31D014A75072611DD2F9BC3E27E7
87C1F791F74904C7106B6F889A79DE4E770540F478500F9AB17D6D7D312A06023ED8805EA5F7
4A9F4CEF09345077C2D444D224D25273FEE4DA617FBEB1868539CE185F8250A9AC16CC84825B
30917F04AB981658CA931F566369408B6673D4456000FC3AF3DDB0E876D4AD06B836D86A0F83
CD92467E3644DFA6D249F9A5AC91CF2523BFA3EE0BB5FF59A426B4E67FD46E6CC60C10267BE0
C0A73FB423A2A9CD97D086040B22F37E8FEBD4985C5DA5E0CBAE7B47599AC2B8E6C85C8F1042
D40A26EB05160829F25210BEED9B500C95D136DB49459A36D8F643413CAA66AFA724C97B42F6
4F1622F080E8B157F86990D94315B8BB9BE14305543BAF5C0E25FBC45CE084579B7B8B5BE131
A497EAA3C0D3C520C592414DE7150CDE2E86DCE859F1F48AC0C435151157A495AD42B58BF385
D344244F2D3FFBC6069C745055BE798D7F27093E1BBFCA3FB5185A44629DE29DFCAC798130C0
3D212332EBAC7D4168B416C54A57DC04B208AADFF22C3D0529A466C6A310A8EDA384F92528EB
B5E1D86F96101A3FB9F6E2B1BDFC7000C04BC915C63F74E0B0530491D6653A75931986234E88
77B6E206A4816DE5C947140AC48BA980CAE0C2175CAD88700F28B27A49A1735FF5CD8B8B2828
23639083B082EEED8AB079C134236C306ECA151A7994261CD73A8484BEDF8191BAD858B491B0
E9943D9E04323C65C3D953D33B634B025456F1B85F57673C6CE0154E162771496130ECF3D679
37717F6D3C7CA05538016F8BA6AD48DE3BA2B153BCC4EE3500EC9AF99CC01891CBB50FCD4FC6
91C48725310436E69D55F6A49B243AC3804A95D9212D9EA02F6C2264246F311A334984011081
7EE2E669380251066EC237CE4E2E123AC89F962D2204FBB9856CC55D2B72AC67ED0A08BB6271
67D4E375EC8EF90B570921B314C8B2A035BFA7760365EA0439E437091723377A30F5859DBD60
261D1B1A75AE2FD8888B217EE4D5CEE7ECD6DEE6E3D1420E4B71561F7DD01B0793031FC95853
667F27D8855EEABBA4CF4AE67666C578ABD872D4747775D5CDEB55A02C8DCF38067456BEEE0F
10AFD66B521A81B0712EB987DD429C77A1557B6107790BE7B3C7F55A79074CCB8F38923B7507
D06CE99A2CBEBFE9D7C5C32796145E4AEF1E3AE83A5CA481531D552BFF0C456200949A01730A
586032C8CB48DA6611E0ED9DE04AC36F1660F59683973385C00C78CF675D5C5962381487EE82
799CF60EF340B2A3275BFD4D5D2122AF19FBE59DAD06E735E446D77747101A53E329A14EAD28
B99B7630E7188B1F967A0B57292667580D6E121EA1D925C931FD4B42C3ABBFFECE5096ABE807
EC5B9C43CCC10B724110B2616D472063288C0E250E569220035EEEA8043A05044A6B0D010D9B
3294282F81CDC0EFFC4F500C6D063E85E7BE4B10FD2C50D3DC8AC54BF0EA6865520401E683CB
3270762C94158FAC11D76E7D12FC78BB19BE08FB8C4BD04036408E337BF3FDBFF6AD0E57D845
92ECAC5FBDD22ADDC8B4AAE9F22395300F618A5A5725E20047A0DE229C58BFF5C6870BE44580
2A30AF4A6CA65BA502F6F1BC4B458DE1B7088A802E49EDA9528B7D0FEB561DF949C0A25E71B4
15D56572FAEC8EAFF09F46B07A44978A47F7B7687F1681D10357522D034415E16EBDA5DECB57
489581725E961D50F182C685EE3FB037B16C389B678E80BF9C6B27CC903C31ACD77120454427
70ADA3FE7C6785ECE0C669C0324AA872B4C25CCF3AF3E0E78AB29C3C642DDC44F579E5ED4FF6
AAB873B8AC7D73710EADDC2F494175254B7AC925BB0C4EE70CAB7CADBF1D2497AA6F290B64EC
7551DC7CAECFC0B5312BFD58FCD53D79F1BAAC6AE3D5E4B896D55B67838F1E5848E0D9321ECA
275A78A6F00A223D81DFA4D891DD3CA40653DA235D8FC48C9A9E4F56B7C1F6C10B3AFF870DAD
B47855776E4F08DCC7F5875B7E8EDCB96295B106F4E0AF2AF7C74DB79AAB01C44E39621C8992
7735A9246458336C5E9F60656D2F757B0D2DE6322DE7913C696053D24D324EC40C52F28AA677
A758602DCA751548BE122F6184FEAABF7AFFCDE3DC72DFFBE3A69D52F7A89709DB8D05DF6DA2
031F43AB54200A68082FF8F4887E6072993BF21DA939357274C9D7D30071F88C65F64B55DCDC
0C208AD152E12301DE3D182B3C59F62327FEA224A8DDB1867944ABCAD0CECDBC529D68C600B0
AB0281C7CD4FB6C236C2D1561EBCBF76153BDF424079B9A63449D4A4531B4A5BDFBDD70EF02E
74535DE3A881F2584C994060D3830079EFF3FCA2597119A8BD560E2A0F766F7A34A7A38E581D
451502B960833117458ACCC70E6BBC2729AECC6EF2A381A23AF14507B9DC46A3E01092F58CA9
1A32DA58C8F8353805CB193A579FF281B1F80CD4AB9DDFA8917DAF3B7394C095E9455FFE82B7
E0A62AA476754554AA899ECE4676D8FFF0C052697AFC316CA7D759A04AB1D16532042FF511C1
3B5375020E585573843100B9B393D1EF2FE83E5612BFCDE5DBF02B1C6E2E3603C6699C945FD9
36A308F9CB848EE27AF90816C74A04EB3F5AF5E709FE39375EA168DBD9D6D373C2F07FF1B23B
6B229E946DD3F3357C59BB36E3DA08CB393A774D51CD1EA98C6A8E3FEFCD91E73A8C29E13266
015022CD238B8803FFFE86F2385804482D69A32FE00826B91F8AE433C390470E429A1E519A89
249092C034880FCC9B7842A4773565D5E85622B48BEC7A7969E876A734F2E4721E7B00F12B54
240271CB90ECCC4A8FCD3ACC281060B631FC664D5712E7D033481A596FE40B34CB9E4779A061
895D589C15E8EFFBA3F8F8EFA4DFDC4FFA503309B3B6DE0C9375D34A0D935F6B0843C2396991
DB0BD48AD40D86347AB46F22A5757C018B22460487D750D41CCF2ADFF0F69FF58053C4DB6C6C
05CD54B4B48A9E303143A08BD94320ACE9747BDAF8A7AC4497140FC17164E765412D6B283701
96094CE86EAC79D2CDC86867B0DC3013276FF8C5818E06D8B68DD43DB1BC2E1EBC7901DE2D4A
92B34FFB6273EF4F2F555B7C7B4CD43E39B585AF30DF0562BABC058C24D5D392F549B008BDF3
0CBDA7FFD3E6B907D66CDBC8EE920594F59DA6E559623743B18B3AC6A767639E6310CBBC224F
848C9A8EB0E5E7ADDE1D278201E41535A2D3BC2451CBE90388D0E850B1508355BF09E4AF235F
3E6AB79D37E3F45266A140F8CE86010703B12C83C96764C49035A598526902EC3B78F9A27342
A228E03D6DF9EA75377B2236A8161C8CEA3F4BA5CF2AB9CA2F752217456ADD3744A150812B1A
2945D4D0844E99555AF8C2ECCCB520E860D804606B3EB39D7B94585763AEF1605D4EC74FA824
FCE3E8E6A260B9E2497F309950D176CFAA1DB29FF2B07D41C3BF950163D7CAB48193F8409ACD
EA18CD34F29587844E51DFDFA9E7A2685A2D50A6687B6002D0CAECFA3C630E680231D1DD4E8E
388B4525C059BA9E56A8C015E69943541462502E495A63054BDF88B4442935A25C8F20888ADB
6E60D95C8552B012BAF65631F2611B71E03182C7D4D4C82918B4AF222BE87C410781C0E2F751
C66C698C6A322C7FB4E132E9A3ABB876956178A040AA9479A6521CD82869C95C5FC36B0CA384
92564DE4458D8791042B08C8F8F334A6922F729CC0DD65FDB6F839AE8FA148BCB1A60F334986
7BAF910777E8471764F853DD43333BD19389E53EBD82BE564B78FC26D156A143A4F0E10031A8
D1516E187F1A58D1DB48A995FE6B5F5B219107044E251F1E0E6296FA1320FC75C05996D7A7E5
388F817F4CFDEDBF821D3BCBA03F21E20D34876026730D9194157CC362403213CC16C285E68C
DF86B0F61A2D47BE23CF733115F380212B175BE5C8B473F37EB03C19852FD358A09E9B1E9E31
10AA29AD9C0C233DFE8180D5913A5636E05A6BB92B4474F0D2C4B2F7FACB2C2EEEFFB4B6326D
36D2A8F75F6BCDBA56B07ACC44B3E95721AFD3D448CE5EA5314DD35649C39BD215418F8F3868
A522C2BD867927BDBA4377CF1237B791474B44A682A6169507C03C0FEFB4C25AFADDCBC6184D
456A2E44D5A4CD6503ADE51BD029AD1014F6D047A28D7BDC0E14F9E71069B401D15263E4AE45
58AB237CB7FF91E96E16E63352BCD74B81BCD1A50C0447AE76544806B5126F0AE6E904775DCE
803F7BBEC29D5A2A1B98CA8901ACBAF3D08A16822E96281CB22A04A78E4DD1257A52E172F2AA
6CAB70622ACD3355DA68DACF11DB4D16C378486622F33D08CF1F35533A5243FDE12EA8910C5D
B3BE274329503A6962BE53CF60DED6A7CDACAAC5BFBF9920774E92CCEC6F5289687960E42277
7A6ED1E14919D6DDB11E73D13BAD176C7E80A34A39478DF5C2A07626C39E8BB4F54ED455719B
720CEA814A038F46896C6025FF5E744C2E6E830A1966F882BB06CB7EB370173C99C6ABEE8F8F
8540491CBEC243F5AF827FF789A9DC26E7F160BE9B8F6FA6AFC33023E698F29238519256587D
CE09831AABFABFDA761053D0332AD0394666C36352EF250EF21EF1F1FA18B2918E5DCF2CB7DE
1502C590DFD694588CA76BE8F1C00711C5F0656BB83E5867EB79945E61C3A8D6B88EFB1AA33A
6E6A23A1B539D715172915FE3D8277F8865F177CF9B3503E812D919B3AA7A238F4D182F68418
61B26E4DDB5396D956024A95F655560FA34336898FC07D021FE9EF11DD5EC50E6E1BCF82ADA4
85B3851C393969C1E00248657BEC3F077A91027E9AD95E195A0D61A2E5CFC7A511E07FD56E82
8D526EB3FBD6261D04EA21ED82FCC7CA4570B6ACF2E3AFC96D9732EA9F3DC417662BD0031AF0
9697D281DD4B0802BAAA46988C643AF7E5ECABED3AF561947F21422FAEDABAFB506E033A5F0F
A4C51DB720DA032A1214F29316D3134B39DC8ED2AC63E15A99FD690BDB5AEAB767938D6C4B8B
429CFB306887E546C6E433A5C571143C28BF051A1FB84D77F45500DD1B23B0B71C1533B55697
03FF2492ECD353AAA40F9D0477DE9DF7038E57EDC64CDFFB4FE6637C7CEEC38D46AA53308F5F
0E7EEC36924BF5EA6D550CEFD20CF0DD443AC3F8B990E3219C0884622820514D8A82560BF8BA
514578A9B66E762B272692698437EB55AD3DD894AE6492AC964FFB5EE4003BDCB461DCCD1DF7
BB48FDD4C21CAA97000EA5ABFA32956D534140DC7CBC3E9D1FD0B09D2AA16CCE736190FB6837
E0FD1F0E233489AB2686C833AAA8AC9CA8A2A341D635E088D03FBCA5338E355BE751CADC6AEA
AE63DC304598AB6EC8280A0A1329A5147181278C9B95276570D9E1F4D34E65F9AA64DD5FA42D
7D68C9786C353F7A8BC8C52CC83E0EC142596760AE19806583AEAC53E092714E5B993D63F468
5AE1C96EAD46551A491E88873EBAC17F08B20FD491BDBDB2618F005DB0B1D2EAA08892EB1737
BC41A07883A039477FB8E964CF7FDBAC19E337AFE196B39FEEB6251D192423F59B5D746C9907
75AC9C99E9357146B471316E6BAA0EC6F0433604D296D80D26BC238D9FCBA1D3197E5D173519
A57A443B38D021AFBC7C54A6BA7C269453AFFDE6E5FD8C4CB0BE97DE72696C5633902EEB5215
303663C12997AF415D102A214B85D77EA7DDA3CBE5BDF0A12CB331939518FA04D3DFCB7288C5
E340FD74E00419DD0FF5267556DC5DAFCD6C641903C722D23D500A2D598C2FBBFAE3D6264192
3B2777D8EB0D81D4BC53537BC3A84C4FC3FFDFA9194C81EE91DD7A7419DF0E5DA49DA910C5E8
3E35AFA61BED02F3CB646B0999841CAF55A17956449CB25BED26054FA9500A357AF042061CB5
F32414F1C9EA556441CC085A1D6AE3A6540391369FA51DB16DF2C61F0FD1558D5FD4052A63D4
EAF330147B0E9C774B4894607B40A760273B1B89353ADC110B54067F8867A1903F87BD270F06
5E322B027F60D855ABC6EB40F17D222115B7FE10C2E140F2B477D3A3D0A11391698E3C35BF1A
469C9068A0A63073F8A94654DA2B1019A61B3949CA2984A12EB434BA43583840058B774506D3
666BE8CDDAF08B5F99CD7C64AFFF75C164CEC467C70CECF1595D4D01470ADE2E034B37062D4E
72EAF6BAE7C63A03D6D85A16A34CA5C3E1C34257DEBCE2D8F55D746258CE208BD67BABD08E40
ECB20C59BD4E050A0A9D849B2EB2F1C874A512E70B7E179E0CB46FE1ACB5825762666A783AF5
669FEA5B02415A7901CB0BDED57E552FC1D470F59679B21A56F82E333B7756EABBAFBA4A4D0C
042E97EF46C3F71B75B305B468CEE59FBB2BA20B49FFCE08D0C28C920433BA739B98DCD09CE7
CD7FB24D832444B9B6821F31DB2754D497F63B7D6BC7C75DA9328CCB88E4DA7CB28B4B213D5B
8FCA4AE99A5DCD28068DA3795FF110150E01AEB5E252CA2C0B5AAE2490AB711440623568507B
4DF99A6D44C572C5871572CB8FF8154CC3B9AE7592597DDFE684AB44AB069FB8D8680057E70D
A41753E94E0FCC13496DC82F3A6B9272CDC133C01BA998FDF43D266DFFA3E06141C6836D6DF5
ADA89EFB59DEF1A68FAB510DA56BD1C0B23A8C20B340AA0278B98179A46212E4564011A879F9
DDC6DBA0343B89517DB07F7125A0FF6D37D6380F7DC8E0FC2D6C535D6A9ED0D4214E79FE2ABA
30F38D041AB79FEC0786B844444EA81C4E7BA8475AA181EEE935766E8FD444FABB0A3238D14A
D899E01B2C14C4EFC724A236EBB6EE7E53C61992DC103654601334CAEF87C8AAE864BAEDA97E
6820FE907B4640D51D0DEB0C7D98EB67CE311F5A4F25A4FA066C7D13664BE53D1DD66AD2F832
9F8BCA5B22C213E6D20EF2A73625651047878FE7077851DA70CFA24D4FFEF3A8009E7D6E08D3
CA2112801EDBFEAF0B94DDA65C2130903991EFBA7E9F1692A2FC63C1885E52B4B31C0AEA192E
8608A4289DA6DCA485DEE2FBEFCF4F0336DE035B9F65775F3BFF4C2C49E3055BCCF0A4F3FD17
60524B0754D89CABB15D9E57AFB93D3FA164426713911981D0D2979F0EFB0569459F701A0742
67D43656386F7D1A95A9BCF9F4682761839B600846C81DBD197C83838AB9EBBA8323463865BC
30EC1B99F4FE299ECD4453509A5C814E6C996676E025DE9FAFFD0B6C3C0914ABFEC436B65092
6F48672FD2D21EB2F8EEC64DB45B8D8C6AA3AA4E9C41777797D7497190E2B7144D4E9FCAC863
9ED74C7B302383DBA2FA646782103B9ABABF85F80F8EE057F9F21A002115B3E21A3B56D10DBF
67F1EF041D9E96F952E4E65281C3D102273FF3D201E7767B34E4FD4CF5E1402C608ABB8D11B0
7178ACDCD8DE9A2128DBEBF9E2BEC587E0D7BA1A686231A8CD5D99947F4E461E7C091714161B
3906C92A6D5EE5B70783552731AB9CA61E2634BB8E2BA1BC8B49D244FF89F5C2E9286C3467E4
DD3B35BF9989372416245ADA7378E245C1B10BF57BA8A48DF37FA7E5F60B06561C86CA309CAA
2A8B21F88D1E671C54E429863ADBDEA4D5F26FFD164000B571452DA04877E2900EDDE59A7E78
2F2DC54686FD124A711C44B6D3DA7CADAF4530B7EF0AF2A14D5ADF316099906847696848DFA4
CA3D1F8CE2A6BC82630B4B4617170558099C8F46994A8029B417CECBFE5513734425B165AC7C
4DD15155D83FEA6287D3629F535CB0E1A828A195341E314B808604C6587DA28FE318ED8F2658
BE9D9E2BDDEA3D54628AE2BF64717EF64FB6E1DE3D05BF69DB88275060973DA7570EACAB1345
862E2921A90EAEC32B92B99E50EC2807F02A135C5E5B643458C53EEFBA587FC951BC477403E6
8850316845AF4565284B8E902DE262A113234B494977D087C12734874ECC93406E804BDD3655
8E44D2890A8C6A3F8F5DB0A0D7C14CF8B137B335C5A003424CF45CF4DC0C64B8F71929F99C89
CE9CF245ED1FB628A989AB04F0A32D0DF7045080F87A9B6049E0E52612375042C579509A0681
DD6869C904CA95F8B1DE9ED886CCC43A935ABFE8B888745DD6F7AE3F6FBACC0B1230AC9411B9
0CA884D556543A196C817072E0F089F6D7EE3157BFB82A772F8A675315E12813BDDB5186F415
B9BF758F2B213B33981E1795DB41AD949032617C15A52927DC7A348B81288BEB59F2186D3629
A10ECBB8D29581475AF3430C90787ACE611E66D0BD9B41107A5E2BBCB324D893BB606CB48EC1
E206019D1E96DA890DFD94BE3F663F609F07503C5456571608459B26372DD570DAF13ADF2F4B
DFD0DD9649C545D82458793834AF2DD71E8755F4E58856C5EBE91695252BBA2F12DC5FB7130D
1792ECF6AAA07A7A7B005E668BA7D27F3FD0214AE291DC615221F13413C6EFD2E0421ECB37BD
95ADD58A9D51D086A4D0CA2CC1C7A6FA853F61B8C1ADF6738F9B30CE564F21E9D45A5A55D6FE
FEE27F7C538D375B79EF4311A81B014E31DA276D07E114759EDCD610F82C53F1338949FE483E
94679EDCDC4A6381770C75B71ADEF1CA131F5338E071266D679AB6343E961DD3D71D1AEFB662
BBCB0F34766BEFA058E02A7C3FFA833DF83BD4C8E0D89CCEACD5E1262B80C93A84675B71AF69
72357E3C93A7A910AC4508F6C1E260EA1CF03902D3B815DE35E3F30374C476271260E3657194
F9D63DC984E84C82E550A548967791BCD90E660A978A9DF434B3FE404496481345D9733B8CAD
00C306F0CAF67167EA9C70C5C124124AA10DA6B0FB6B69F1EB328B9753B6CA187905D677C5AB
0FE167EC1BB6A168C1F5D6F9136D24A3E27A49CE8CE96F754644A49643E5481F054CD9E5C645
C3E7F670DCFFE00C78F15BC705CEF2C8E1A713BEC20E687EBAA5CB7262E8BFC23F26C1BF902B
8206B25AD830B5B8D87CA79F1F6404FFB313386632528ED7B452C11C22EBFAD64306408A0653
6582ABDB2B2FAD788B4C60AACEC0F0862CBB2FAE618CD8DDA566670FD0B7FA64CE0B7A057025
57BDA95531B9B500B8C97DE2B2AC3DCC6E0DDD204AD937635F2EAC85347E2ECF35BC951C2066
A5331FE8B087A8E83B50B08F07A5578BA7BE6D9CA251DFEA9F9597B71E7C078A489BC718E2AE
13E9D8C4310427AE85B9B919912CFA54C91C1D898C066A8961A904A6661105F189646965CBAC
79F00CA699AA58BDE0C424A347FF1C3259C745D3C8B886196F44EFF6455E86F04D17BE7FF0A4
7F34980F19AAFFDF685AB944733FCD54C50A8A220245E13EDC3C3DFA54B418BAA2153C11CC0D
0C32ECE788C17CA10B149EAD12729C121AC4B7562515D1D721730B10DC9F48193B5C6D6ED5A1
771AA7F6EE5115BFD4E935A6C2DD7C2320DC3728DE360F99E7AE5F6A8B776E66C15D82C0839E
337F2B490C0C26EAF1EF8968898D31D8C581626CD43322952B450524741148084D9F77557304
9F5FC47C5AF4678238B0D70EFE8111E1DF0A90B46216ABA8E39B98ADAAD59527888EBCD817E3
F5E7C71634F94230A6D96261A1496303921F6E8ECD200028A8A0D90A87F957819414A0F3E3E3
9B08CF32473E9CF53D19D2012791AB857312932F70CBCFAC8CBAE1C883EBD8F90F94D415FB1B
20046A733FAA413D47409F87ECBE4BB0AC162627D6094B58989DDE0A12BBE07A99B5CC61C9EB
26AAF4F6AC89D40F36DEFB38DC9119796305545C4060A12D6773F32903FC20334CDFAC659F35
95FEF09D2AC80189040D4B3B81257AD821AD3CB784C49BB0F5672C6EF540DE202CC3B45BC7FC
BA494464E81CBF7439D440F6766DC94893231913A82F6378136DC07A0C4B82EF4910846E28BE
EE53E01B9A110AAAB81C3CE3955428A9F4D033E6D362FF75E50067B1F4CF5EC60DA98B318F7D
E2C7AD5EA8C30A9BBA83213FE3A1FD39C29CF224A25798EE6821DD5ACB3AC9171FBF108B2016
4F2B7D15E26FEB7359F27015787BA53F304D72661B68BFF77B5F91FA541AB4F11232347303D6
95A2A75C09259B35BED0FF9580B9B5988CB5AC0ED11E118A0080D87109CCAF46218E7E440A3F
320C97496F0C4D8A9F63318753B3067F4022EBB5057CD40A327F29F227D45D0EAE5A15E32926
A24EF46D9ECAF21983F09EC0185C8FFE0B790A6DD8727BFE8359D472C493781E40EF71BC747C
F60A673DC4CBA688CFE41CCA69C37AA18197CD4F96EB4F049EACDB88F80734E75C65CF1F3BBF
8E2FC4DECA78DBCD7C677F1F39C590D6F7C102346BA945DD8DDDACEE0240E441D68BDE187773
C66FC65F4ADA28F7C42C11B3E9BC78BE1B42D4D59F0DC73A0471AA8CB4791F0A881D82C7DB8E
C32B2CACC33F3FDB77E0A5B7DD3799CEE2053E9CE624649CE47799752F2BC4A23F0435F72E57
191774554506DB153EB2D3FCA44B6A435DA6D61FB8E8AAC78C891DED8866A96038D99586DCF5
0ED62051FB538D23C612B12D07AA6C1024DD73768952FBC7FEC6EEEB21CDCEC1C1913C468B8D
0350AD3E98669D50B1C71D4F28849044AA8B2FA0255D9323C7BBBF6BD48DCFFCC05DCD74CA9C
2F29FEF5B1447C07591CA82CC79F7AE2C57D897216A8DD6FCC2657BF131796BFB358CEB354FC
7374559DE7B4C879CEBACE1FF5C6E821D0BF596F80475AC6AEF1E6080B480E74A6A81CC7B200
CC9D1BADE2A20FB3B5F9122EFCC99890C5B369BDF64A0645FD36663843D73F126EBFA2B2F87F
6B6D1A481B8CACEEC4F7CC0AF89706E4D944E1A6AC9EF36018BB128197E740D6DEEDFAF1498C
4D2E47FC27E48B0316E856FE21BEB953B2F01C9472517471A5020097CB4494357AB34CCB3A36
6D89B5E598CEFE58CF293CA963D09009CD1BD479126200C3D342172CFC2451997624AC151B9D
8E137865B557F1C595B34E5D5274D8A05DADAADD33836C3C03BCC3FF9B4FB585FF613DBB94D8
44A9D7B2D3A913EDDE51E5F4DAF4D43934325EAFB0AF2DE524BA3E5FDD967F8F5287D209B681
1F9B56B619F0EA0A438976EF6B87C8D3DFF5B228DA82E4D95FE2348ED144C35F28002B7618A6
AFDE5E871ABCA8F41B4FC3BC1EC0A093BEBA007F9055727AB78E6053777C422E078E60D7CBED
83374D98F8EA106C40293905A264AC2BDC2B676FBD6306BB1D78B4ED63ADBF59061E25862825
3CD127874EB3A5D3C9B3B3AA506EFAF9456A9C071F08AA753BB312FC4E29054E0DC277D2CACF
2A7321C4D3CF5556DD0F310CF7C13C0E5359EE8C21507D2E8FCA40147D8484E0C002EDDCF81F
5B8ABF4ED9951D550A30B7BA608CC0F86C2B0A0162B6F1881E479009356D51D01E36B464511C
14C1CDBE1A6F78020192AB358E8167879717C15F22E8D7870149E5CB0BE8C73B17C1609BEDCC
70E6DB1EDAA4369BE30AC45F25557EA0D8D31120959DD29B2A224DC173C9937A29C189217365
B407D07EB62A523B1FB62F0EC8604C03929A7E77B02FBDCFB37018D885F544FBFEB1C1A60DC0
133BA920B1A70C9A46CD6BB7BE5CB0BDD4D0CEE65EB5DFF23C7BA54F8BA5CD904BEF3F4E17F5
B430206B2B4C58181BF23A50382B92FC5516A8C154E99201F87E0F4C5C5FCABD48B8F7AF0F68
68E2A4649454CBD2596C004106EC5C029E3F7233FF4AE296010529F7A4BB37E68307A8F4B239
987099B95C1EDC550C4A70C55092A7CDEC2F1739FF6513D0F17AF86ED78492C31CE44FBC4C8D
0C58622B50575E7DA87CB4C97C32A0829B669AD037C860D2E20F158CC0E6F4F95DEE851C42B4
988F48BEE046378408BB16D9FC4AB3AAEF1BB65642A207631C2D8C70DDCC9887C7B2A2C1CA37
D77E6E5FDD2B138A0E25CA88AD767F4D977F1BEA3EF2EB683C76C9AE55A30F3AA359348F1028
B96753007CB939A922B4534CAE7B4C618865040E3B1B167F40D66614C92E4A5468C1FE638B40
B8A431A5F7877852B82D1C1180226FE067DD8BEC98F522695A673D4A42707AB5A49503290B28
4CB4A541FA6BD8D6675822395C986B23BE34CFF57CB0C0A6037F15EB4904D1C4835D3482AD57
1EC475FB6DC4FB25A7642CCB0A5EB0B68A0CBA5A470BCCF30571F40066824C330A7B0917B460
0207B77DD22A4C004E99517814462A49ADABBAE60C11692458D1034D72FC4026AFE313EA24EB
18E62B7645454438BF6E99B67F25298016EF2A822347F72A812984A65BF92AEBCF694C768003
EFF3E382C7AF5165ABCE4CC66F4A6E182E00EFD65764E3CBA189BB856DE35B5C33F20F02F968
F360A461087C068B5DDCB0EBE6894649BC305214D9C82B979167FB07143CAD069D6022494F82
634BDCCAB6BD0C47019CE049A2949A073C6422F1440626A8D8F27ED269B9866C05DEBB5876FC
980B73F237CAFC69BE3A4B466485855233D20CFAA567FFE8CDF580602D82AE4CE3DA53846277
D067BC2D77937D9AFDD95DEF8B2D573E341F260951F43575ACEFE75F923660CCE5D7CF4AD84F
6CCA09EBA153F174BE91783D2EF3A48B320D8BCDCA178003F2DF97BBF69008A755C962D32273
92EC701B67C1E5106193AE52DF0A0F984C28A779D437214D5BC82A7DBB94AE07CE9B6C799F97
B03873263DE76BFDDA368D2178C817B29DD8CA5C5132F822B6DB89CF3ABCC986B8811C4DC60D
8B52A064C212CAB2D04F83B8C06DB1EC7B45426080466A641B32DEA683F50024446B6F410F85
39D6C79961B38D10BDC3E90B6D86BE999A8BDF2F93D9ABBB0EB3714F567485235589191E4E19
D61584D9DA998FF784BC5EEB74E54D9BA1B4E1297B17395864F60B047956F3D3B72833A6F8B1
E09532A3B11F76AB9B7EC3245F9039C1D68F618616BE48BBCCD8CED3249C08CDA7AAF73714F0
308B0C6FE388275AE6D0108B3B701F45A811D06518026C02CEF5A21875DFB988FDD55D26A837
951F8B4AD63561C1305CF12998848FFDC39C4337C014D43817786829F81DA6687146599EF058
61F108C2A8AED806B65CD25E24A9799458AE0258AE80FF931A09A6B3FC9E6A5B4A31E253B8E4
0DB6D4625BCB5A6176F4F999D8F88A65E96FA6CEFB1D52BB73442B46D4BC0C238AF8FC4C7E8F
287A9E43AE5F04116C5FDAE1277DE359219A68F037293D2C41B7D7908E046F3D06048D2F25DA
2243FFD911C2B56D72EF3E867EA0C2F5E725BA7CF76730B8DF9E3CE8AB9AE3E5A9D013F9049D
C9681359D0752456C02E5D158507071C26D754A2BA8EE96A1F13AC439B6B7B94949E07B10454
0071A1C0724B3019D672EB283BA5741295CF9EB0691EF944E1D93657DD8E16F134447942FF91
53FACE782CAC0005E7DA84B3274E22F37AC3FE2A0C84C8D8C058F9AABC44276BD3C1F063DA46
0D5689DF8597773FB16C5AB0A35D46A0E767182596D9915959AD9F7699F0B5073F56B522BD35
61B225B97A4237E93FDA1E8ACC3588B7766F812E47FAF3C8F2FA8A93D5948AE4631AE1A28A28
765435F7244737A2758DBB37F240929B2E9D3E983D8A3D46A9DA4B0679909F1E077E0431D8F9
A8DE54FC1738B3B5B6B4DDD8F339FCF50B59A4B6CD3E4931F8BF1AE8601E8B337DDA6424E95E
E366D620B7B7B93714E6446BDBA673873A169C3F7D58F62CB64109E985ABCCEB9EAB1D37D85D
93D90E826B4B5C57DC7E5F8C8A13F707260F199C58EF11E61F60C49358E7B079A2FCDA284490
36E843488B847999445FCD8379291F50FC6E176F676E24602C9B90BFE4B0358997D1F2A9652F
6290221808617B6D81A6342853EA43C8B83EF275F265745EAFBE7A7D4A5D6CED648E8C0A6BCF
6415CD7DCB9BBAE84A92FCE237A009FD7536DC8BE3E114E5BB29A5B9BDE2534B4752BC6D1A83
C7BBDCC6578EED4CA804EE9D59FF018B97902109939C9AAB744F42C6FA0D7E47B66C94F9029F
D0F224E0F9E9C10A5908E7DC90BB2138F476958A0CD2A3587733AC5EBCFB1727903FD4EA849A
A305EEB4E061C06C8D963A0527093DD7D9AB232546F9F88B850C5024E940E9A5DE9E9A6E787F
0FC5C1A15B46FAA5E4756A2D4B952ACAD64966DA1B0BA75D166E4479EB0B4E1A964EA0666BE8
7A8FD9E1D8E3C857B926F1C2D0E82AFC9FBCF7ECDFEF6F199223172A7261FD3AFCF54B49A697
81FEDFC6C501C4EE50CA5E8F199C3884247E21B7CD40250692362A84A63014B339835ACD79C6
8C97278F48D68533438C59864F89B2CE0C93CC549F4F4E16849C6D83C272AF1CDEBFD65975B2
1B129E0450330567DD51E08968FE04423D4FFB7D1D4F902ABA21F4C01F23B9811C42B4988F48
BEE06426CF7C8E184D03677ECB1A276DF9ACD94C31E95BCF3D8347A24FDC7E564FB9D11FBBD8
2DD3B819913B0E3A3B050ED0FCB57EE7005CC7DF7B9B5823F530554103ACFE356159AA9B85F9
5C95BEAC324D0097382DAF2F4F160D4471DA9A8D581F5BA89C4E826E905667D4F2BB89AFB9AA
62C6829046F1FD661720BD67056508D7F1618EB58CE32E378C23EC879C4481926A2F3575C7F0
2C3264E854969E248E00139D87013DF831366A11B7E78E8904C9BF6122548B956AFEE0CB4A3F
2F0EE383F21772FE361B2EBAC612C9EECB33B9714AC09EF85764F70030C0BA32BF26767CC2DB
77DF1961D44C613C07F3B3195E8FC5D235370BB495BD1DFD57F59F0CC88148FF4CE3FF711498
A985049E9BBF64F7C19CFF81CB25CA68497B17D31A9343E46C61FF85B8E5AE0E308D40397719
1B38742A6AA3B5C84787A5341F319727A146D32B76154D1D24AFEB30F120F7880306D17F52E4
6786A0B61CB4E16E956DEF4556C15633BFDE4A158DE1878B599E466B85AD875A89AEBDB4B4B2
4DADBA3FA1A28DA0874079A9D5F2280CB9257FB3E675CC2A6C25685EB99C4B8792E524012A6E
A10D9C8D74ADE2AB88AA865BE44F38B5A528BE89B2FA4A89EAB331BE1E050D3D388382915662
DA0EE3BF5848C284C06509D6AC0E4808C8B5FDFCFA9C6CB469A70F5598AD7F924F654ACA0F44
3FA7AF6632E487FF2D0CDA5AD6C9D0DAF55E535AFCF28B95411221BB0415216724DBF215A33F
AD325667A0B7D58FB1DC0650591D563C50F2C50186EF2F7E4D217C525298FB7AA3F643C77AA5
26ADF53B533E4AC9B41B36027CC364E74F309C1832CA97763CA2A07F4383D0733CAE974D6DA9
1D97334780E43BEC2A539C22B5C227042BBCFF3DC2093CA38458412F92004A00554F8AE5412B
DE6F63445465988A6E205AAEDEF0E0EE2062CA0AA29306B0784E1760EC91DC0B2B9B20AAD0B0
7DE969C1F4D0BD5D94F6E03CEB8B821C1340C866E697AF01893493F176846EBF16C1EF717975
D0DDFF1D4158540133AACEEE3A21182F43265DDC9BEB01103A5551731DD91AFDFF19C1D881E7
BCAAD2059632506E851A05388112FC6E1296CE350444D283C4298556098C7EB7DF219D593E65
3C81ADE6D92049BE0B0DBDB4548574EC069078D99419D46A72C53D33D02AF25DBCE794F56DFD
08B10C9229BB3A443893ADCD100000BC5C4A69C986BEEDCF4C9B02DEFE1886705E6779DE47DC
5359965414572BC17072EA6C9F52E49EF6FB11FC8E80C7DD3AE53D1AA08600D7DB145DD779C7
FCA8FDD12FFDD933393B3B22E1378D546B31ED161A040FF04AA0DB05BC90A4200A3D88D5D333
99ADEB7B41EA4C93301B088CAA35E14496AF4F2D8E73FEA5F5AC3B3281978360002EC89761DA
8EEC4FEC0AC6DF373D3650040E493FA18186DEA210C4D251044431D868E7FC22078827F23C27
AF481135BD82F730E746E9878B4975983406F47AC8BEE735B4E53959132C95934919F24BCCBC
DDA5A4CB302510C29D5599CF21682DD1B4ABBE34548BA12DF219D79F13B0BC62A7C97FE42F26
234ACCAE6F9DAF5F9AF2BD2D2752692CB76BA99740A0AACB316265786A7917B057F34E1D2DD8
77E1266449BF1A790001DC04D874EF033AE87B066168EB75730B090876A8E1B7FF22D180E105
95A04E9F57140E8866E1F2F8DCA67530B90940F45020BD86FA7B6EA85542625AB435D0E5531E
4EDE355B3E81197AE3C0CC3068C9857D5B149DD8C48348A51568A117DFDEDFF28087F4E387C7
0D499B6FEBE95B1C7E7D465D8008558DA7C1FCF51EFD19B9EB1F4687C6A6C0F12B25772E0785
4C1481BAFE194F66842BE0BDEB9034EFD17C2A12110959F4871B9FB9D58F13544BFA4AA15019
8C6638CCB7564C14820B78794542A2EEE17A9014D13613F1354924D3642413C2B5D3FF46AE54
E811D53408BE85CEAAC9D19AC0E6062E25A581FADB594F623F00C1DBB7C73E21DDAD74D504F7
0DE2FF188D2A3825371AA9C628F9BEC52B400827C20523DDA19A4B664181C7B6DAC74EDF2A1B
3AE905BDADB2ACCAD15ECF67A2E34FD28938D975EB8637A13A6A18B8CF851876D118140C0761
C3F93AE3E6AC61E8ABACC36FB9597F4E67820B49B4EDA3ACC2B23AA1BD79F2856E8047A57195
CF4278F23B70259F0E5A22E163130929C6122ADB2648EDD6DF15BABA76231F6CA85B35EBC308
945044BDFC4C1B6448674547D9E8AD9EB209EAD3F2D36E08DE2AFA766EF38C5280177BCD5068
221E90436AFFBB3162F6F24F135E542DCCFB56AD5EEFE42048EDBA31600E03ED85EF5AE91AF4
F5EA4388A9626C934321ED15D267D2AF759C5FE93254A60856778CB5279C62DE1D8DF5FB4D77
BCC79B8561756DBEF748A0FF90D1F76E5220165A76312749506F57676B58909B2095EF00A525
15F34A1EA19F0B7113FD5061E356D6AE3E4113134E170D831368DF2DCD327AD43175A1AA65FB
6E923B2627BF32A59D24B54E71818888AA6043F860D5D548B18C80D07E398A8F5ABFCC4A89E7
1FC79F316DD65BB820BD239FE4632E693071DB8753515682F9D19998AD07CCC1FCA7EAFF2744
841466C0128C7577067EAC8C2E85C271BCD8C858038EC445FBAF1BDD954B06CEDC4CF209E4FB
15FCB2C2A56E499F719764BA6B12CDBCB4885B833A6EBE24E9C1FCA5898F8C14441D2A4CD0F3
08B5C11E8429F0F49EF015089DDAA0BFEE653F64E66C26FC7396984D4CF7A4363B826EA82285
1532AD525190CA681D2DD8354E2374AA2F1C43F6DDA81D9AEC9093FB14816AE71C2FAC6F0ABE
4C595481EE8E9B4BD9DED896130BA4888F8DD7571FD8B9712A3A89D43801C3ABAB161596EC41
4C5F869E00BCDE4D275F951305ACC2A2D61D3D7BA4D978369A96AED979FA28FB845E4ACF0505
458255D067F9951349B9EFD8C1B0327411B8B5FF0343BDC37F9729E777392011755EC88D1531
811DAEE13D0EF2C62EEFDDCB4DAC085DB8673AC7B3B8F0CD2F1D70A35C821B7D6105A3BDB831
680CD3F18193C162784F47B13F1A593DFD5820DE22F606ABF1419EB89D5272C475C4C10A4E30
05ECF3D1DD711FF88A4B57DC39AF18F70A2CCAD011D65037BF9182B23A6F8C55F3CF4D3646CD
B7C0B01839832A85248CECC00781273351B1E11E119A92BF6FA432C719C35E2A4AD6704AC7A5
D1DCFB05C8DF61901F89A4311520F57BE22F0CFC82E709647FD6E3B79204CE90D98EDCC54E53
B873B38C0B954615B3FB950A451657ACE6B352A0B859AAEBDD13EF72FA6CE8A6DF6037F420E3
A6062C3054373619A93136D4E6EA7CB8A6AC43E5A25A6DFE6B95D1519CA6EB7704BACE614753
257EF888D043C081C795510F5E3C3B3727B7174FBED75E7E21B0687C2D0D1AA2CECF5D426FCE
B8768946E9BEAAC7FCDFD223892A107CC76DAF8E30D8F95DF55A39E1D6A01595FA187523305C
11E261D1C8F9C716AD8B36FA8F91F865749988C576633871F9BC0D403284D04BA5587D11F3C6
4F462F549199BC5A5E36F27656B422EA951D117CD6221742DFFB8B9C9F6B16562411F7AC2D62
1A2FB6FDF0D1539D1FCF8903DE802782B1A0D6BDB13FCD020D6E0787EB8338409DFA0BD29BBA
2E8B6B22E0D40ED248BF6D7855B88494317A9E4DA281062F6A96E23CE6EDE27FD1DF74642463
F8FEB2E62B9F3AF0AAA3BF9A47D294EB49356137CD29AF73DE1461DAEA33A555B50FEC58DC84
56071F25C6D67F5E70DDA897FE3835AB625ACB7AFE3B82D2B0C5E98471565607F2BE0C973DFC
E3D6736B0C5D43D886BAE7701512E0DD7C4EA50913E6B8F09E3DF658D3A7F7072C94A6A8F757
53E9E1E929381A9135F995252A00EFDD18E778631D0224C0E0A4EED14C4717948C37B0D9ABCA
8AB2CA8D3902B4684205A941B624AC12A958CE16C7FABC280F87A42153D59EFE757B3D2E03E2
9F02B64851BF641FE8BBECBD8F27C11D6EFF56C50F4171BD94D2DB7ED4E07C30A09F1E50BB0C
77B951028CEDE232D53CFCE8204A6ED895320F52F871BFF3503F780416880217FB9F93F8EBFA
D77892FF043565922DA1CC2A25785D35E93F9FABE382396B06446689FF7865118CEC657E3D71
10BDEAAC621003A47551C1F6473704560DC4C767199DFF05C7617E560A714DBC2C1BEA50529A
568F66A77325DC720CAE61ACE1A37698220B27AFFBFE37550B2B506E6DFB9A58BF18255F7F4A
B21B3F60D696346EA83F9282F804AE6AAFDB036C583A7968E39818BF7AFD38162672D78F7875
1D032A6A2ED084247A0B71B44ECBD5AE01D6BE4D8512CBCD1F33AEC01FB08F7D958DFC5D0BEB
F3F3EE53DB00E93C71C58FFB28ADF1CEFE942CAED1299B2B1B5620DF7A300E7DBA63D532557B
7A014E493303916813947A9E2B67728F4DA6FB29A0C775FC6F49181352F993352A140E236D02
ECD228C92B6E62A72D9362441C0CEF1714F9F4D989379DF5BB0324D64E065D54A70FFE8E30AF
379A7199C3A287E2BACC0370C17C724C2E43813AA329364319B1855BEC581E071E16E08AF409
790C5022613655D8D8F257466803DFF2ACF85F3DA08E1AF359308C6547B3031F88BFE99E2AFB
87611CABF9600D202BD90E614D9D782B6A93332FA17BC19839366C2721B834FA2E76D2539F0F
EA9E8C690AF8A1D9390AFB97DEF309CE0A3C302B8D5D28FBE65CB3436005A8D9F8056AF1F23F
C348CAA146ACC37B874A4663D549A401E98BFC01D56205DCE7532B10890ED4CB20933FA67A15
51E10361B069CE5593207C521F3B2BB797C9D2822DD04E21BD3BC252FB30E92E77F4E85BAABB
742DB8F062E17EE61A5236DD260E14F33062C4897144033B3413A5066684622CE8AF9460FD6D
AAA5BFF4370E6EFC77CE81F4B619298C772391EE3D1F23253E536F122137822270AC3CC63211
9B31E932783A9310AED12414143D5BE189BBCC3812D5D0E630AC359BB10302BFE8B99CF93B3B
1FCE84BFCECA996717FFFA8146477F8DB1798D9E8D5528484C85CDC2DC2E76D6E4580021F858
06169215259CE932B9D13E3A9FD729693613D69F1995F1D63089A879C0380FAF749B016BACCA
401F4CDB542E2611F5C060C050F73657FD9348ADF43B2A34ED90E784F41CBF364DEECD123A26
BB1D0107B4C89425CFC2DCEAAF010ABF3C15BB7254DC13EA44EFA101BC45254D7610BE5A2A08
2C64A9DFD4204555BD4C45590CD77C270B2451EA7977FCE9C167E691C492560D897883C87077
CEC321DBEB6B60C8E3602D5031204CF1328C9C4227CAD7009F857CC655AE6CD4A935FF6600A7
6B82693147BFEEACBE2D711F4EB2E9D1EDE6CEE54FA16103971DB2892407CB302D239CBC83BC
83BA938888EAB9275E8319302058BBF8DF5AB3705B9F35A4C08B0D6668B1D8E8B5CC4BB0FC41
3CC26AAA9A46C6D4C5B185BDEE74CFA284E24ECB7AA16094FEBE1B41980F1B04EF4F8F210E15
B1168B757B06DD1D481454A826348A4AD2B5CE5D2382D7FBA0D30CD97832321825A27EAB3E42
C611F31DE946144D5A0B466F81D28882C0122B8190B927C9618F886EAA7CDACAE95032D56E6D
C108B0DCDB867D5AA476934173E4E78F031C98267B984D4FF153CB666FFF0A7133CCDED47F9D
F18EDAD5B7036163640C3366222D847E04F0C3F48C317BAC8AF1A2B82B68464297748E60CB53
26A1BB6B9A00EDA4E0B16747E36D925C2CAD2FFC54942631B0F4917BE242D78C8E10A2100D3A
DF037B4918D763697283478486E627CBDC03DB15CC79D529CF49A29030D2803CF1C568D8CA5F
1AB9EEDB1B873C527B02AE7F478967712F6EB18A0E77D42D65D7BE5E015773FA932D21F70EDC
20A905C5F728BCB96E77025BB93648D671467BE7911C2C3503F9042CEA5A4627F81FEAAC67A8
179B198B61827E01FCD75BE8C29223913CBD5CA0540E56BC54FA5B4A84C6E39EF6C201814E01
6C617ADB5908B36489BABA19FCC06AD4C1F5C1F812C269A8C8AC7E5A1406E30B42BB57BE3B2D
E60BD88410F55B41EA62706D29873C78CF85F8FD5250E3D1B454A3260F041E5A2DFCC3700295
A980C1251A21552C8CAE493EB5AAA8A61D179592D1FED156B9FDFDB979E971B5DC85EBA32B44
8B3B431306E425ED58138DEED7533E295EE14DD6E234A5703337D54F7390AC40B30A3E6859D5
0B1E0D3C175F764715EF5EF1C662426A823A7D3B4FA4A79ECFF1E139541B1F676D4CDD23BC25
3CCCADBDB47C8086D7657DC8284488144C6C2A616C249E1355E83BF0A67287F723E6583C1B48
9CD612DE80B8089AB6335EA9B13FE508961307F9D4562222C36EB862D3CEDECFD5B3AB365698
F2712E96886AD3194118BE196DCB9A1FF45415201EC6CC499BC77D7D81CCE095F763BD5C485F
D26B098D5FC4D746D6BA5268E0646473C2473962163102B3CC634AA7F7396C8BCF0B389B095B
E7FC2BF97EFD661BA953E05DBCD629BB4D8F04681EC34514D6241CA78E129EB976C3EFE92A44
B2CEEFFD483085CB8F837AEBA4CA8A1F7439566BA57A38C335ECDB5F9D359B9D280F57AF90B5
1E293501C4E770C212836B472E61D984F2E38DA01DAD1D0DA4D22D56909164D8794836C3ED15
EB3D9725A7D143C1B91EA3E814FD16385442A3109EEA2FC0C7F3BB6A0AD0F0A670717A31068F
6A5C589C6272A00555CE9CFDF69B946C6FEB3229EDCD650F7CD50B8D87A605D39A2A54989EB7
CE1FEC9D3141AC46FEA35B2523700D1B2DE93129AEEEE8B128E7F4BD4C84CD17362F3E3D6926
359D3037119095D728861BA164FFFB4300BBE12F3E96C5A9BAAB69293EBCD14BE56BF3B14927
E1BBD5341874FE5CA4ED6912022ED7A505307DEEA144E0A302FC58E58CED0826CAE2F50EF586
FE01558CA12B909B85549AC1168921D68EE90627313A946D6E77D356C81C7B04436F50763934
2EECB62FFC50305E89D2D5440788F9DB1EA31AC6BCEDDD431D9E30E5D1B65137A0DFDAED04A8
DE067CCEC8184779A22F637FE30E6DDC5B53AB5DFB4C10AFB47E04267A4C24E3D4B014CB2FB2
6B079C0011E3E6523A05C6501947BF194A13097D7C20F841874F87CF2BBA0732BC60DA4805F7
9B5A3DF518686B8AEB02718597CDA7C92BADFB0DC7341B127DE9FBDEE8E8CC04F19776565C12
2EAD1E8AAB1F6763CE1F9AEE40E860F7007C92903DFCA3AC93DD39FE1388E450E74F2610133F
EC58D5921B326121F4EA2EF940220BD221A8FB4E0A508F82C0F585E2F833318E0FF0586FD6E2
0FFA8229BDA3A6B84CC7683B7056EE108FF5B6EC293F943000B5766068F53814FDF2ACB20D2B
232455012AFB9C130A5260E05125CAFDA5C4F5B9B06B6C429484F5A5721F0E8C44D9819CCE5F
13B3C6A8C7BDD2C0756A0AC9F3BF98B0D7F29ADC4B04113DEA1C20263FB8D8F0D4EDD8993963
6BCE5B7933ECC23BC0784068A53085D2031F1944628EB742C73A478323FF0642B3FF86F596F3
9458EBEA4DF37D40FEE5DE5685B025310B622F7771DA09AE94C3F9CA763C106D24B1C6890ADB
919BAA169718EF7644FBC904C53B5E6916BFF6B2417DEFBBFE46A1AD8E113A83A675DDC656AA
BF32BA1C003A4D5A6099CFD99B5989CD779946F196ED976AB39A666911A310442CD7E65CED84
F1072CD70666150E4249078596716DF12B86A66453BDE2727AFFD46F7072F8C905E5FEFA8C37
03347C1452F36D9349174E5D0BF4C688AA62F617D0C213261494EF3B479D15EF9F3167839F73
F05EEA73FF73CF0510733BC4E2C358CF53E619CDD8194417D091365326C4E8E7460C19DD6784
7D66FBAD913752774A8CBBB702A4875FD35F154E08CC3322C484FEF7D623185BB09289ACFC92
7B885E1FE8AA9CC676C237444EB2BD8919DCC2B4511F4A9573503A536D0477ABEF0C05D0283D
6852E45D3792ED5763ED5959C92CF3CCB81DA37324A083259F623646D8005A77E3A35B7EE5FC
52FC36F7E799AB5EE36B5DFACDB1CBA0CB96D5FA4C438A0EF1219BC0D3FA3B03882821B99490
A5738D3A5230232C23F6D2EFA9ADABA14F1F61F4BDF3C29F20FAD3520CCF1F23C653459E4899
65F53305C563A75FDCBB9088903D7AF6E9A79949E9FC0DCCB4C0147C17C4B8F3AD26524DACF9
A6A1F76D7EDF4B8109DA748A7579C57A13B5FD513FB76936E4393F85F1DE216814A866273208
349EC5128FCEABC53D93DE84645D7501AED73D109164F016ABB45C90E6D1C7E7EC13C3AB22FB
3F3EF6E119ABAFC82AE5E1D371E28F941A9298F4C7F679BCCBC36993B8EED1F55CDD939B8464
FC982E84D7B8AA4BAD4768970360E9C99093F9C9F5F2236AAF5104F04339BCFBD129EE748885
5E9EEDFC10C891BE29E742535DCAF05DBE1618D36EDB5D8F40FB5A547EDC45FF3F4436595051
7A90197E8F842F99ACF3E8B345070C55E919FABB38EC8CDABB88F027F5F3D8774FA6DC149A82
E2239BDC1B20C06A301A272094DF3DBF9B227A9A4DD2BE83EF224617620FE776C5D9DC6F5404
7F2FAE5A3E15EAC83DE6A2D89A4D5E59A4D503F061D3230FD6BED27AB109BE4EFA0EEE9A0F28
9D131BBA1CEDC02E319A3723EEE98FB84BDADC23B095E487210A85CE4895379B8A7D59708A1D
D94DE02A4AFE3E5BE0166FAE6C0F5706817B1CB2DDD7E68A4799BEE124C8AFE8DDC7D7AFF7D3
94BFB74B9394F554875E6F83E9914B4D8816D16E62AA0C593D0107798CBA1CC095B463EC888E
530F5D253F94526457087CF9EC76900D9F11637E4A43CFFDF3073E148F6DD82A0AD5A4962EB2
376D74B43ED747752B9FE62F9FE20AD62A2EE61897D5651D6D61D3A64DCE59D84B3F36829A1E
08FE27C986B64984D472008DF125846277D7854F4DAF1EF7B066D049828F668E671C77402B54
3C349C4744677E31A24FD761F96B3EA4721F57D980C442F90DC92B981273127D061D413E37FA
8D08D0F473080005BB9007199990343EC253DE8340CB8241400BF43EBE83FC2F7D039FBDF98C
3AE5AF967A79CE311D1EA5B11D01C7D57F1ACE6D26185D47666C13429DA58B48537125719B3F
B91FC3F7297A5BD924C34C87FE0D007E31C06871D5FC0D1CEB088C4C1F5C721975597B106C82
18AF965069C536CE44A458C5F5EF16A5C32C039E91269DDCD6172656DF94F9E3A088D25FD071
6D3A105021076517BB350AA163E3C5C8EF5AA0F3506F4C6BFE34C363182D687F1689A3A8A15C
5A989F8373AF8079027FB7E8A703B38F0C163F89FE695E5753FD9FD572A62318A76D55CFA811
2CC3D7D5C0842643A4D5E322758E66ED28F0404B1CA2AC3168613B6643C2052364207431C0D4
9A0E6B9A248C7D4BE9E3DBFC08C4FFD3FC569EC96350174ABF893DA2A0E9D40A8D64792C31E0
F54E95188025B6333EAFF3DDA8C2999422C9CB849752D8692D10E1910AB2D0645E92A9B210F9
1118D1BD0A87283D69B232E5F9B76927824B667D5F4F42179FCDC67A1F77D0336E3BE2E86731
E7DD2E22A4858E7E644B02ADAFF107906A298E4315CD0D53AD4267F477F99B127B76A1574AF1
6F8622CF9D3E3039556D4A0650B48964E3FD1312D6359A68F8DECC0E9E50FAD4AD4E251E2E94
37F2144DD6194BA31C2354D64406E5C81432B084A60F03372D111341C87820769734D4575C12
AF6A37A97731F66B9C6621F75D36759571A0D112C61E0377DB49EE70417D896ED95AD72EB0C3
7EFE669E8A2D463E69702266FBCF92D6ECB6067474E644A4EF3AB31FBDFF2CD67EDCA97F03A8
FB8030A909C8C880299BD440BB9A83186A9A3710511A9144E98DE8940B4CD74241C519F61A65
895AD1798221ADC87108F46C4B0053F52392A252B5626018BD73665832CD0811FFD4C2B4DCC9
5C5120D4FA3C0EFFE00E142C26912591EE6B2EDA58A791CAE13CBF9163B1F51C0B9DAC2EB611
CCD11AD06C95EDCAE3671575BBDA696D80A767056B82E732155650E4FEE9E15C84B4FE2084ED
8A51B748AE344587EB125EA0EE9501CAF82021913D6C9DEE9FF6F8AD96A6E87E5FA5B9FB3034
5B710E5A1C24D247D30F31A6F701F5A722C92BAF496CBA6DBEB0FA393A87B36944394115B215
16AFC18078E1FCC7EFB63EF236E08CBB6E745B20205A30B82CA5F6F0FEFCEA72324D5CD9468C
86371AC76426CB9C935552066F94B31AE4EDE823DA03C6482F4AC709E3AD83651BE836E811E5
809E52AC7EE26C8182DEA91B3226FFB31238A55AF9EBBAC6066185D569D1F0CF8B38C4F8FFAA
8E60FAF2E56258326D945671A99C13120C58A3AFD96E306ABB1C6E92104D1ECC0EA9792AA503
8530CDD043191D17E970C3C166620A506AC8F146B86EC3865D8BAE3F608C6E1462A8FE2A89A1
0D975A11F6E77765290EFAFB1C83E0FC5BD8504A952E6962ACB49A8E53E65655D335105EB88C
81C0EF2CD6C89B7BEA85B1D891B40305BCD43E1C40A0B416BF91AB94418A02035286559B2DAD
03A7D6394EBC11C6C4FB21F2B1613B54875E25F0E0DC5AA60159C6D471EFE0630E5BEE4294D3
AB38C937337D828AC97BE700A9886724A988DF8D9408F944BF7DF2BF8A8F1993F4825E7DEAE3
071EF279870BC8A16CAFE55864C155C3D27FC05BE2D8EA1E5B7457185CE355CF8E7AF5B2873A
A9756D52909A8AD959699ED1FF56AFBF596B8AFCF8C400387FF5E2385342F4A0C6AC4E4E8877
E3953D5E76A51384DDA5DBF3E30D4277ACB753BE3F7D82F1558DFA45DF3043D33C37D05C6C71
ECA2D3FC5076F4AD5AF92DA5DABC856BE998C11E77D0D8ACCFE608F27BD3A547672C94DB17BA
CEA39E52307DDA77FF977E37412F1BD6D448E9E1B52AA45793EC8801C61A502DA869211D7D04
23BA13C969A16041412EF9F9315ADCAD998CEB7FB7B0BBB9B9C73A0A1727468D3BD89F56C075
9A71BFA25A86D90C645588376B8577BC84B96689A9C37AEC6C816224404C2445B41D4DC93324
6FD8E5F749C6DB1BEDE2D2859ECB2810E6A11731B529DCFE3A5BF4DC9212E8AD9EE6E7B76B00
2994F6DA7A9E1B6C07B6C50BEC227740C59C5C55D96C5223D143A8D4D74D8F2E5B555EBAF135
810E747E31F31930B69714AF224B91640A1ED8D605342B69B1B38DFEAAD14FF54BA9B97632D0
571618617D4A7E73A7EACAEF6FCE03ACBE9CCF07033044C027303C388CC0124EB79F98FABC15
6765C4AA062BC3A744FBDF561F1F184486029A0CD32F77EB4B4503A411808099E54CE3F758E2
C8842A5F9D9DA428B300F768A9060A5918879B0812D677A173B1F99062ECC2FCDD0399B62720
9E6294D5A1C77FEC78850580D57554B78A12197D5D792787132E7BF195905404688959D50B3E
7B83B932251B34ACE56518B7F98D8C87EA5EF9DF3D63EFAEAF99156720977D4F96074C85C0DF
B2B43B0DE75EB9D31835BC47E587B80682633BA582717D72221B9157433820AD6CE34035FE3E
3581187892392CAC6380FBF604BA8EB0A32637E44C8F1D946D5E1909ACBFEB34D72584183945
B33D82F4BA2B915EBAFAA67618F99BCBAEFD8F8BDA9B86D6709379F397B5A72F6AA4E6F11840
CD7B753D89B911988EB549D95F5042833C9F74186C527DCFC7D77CF316B77F73EF90007A2BD9
1F33F83C214B0E18050346222D0D51BCEAE15CEB82451B37C52DFD5BB9B8FCDA1CDD77A4EB00
A21641F2B4CCCA221C3AAA7FE31A11293528DD679908AC59A744ECF6E08A08FBA606CFF149F6
43EC607E698776F158923B226D3D0C4B913D0A1B94B6ADB1B84D66A8B16546A0BBF8E0DB9B6A
17D50A2CA6E67E0A8534CE4EB669A9F367365926635BA98630C2232C560DCFC81B306A70AF9B
CF7557BCBF89FAD07A97A14D3A2F8411ABE09AB4493184A80DD311E94EF8B41BB7159FF42F6D
073B965391990C2702D5D4E33A4E744E5621EC18A35D2448E50049B247A7892933A55EACCB19
9E3A332B8BA2D78556DC444463BA3065066563083DE0CAA2C8E6B873E6B92DFDF21705057935
28B9D731441FF20867D67FB7D97FDA8954A294B7BBD57F25ACAD226D08A5C1443B1B0274FDD4
E32FA1FB80E1E93C841CBE010C48D9F1A337D12487E07C4B2508E16FA684620536EE08634A9B
547481D3E40D179EE09E4A14B240371CBB577C24E41A916C134EB24564C60B8F9E4DFF250AF4
65299AB5784D33FB3BA56BA4346C5E193B11BAF18374DEE98D64E97D5372CA4D838B5F874745
956156A046D2A8A2116CCDE050450087F1DB4227C6913359B3B092E6CF1EB7D2656AD944BC31
809F3DD22F6B8000B655E1D05F1AA005AF71DFF453E1D29BDE191CE51D37CD05B5081E63C783
A5343DE829FD3128A8D0DFB72457C4FAA82C1BE3B662F204E656F659C6948CBEC38D85BDA3DD
3B95EAB3B041BC3F52E265CED0A9F9B9E5F26886FFFD004A851CE67154C45E547598D331ABD0
E44A48260C501333EB57650F3813859A0418B5FA806E6C4C8014051F34DB0FEC7CED33A8E785
9ECBEC875808C53D21FBA64F3736D7CA13F8FC4D14987E8E439510C6D46FFC0FAA618331DD01
6014D5EE1A51180C65BB67E4CA008F4AD21DB6BC6663AFD4C61DFE5761615D5CAB6156695702
5642C16CE5606E44D0A7F52C0140011575698ECD06573F9258C43A247D74152BA326EB1C578D
25D7EC4625540E69E5EFC439386FC381EE8DB04CF121C5F84FD9EAF0FDA90FE31353CFEEE553
13363A382E410C69EC7041F3D303949D4F4ACDED4BF1A1BAB640BE0D11B44012446D6F58AE79
405374E0CD5F05BF624B185CFB399478B6054D1624DEE473E9C52C2A58F10F72679E10087BDE
F832E8C8541F04B4678907C099B4C861B389EA2D702CEA96480C536EF545594F697053C9561F
FC9CD56352BFB5CDCC1831E0C8D0847BAAE46F16F50F712ED62351CD0FF01563FBECCD992D9C
F08F693D843DDA71EAAC2424A69F108C516A01823773BA6EF9E979419578BB95DDF07CE70AD1
B0218F1C50436D0B12007F3C02213963C6FA4DCA8E6176D5CB36C154E5521DB36F0BF4B4D75D
026F4B5FF1EA334DA971C530B79D5D9B606899874DF7E10539E0D69AA8241AAD05D703B2C731
3CA21E4F0F318F25279EE1F48B5DB71E95CC43609315D5C3AEF6EDDA5086080E5F31F9264E3F
28E8D5FA719DF9698BAE87F39250CC470AC10636A1A072F001030C97EFB481C21C171EBB2E7B
3DBA17D4992E40F01C4CE682B7BDC2DD56350DE2A918EE186B902440BF4A23D548AAD431DB6C
E594C32C4F8AFA96BCA7CBDCA3AB620D1083633A7D3DF6D655CE07AFA91BEF5C6336DB3C4E03
9099F0C424285612196144DFDB4813519247F53DB9977737EEC47C19D0E66CC522D89E0F8617
96F1453426838E75DC4BD85213A75B366A122A59B603F99F5E597CC52FB5BE96CEE3D24CF6D8
53921A81A869CD14A168D0B31EF2D54CD9B1ACF25C1EF0C42330ECC879A7A173D17522B421C7
730F5DE3B14A6998C9C3A0D1CE5326C0116677997DB1FF6112FC8237B2EFFA72A9DC8A82F706
03EB2147D0CCB152349307F6DD5EAF99563D8614CF7DFE8BB2C34133B1A27B21D5B903978CCA
368C23ACEF2D4E630460626A270A12898C8C212917D2348435AC7E834218721399E57792C8B5
4AAC664D75CFE9EA15EC9CEE6D2086179EA72EC62B6DED17AA3E909BA70A69E66F8645DB6269
D56F6579693CB6F781D81E79F3FE0871BF686390D86181E9990B7CBAAAFA2599E57618CDFABD
E3E21C43F378DFD416EA203EAF5D27818360A3AF5EF34C15E337E74DD46A577852C663318406
54CBE3901DA16518B6AF1E202DCC687AFFF5E458FA887ECF5605FF93A95A46C44A9BF48760DA
288808001107E6BADD29F9952DBC83ADD2A58CBB7500D9E2DE82BDDF32C75C56B5F4D17948AB
24610FCAF83EF121F2C2C8CC1FDA43A0FB3C320AF44102AF2C54F41AD7CA1441B0190B1A8CAB
AE86B1A1F8FD7A6C399BAFD3270E115DC8A348E4B87D9BA2762D95E4CEE98880EDBCBA7D6EE1
25D3C882B62C7141A9C38053C87345138059980D13390D0E5754FFA531F45A825F54CEDBFE48
D661839D141A2593AECE3AA3F5B280CC9219C1424773F927A1044BBCCDB55CA2AB9D9BF53E17
9CF36C33BBA11A7952B4924A01B74066478FE663C7E3C0D28DE8A8335EBB2D98360AD24B338F
3A78F3204E63B12E4666025387C041DBA2343FC0906885F3BD8CDA1E477415180C8AC27F1430
119AC825F072CD2B1932DA6280A24F2D17065EF8426FB9E8A0CEDBF8B53660D6EA05771E3184
DEC4AFB3DBB8F3CA65F7385A21CF096EB0E2AF36601CF5687FC1320ECC03AD922DD7026C44D3
DE96A5C7C49CF83F3BA471135D1DAD0D95B0D959578B32CD6D1B5DE8D968AC8AE143A6201904
06403ECA146BD3F49F5A801D553C922291DD45CECB168320E3689CE3D8E765E79A1C79A1199C
ACFED8554E870D3A5C925A06C611A73A94B2DA9E151EEB36F9BF0672EBEDB9091BDC50F72E3B
7C55E073FA8F419543A47B3A856C09FA4AF7ACB5487469C498AA97992349133E53BD0B9B9F28
1DEA1D8CA2533001CEE5751023C5BDB2098F3C0F3965187364D373A55B451ECBF1C4CF854F3F
EA7E86AD28683B9413BD9E7CD3E9BA8EFF17D3DE056781DFC163D6303A1E0A0615CC57E05DF1
9EEABB8A2D8243A11963FA523184A9C24BA3B1AAADA5A828AD34F93F36049B77A01E9B18DB4F
5DEDA9688FED943B6742038557FA67844296A8E622029D256536F0B7897568D977B951714F2C
92920AE1D9C1522166BEC7B7E4409021B0FE55D8FB9A71AA3A1506BB977615AB8E35D14CADAA
CA791B8BAF23A186B249B3DC395A5E5D4C7211CFCB6F5C2E62B849DC72536D9EA68720EBFBA9
D98BB5803E8056E65C47B12F92CE84FAF73F2A08F145DB269577AD50EE51A292BE6466C64FF3
A54848180D62C8247FA6032834F3201D9706DD1190729F9B27C76E7DA276514A309F7EA3DDC7
A9C84FE049F8093CBD5EBD43AE5E062CB28F33113664FDBBDE4A6A71B5B520D3365C57EDAC15
D5CE4BCA872623509F2CA371C13493B002A32E68CFD6165D2DDA9F3C6651EFF6B650E5998A9E
D30112AAEF280A13710194405D1A8E1144397010DC81C42ABF9A3CCF8FF86B2AE7777EE66B96
B14851F9B3D04E0D4CAC4E28EF33F6182F0B44DBFE0F93318195F107EF1213F95FD217D79FE4
6C5DED68C32DC9E7BDD876221BA76F9DC125DBBB279C493B2660321412141D7052737D069640
912C2DD41B2BFBF25D4C08B5F1412E0D5D03D9C4587AC495570D5577311CE9F5735BDF4B1AFD
3B1409533005F0C3D469DB0CC3A42DF1B4E14C24F8FD872DEE3E5C96FAA2A39257984DAD5801
5E88DF4797981EF81AC7574FBDDC96F23D149B86D91C546B073DA258C37AAAB56C304D423FF0
4F79A7D95E3849BAB07D28BDA946B0B54B37C24628EECE3A530E81C4BD1ABF42C2C4FB4334DD
9AAA2A54C4762C3512552C273211F94BA1BA92BE0F00CD53F6D3827417CC25884095416D06E4
D1F7C93E95C5286A7A2A1D4FF7B78927504FFFF0BE8E23DC3A306027E0E2637B75C992783F58
CD99E20462E1E73BF837A004D8AA81485504A885E367768B96FA3489CB0887BC0393BE41F70F
35047912824D93F38423FC214D93900BB3A0114C5EA3348B8F27796BE2A2170C214773AFA729
915A217CC634EFE5B84D29571C3D9C81386A104B1C190121B1738272E0978B9395B82C012E02
EB33D08CF4DC7B652AB5B1F49C5DEF297608936F668E8F07E066488B978185F87C8DBDF48495
C350138EECD08CCBA71F4169D1E031D40563A9CE29A5D61B94ACD7F9A1D5005CC48D6EF63D05
00D93F642A3501F4086724FF2359ECB661BC0DD6A7D2D86CD5CD461D5F9595B258BA5306A1B1
97862B022AB3CC712CEF618BE82738804CC732B962DE126F90136E4001C96DA77A195AE5015D
DECFD99FEAAB8D5B455E7D6779A70BFA4187D93CF82184272FAAEFD9B0EA0D1059AFD26E4950
B5DBF9FD7B2F18762F7C3094CCD04693EDA58141966638B0D9CEE738D718F24DE72E3B436DFF
A817C63972DAB175BAA8B037150E02A57279954BB8154E9CF0A63A74DE7CB941F6D0AE015DEF
A785291508DF4735242CDA96915F3A67D4711701EBC0CECAA19B46FA8395A608E45247E609EC
B6BD0EBD42EA2D0F3246CE18217C9A1BC700F110A58C7BC2D5BF12FDB444A9833295BEAE75FA
CDC855DE541BEB35232EB7062CDB0B1FF9924CB413643712A4AD15AAB604A7B6381F801E3B17
BE9153D193765BDC81199FEFEFBD75E0C33F398E59C178F586398545DBB7FEECD0F930475734
68987A1ACD82BFB22FB85270B33C8D493EC75D354B73BF89C85511F9D86BEAC776A51823A536
F1A3FCC7865ABCDF852D6D099892569D097A3D3BB353C897B082E31991B738D888299F6201B6
578DF5214DC47D57754E556E461D0031F10158F79A45FE590C93782C1C31C7D1E99D5054721B
2C37A30A4DB4C5F489F9AA8EFCBD2E9D3C79E8ED42BE490BEB93A24AA7DF83235E87AE14AD93
BDA7EABF5324A269DE9E28DDE8CE1BC4840C87B6F148F535303EA8A7AE066126FAC50619CA95
CD8F97EA1093E5FB76AB8640D1DB0F8FBBEAA855CCA4B8A1092D7549EC9299EA3226F8CAAAA5
9FB5AE22EE5DC2557165B35E5FF93C8CFC23891A75E4CA5BA914C5DF3B7792554E2F5DAA2524
D758C2723FC3B0DB13E8084DA3A02D377B5EDF21DA882A8DB1E73ADAC2640790C7BF46ABA616
9CA1476E7DA7E5A26F3957A660BF60A840DD5AC5A22D08DC20B171249C991BA075C6BEC67E2C
B95469AA10E5119B7AE4DD3C7EAD3EF9955CF8310939545F7102CEBC4952A951FF5022094632
FAA2E079CA29D8BFFA5C982B317D8BA90F3FD28E7CFD8EEA6D5E12B98C736BE819090E4FF30C
3D5AA1839E6EAF6EB6F9E6F9405DC5F23B8DFB37971F93D81DEF46A067E49AAC0A7E1631415F
77C16FE3BBED715E4882E710E2DC35E8D2CE01ACFCBB3B231CC2FE79556577668F8701F4033F
351606BF3088518D183EE31115135E02CC9C679ACE8CAC5F5C5C10F065F4B69F1F23C1BBB505
1C3A2D795A579CA2382935DA4F42D481226740EB6DA7000568AC566F633998915749A3CA5BB0
64A48083FBEDED9FB0FEE4B39824A1DC8999DB87C446A068F36D05291FC5FC2FEC5B8AC90AE5
A4F0D76FAC415CE9F3749444D0987E22B64AE6E47D7ECB6E57A092119B4724475095D5D1C9B3
7806D604C12FA1925F919658B79FECD3C37EB933847EA4B966F860CE3B0231054054D33AD524
63C9EED6959EC202CDB57FD462172A702A6F91DBB624AAFD91CE2A15653EAD69995059DF7053
0E93192C2DCEB9ECAB2D25590065C7596AFCD775843CAE76345F410409CEE5EAFFD5227DFF99
ED83FDED9301644632513106EE0D629DB1A70FDFF66421FFA8FB9742F3F7CF0C318455320778
62BE6C5CAC4385A947267EF01BA4DB40427C251B04A79B15CDBAD1C401DF4C94F29AFB8C8DAE
2FFE7055E6BE57E06E5A445645C889810EBB631A22052815045340B42DA17741DCCA003699E1
5F02135F576892F0D178142B1B0E4EF8B3CBCFB7BAA70B2D26D68994730832F84326E171A55D
AC7FB927AB86176F9D031693573BCDF24CAE1121E4D01918A938D01AD4F2DBD7EF824678C39C
B1E1048165589B92E5C7E8039604783E0843A302CF9A7A2A130B40DE91DE437EA9A15C3EE9E8
0BB1EC96081AB295D6BE4889BDFF20C8075EC3869F6EA17077BC0FD340CDAE0C22AC452FEF8A
0716B13DD52153184AC24D45677096CCFFD9F4EF5BB3FECA87C70F49824E01119E8EF4ACE680
9929C4BCE4E4D903EB3BA3556D3D50C301877D81B7C5CA451E46A3A3C03FD6E9260EFC2F4C99
FE45A406F85519383AEE330B3949E092F8BE6D889B1516C6ED1BEAF620262CCB3944DBB27012
587E50A23276A975C301EB4D7F053C9882761A061FF5BC59651DFB3BB6DE720EAE2FF2F2504F
674A5C21C04B01A78AD2EBA868B9EADEB35AAC457C141791CA94D9D8B88FEB5EC5747714641C
C0003851DE075FC0FEC996ACDC4E67A5490FE657490DF994497E1ED3454F6FD990DD8879B238
81219FA6C3D60C81392874E5C42CC174C970629EDEC059B2BF1F53AD21C32584A3E1251A2DE4
94F1D893B80E81D55F611B6B9D7D275AD513125C6267BE40FD49C0A039142535514013B1C722
C61430649F1455FCF3ACB2603C9C668702D64277BDE9199FA6F30E7D2EE9D74F22054CFE0F53
A2F93571D7B98EDA0991F789C1F77C4BF4DF2FA1AC98F5C666A8415AA517BCD14F2BC5B7C572
A9E7EE55822809596C43E43CE174612D06D0D71DBC50B207B9EFD53545E262ED0310A06A2C7A
E9EB63076703B29D0DFCE003C3177A20D40BDEB2C50EB37682CC9586CA3760426615E192BF79
865FEFD6BEF57358A1B5CAB36FD8119EB65E328BC84527AC6FF068048D7C9CA8E91C94F3A4AA
B0F98E8CE4071C54BDA52AE518839708AE69FE8BC5435057FA740130BED913EC885C8E1C9388
867DA6A8D04D3D4B7340404972D86848C152BE9B006E5C85BCF005B59B6FC06A6CD0BF3AF58D
F54FC285C0BBAB9564BC1AE8B072D1BF9CDA93DC4FBDB62AF566E3F18208D9D0721FDAC36A0D
85BDE800DE7051E8703A8EF1A1A46A901ABE065899ABF99467E328CC743E4732716B1814FEAD
78DC62B464D1E2EAAC1D0950C24CBDD2208AEF714A17BA022E68B739705BA7FA4078C46673B0
8309BACF993D71E0D75A75FD98E4FE574FC3B657F137D69284D94956A1404882668B21BF5C5B
0DE5B778B095611E54749886EFA8E1CB81221F5C1A94ECDBAFBDD10952AA19BFC789674B28FE
242DEAF9AD08C7556F67FC5CB75C3BA8E5BB27566FEB06850C7603F13782B8B5123822897A39
3A173FD1A30C7492A0EFFA096A182D6C0EE3B9AEF3C4C3E150208998F9EF4EB466233CF0BD26
4A87D1551A080000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: cmsy10.pfb 0 0
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright:  (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments

FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
 /version (003.002) readonly def
 /Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
 /FullName (CMSY10) readonly def
 /FamilyName (Computer Modern) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /UnderlinePosition -100 def
 /UnderlineThickness 50 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 4 /divide put
dup 5 /diamondmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 8 /circleplus put
dup 9 /circleminus put
dup 10 /circlemultiply put
dup 11 /circledivide put
dup 12 /circledot put
dup 13 /circlecopyrt put
dup 14 /openbullet put
dup 15 /bullet put
dup 16 /equivasymptotic put
dup 17 /equivalence put
dup 18 /reflexsubset put
dup 19 /reflexsuperset put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 22 /precedesequal put
dup 23 /followsequal put
dup 24 /similar put
dup 25 /approxequal put
dup 26 /propersubset put
dup 27 /propersuperset put
dup 28 /lessmuch put
dup 29 /greatermuch put
dup 30 /precedes put
dup 31 /follows put
dup 32 /arrowleft put
dup 33 /arrowright put
dup 34 /arrowup put
dup 35 /arrowdown put
dup 36 /arrowboth put
dup 37 /arrownortheast put
dup 38 /arrowsoutheast put
dup 39 /similarequal put
dup 40 /arrowdblleft put
dup 41 /arrowdblright put
dup 42 /arrowdblup put
dup 43 /arrowdbldown put
dup 44 /arrowdblboth put
dup 45 /arrownorthwest put
dup 46 /arrowsouthwest put
dup 47 /proportional put
dup 48 /prime put
dup 49 /infinity put
dup 50 /element put
dup 51 /owner put
dup 52 /triangle put
dup 53 /triangleinv put
dup 54 /negationslash put
dup 55 /mapsto put
dup 56 /universal put
dup 57 /existential put
dup 58 /logicalnot put
dup 59 /emptyset put
dup 60 /Rfractur put
dup 61 /Ifractur put
dup 62 /latticetop put
dup 63 /perpendicular put
dup 64 /aleph put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /union put
dup 92 /intersection put
dup 93 /unionmulti put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 97 /turnstileright put
dup 98 /floorleft put
dup 99 /floorright put
dup 100 /ceilingleft put
dup 101 /ceilingright put
dup 102 /braceleft put
dup 103 /braceright put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 106 /bar put
dup 107 /bardbl put
dup 108 /arrowbothv put
dup 109 /arrowdblbothv put
dup 110 /backslash put
dup 111 /wreathproduct put
dup 112 /radical put
dup 113 /coproduct put
dup 114 /nabla put
dup 115 /integral put
dup 116 /unionsq put
dup 117 /intersectionsq put
dup 118 /subsetsqequal put
dup 119 /supersetsqequal put
dup 120 /section put
dup 121 /dagger put
dup 122 /daggerdbl put
dup 123 /paragraph put
dup 124 /club put
dup 125 /diamond put
dup 126 /heart put
dup 127 /spade put
dup 128 /arrowleft put
dup 160 /space put
dup 161 /minus put
dup 162 /periodcentered put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 165 /divide put
dup 166 /diamondmath put
dup 167 /plusminus put
dup 168 /minusplus put
dup 169 /circleplus put
dup 170 /circleminus put
dup 173 /circlemultiply put
dup 174 /circledivide put
dup 175 /circledot put
dup 176 /circlecopyrt put
dup 177 /openbullet put
dup 178 /bullet put
dup 179 /equivasymptotic put
dup 180 /equivalence put
dup 181 /reflexsubset put
dup 182 /reflexsuperset put
dup 183 /lessequal put
dup 184 /greaterequal put
dup 185 /precedesequal put
dup 186 /followsequal put
dup 187 /similar put
dup 188 /approxequal put
dup 189 /propersubset put
dup 190 /propersuperset put
dup 191 /lessmuch put
dup 192 /greatermuch put
dup 193 /precedes put
dup 194 /follows put
dup 195 /arrowleft put
dup 196 /spade put
readonly def
currentdict end
currentfile eexec

D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A07B684C079A47
D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81DE96489F740045C5E342F02D
A1C9F9F3C167651E646F1A67CF379789E311EF91511D0F605B045B279357D6FC8537C233E7AE
E6A4FDBE73E75A39EB206D20A6F61021961B748D419EBEEB028B592124E174CA595C108E1272
5B9875544955CFFD028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36
AD861319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED43D08C536
93138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E440902191AA9D8E4C5FBBDA55F1
BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2E0C30B8FD2E475FE0D66D4AA65821864
C7DD6AC9939A04094EEA832EAD33DB7A11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85C
C6358A41342D70AD0B97C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150E
C595E857D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20B6F5
990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D393BEF764AA830936
164EDC2C76977D765F095166FE1D9B0498CAB4AD68621FDC2819CE863510B07FC37ACE71A641
448CCE3453022A0ED0C1AFE7DB2BEC6006B11F4E993C658453BD190269DC5F091BD05055983A
4F869B7CF38AFF99F9CF1196AFB3C00B6407E57328CFC3AD4DE530C8A30A9817F3AF2438B69B
24996DA4104A4F2CCEC2348B1328EB84438D0DC63B767E37C9913E2AE4DDD669BDEC427E6941
CACECB52727BB7341D3A13653F92CED2DA9FA9B19F4AE93B067750ABB71F7107581A0015A08D
B715E35A8E90B5D1F2DFBBBC6B3B443D67206C9F6450F124290E7A922BB43EAA3B5F8101EAF9
D5706E919EFBF5F20FE384A811A7237C2EF5A09851F8525A0602A0B893B297E904E1C0F86249
13D532C89A18B403E10608D797036362C89987172B317DDE23F6EDA786BD47038866EDCDB5D8
8371321552F64A292040226FE53BEA879343AB2C35EC288CFAD8E3C60B35C17EBB85FD14C940
E82B01315DD8E689E39A85742D923303DAA4A5F317F9739CD39573AEB82F0427E898439B389E
89A799DDD5D1C3D9710985772FDDF908A085F1EDA297F11262B7033FF288C863EA05D83EAFF9
91AB051238690FD2CC1D62B6E981855ACFDE11F70ABDD526549570D1F79892D220D1970C230F
F879D7D614D83100F926E326FA58AA1737ECAE914B7BC4E8886C82C6EEC4CE887D5ABA35F770
5234CA9E210484CBDE9E2AA55976770849B995914F234F8C41BDB2B5EEB94FABA4172280DAA2
2EDD049E3D7C4AAAC75CB07AA37040A68EAF76A999AA0FCDF5FDE2D1069704C23306854AFB3F
427990ED447F427D176548605757E516EB657137608B19079BB60BAF2E15677FC54867FA8C35
55ED7FDCC69C2CA167BA71FC238573DFE2507D4D2F30B41D0A23EE8327107DE96BAA270DC069
69E2FFF802A3CE59FE411B190E3E49BF143441B89E52AB02A231DF42694BC676046D7B32AA0A
32A15635CEB06D7C80BEE2E20498AB450E01FD9CE71DA883019D1DC48D62B2D955B4FC9A05E9
FDEA23545DC4C6F8822776F9342A59570875D1E900ECE764F4F238FD24BE7265841BEFFB1EF2
0BCCEA6628605AFEE122EF3F526E328F21D71A77B03AB841D681287A8C8B361103641481E76E
7E355B6B58F2BD9C5B6914E96355BD593DEF81841ABDDF6B981D11607A819B4000F681F325BA
0FF535194BC5D5F6FED8A75001C410933870DE94A42FBE0E45E16517D1DE74D09F4FCA42F337
48040E864AB707BD6228BA17D5E0207A37FB9970367521B35AAE1DFEB7761FBA93EABC710662
5F4E9D620D69DF1B8007693CAAD00A14A9C591E015E60F35FAB1320B108389EE1238E3D6650C
F8A2B1C6FE3BA686CF40DD7B571EAEA169FF87425DA01143B2729DF9BECD5FBA049099FFBC2D
E6DBEB861E3F7675037C544DCD0B386651F8DFD1C51F77E67BEFB8E10C70F7B79CEC56428042
0CB0C2FE830B6029B7D3F72A20AC1D06C00F08A4FE55AD091769685C475198381375DC1FA044
557E4B8BA3C5D68AA798FC1D5F949E30C66321DE4A2DCEAB7CF978DE239F12F3F02E5A7B7AEE
B979E6E0D7E7CBC5A64C0F83793572C766DBE35265E0ECD7555340C3056A22F8C3AB991B21AD
1E40756D1D595BB8AB0D5EF411E3A588894A0301FCB3571BC3A74CBF16FB4B2FB13328C87658
43870BCA4496F97D1EDA1562CAD92498CA1BBEE5C91E16C31DA13F54E9D3D2F33548D84EC7AC
98FD84076F35D951034F4E7E06913CB0F8450B9E3DB89677C7C09F9349ACD01A1E505C421C25
3963FD765EE21FD08F851B6C6072689D3A803334F733ECE932D84E886D089595590E5890A4C6
E6BEFE4752BEECF7309741873F15104142E5CC4A4655AD3765400C6A46E0F308DA358E0333B0
2A4131829707F8AC5E70BE999E9C6F4599EA9DB005082632E1D85FF7860AFEB9A3BC352E10DE
9A0999538AD69BBEF18D3D2E3812C3FFBDA5C099CDC61F67A6851E84CAFFBF891A9794ED8AF9
CAB270E3C78C951C5420C025FEA34B0D59B4308722D610669E210020A559FD6C6CBF2CEE53D5
8E46226CA2D01A4A3D39812BA23324385A0B2B0657BCFF9E53F848BFB6F6BB17E379FC7081D4
3A38FF40C6C42934A356EB7A351198DC63473DD34BCB5D2B911B53130B4E630040459AB8EA37
E67A5BBEAC5927FCF4D7F63F36F7181075D7BC6FEE9DCBA128E35A567C7D5BA75E5A4D20A629
6A6879A24B62EDB6985279868FA0E2CC9898A9AFECB7562457661EB7C487E43FB7C03A55219E
414AFCF164DFFA3E323BCE029A86C02B1E71D16411E4DD224FFBC28026265A79651C56A5F510
7B8C48527D8C8848E1F47C624C7C003DE41A5C53E2D8AD802B251D66E13FA8AB0A31CE8BC14A
2A0652E99865A99CA3B12ED35138209FD48CC20D5EF2973FD7B0D37E5C0BEFDB75A4F09D3B61
CC725F292220579B50FA5D05F66F66E09B63BDC126457C6631548E7F75681F8E0B19D5DF252E
2BBA45E487AB3F091EE607CA278C5966CFF9CA4E3CD813CE831E9FAD3116D8ABBB6A7B920CA3
DCF9343BA475886E94BA90A0BBC5BC9974675744C9162DC2C912D8E19BB2F3BDA3F17C76852E
3CEF0BCD9BFBB3BC79922D5219C1CDCFA2EE824B4AEF8BE6F05FFEF8BDAA51F5A52FC13A4A15
867C01C26240871C37B2FF5253449A02FED980B565D62C6C0D0BC149A356014BBA509727CE1D
F62AF4F28535F5CB1167CC8508089769D07F5171AF79F72721862A0B6CBC59DC79615D5EFE89
B7FEC51FEFFE1DB869D1D0A329D2967E705A714336F0E75D840B37A12E9203B51049F024520E
6637AF4BAB4DCF50B3682D7BF71F654BC5661922556E45CC7EEFCA196B3569B169DB4E01B5A1
52F1539A19B3C2B680795BBB04826BDA3C857158029FAC2E0BDE94EC5CDE45E3DCF6C082DBF3
6D3DD37B135A6F0736E3252FDCE218EB5DB8773E2DAFFD1DAD53671EB3D83A275D011BF5D501
A22D407AE09257CD21297B617E0443FBDAA297D37F66AC436DB78B410E79A002233A0D7DA619
CCA9DA4714325A51CB0BBE9EB6CEA352BB1A0A2FF83610B2A17E19480E9285E1570CFCB8EC7E
1D691A72611D336DE5C6626A1D1D2DF363A1D781DBE61235F1D1805CC2A8C670005F84FD4681
67F8640B12929CF347538B94EB37DA39904D4763D93E757AE2B4C775D98E23BA983E35992A29
2A04976544EC462CA656E5EC37EE8EE46BF1C3B0B4C912DF05AE1535CC654000B06BCDC95D9C
6B5F36F8FD8A0EB31A02C2B863DEBF8FEDBC57D5F93D2604321FA66070D14FED60441E09999B
90A5FB715347583A35314381554031BCE4E6E73AD3FCBB61ED0D4C015863119C1D945E981AF3
F38C81EB3A350A70A63EB06119965C90D7EBA669359FCBDFA87C4DB920F8F3D99C73A0DF7E10
D3C410696D679CBFAE831E3E99FEF6C038F669C58E1EB6F60FF587F5EC561629EF429734CB88
6AF914AC3E6BC04F21D73F184CA12D7E033B301C181D15101A986BB95132DABEE082A617520C
F95EC9069499A02F073D7DBE41726B51FC05A9348953495B4CDE8D0A8F8C04D07ABEB3BA0076
3A80F2E3B5804947E690DB3A7B3BC6C48A67F5D45F5C658FECFF28790B709385D24D02FC3B0C
9F9AB04E168BAC78F0837D9BD402C1ABFA84148FD815240108CD511E50FB8E64F20058EE54E4
ED45181AD9BB777DEE3303C4991EF8EC56B6C278CE63F6C2FF92308A25B9AFDB4585A808AB3F
03D8A15A20FFE399DEE429C959F8B3DFDF81433C41CEAC874479A2C51F9FAEAAD5B7B23230B9
9523FB256896A85A8C48C057A70DE745F753B4183AAA6F84B4ACAB090F33CC2C31186D1D8A02
18A74E1987D86B9C3602BA294CD29FEECE4187523CF511FD075692B1C080A5A22281BAAA4EA7
01D7573D083E2F6EDEA3D49FEAFF2CBF989703E83828E6C7E324558AFB73E3388F0B0E6A97ED
ED5A9553DD33DBBBBAF2174A562AE2B8A4B6E7D13E90FF9B7D650231CBF9EE48DBDB00AEE2E0
FEBF8D6778F19CBCB8766A0ACC9BCE2659771BFA97CE7BA811A3A6C8CBEE899839E525DA2ECD
F66CD99FCED902AA102D92CD9A279453BA74EF8C0CF32C11A412A05CFA2C187833F885F359DC
EA34EE24E90F7F107A23D9EE269C15A647916F56C32543AD5F81D90C84B8305E5BFEF1F3B356
CEEB5BAC54AA00DC9C6F03B4AFCF7AA4D31964377525A661FBB743D3996447AFBF76C8FA874B
CBB374B02C538AC626004EC8E1E9030D60C4A097CDAFC143732FB7431008CF28ABEC4529F468
9720D4EF580676CA855FFEDDC66B7C1DF07DB89EE98C0DB6FAA5551ADE4D674B51E4E3FA4B24
A3DB5196E01C6CA1DF5D669A3C0FC57DC1F576C2BA14D5DE284614AF3276E3A1159CBF8D4042
6A60E8C5DD426F1307222DAA8AA78BEE55C27E26013120FB5471CB33CA4FB642B1C386018EE3
D4424CA411F49CD569CDACB51AB9BB5E66E1E13ED5F8BE0E912BC13C7B23E10C042C33DA1965
6264D7473B4E0C3DABE14F9F94450D1113C88EEC18CFEE640A6D9A40DA9CCED6EC5E2E9F1B35
7DA635C3A2C5A23874E496B868FD0260D30F1780878A900B90637A1237C63D83335A3FD4A664
321C048BF2273F9C4AE3161E1F06E6EA5F3F15CFED43C622E0D7E245EDFB866398DFF2EC9946
74767B7F3DD853CA356A3607C7BF8F9C6889EB9942ABE469EF88368742FB5C41D06125D2042E
EA414B344AC718FEAEB308302F5607C06852A30CF778D236EC90CA10934C629FD59890176264
DBF9C1AEB33A6028B9EF09B06BCB182DA58ECCAA4E2E1FBB13868C98CEB61223E9658EBF003A
C67493587A156EFBE73EC88CCDD55C9C10CDFC52F7A7B274D631DBB5D629F41AC8760741953A
6B90C6E9E4D2C79702C59EECDC65D8948317D67808CFBD81953AD32837A42EBBE48F77D6B387
E272855E54ACD32D3377E19724B3BB370A71C633C3A41A0523FC219EFD5310EB3CB5FC93F0F9
E6BFB11517E2B901016CE8DD44BFA8590EDEA88F5229FFDB83E401034C826F038D58C19E5470
4A4E2E36B7738FC6F80DF4D82A5285853C49F9689363392536C3BA25C00B7885E7DC3951E9B5
D22414C9E9A264954CCCFAF8BCE70CFFD4F726263EBEBB70D52A58B3D6BD029F555A630D687C
7E7103C8B8F2B33EA41732D6FB7FA999CCA0185A13C8BD80A2762AB9919C3E9FC07556BA8C71
49B4CC5B58DBE84297E3E8D2B34591D9FCAC659C0FE115F34ABA807DD94410AF8F532418382E
F8F7980E1598A97A61926B809FD771B2795C69E6B1F15FF0EED329FB793FA3FAF0580ED07F51
B0E1BC1401EA5026897990CF09F9750268AF812E89DA551EC14B457836CD38E5C07179A3EE0A
BD3A85C693ACA829A5E492FD4F1BF12725544FBC81FAA2004784DB367184315C68BEE9FBB1D6
8F91C9D0901BAD3BDA4FFFC203C232276A495EF1B2B82F36FE36716733F0E993B19407744C06
7324BDD2D5641977B1A118DBB844104397F963CA2E01B7155CB84BB642FC315C028FE4502335
F761A9DDBEF7ADE1ABE87D31AF848A5285BD8328ED3E8A2A608590DA11968AA8C0D8010329A9
E172AAC2C7D0061B14EDAD1142FEBD3DDC0ED20023CF06BB146B3F58A6A197DDA1CB2533B236
FAF2825E8DFE70B79A0938D79664C1D26B4412FD10C76729CB22392E8976960ABED0A03D5FDD
C7C5C2C6221BA1FA08020B88FD9AA0CE8B5FD26D58A679339A2AE6730746B8413B6E05361755
FBF11FBFA4974CC1AF36136803DB8282A7F5429327B875D0FD222835C7AB82049CBDA6AD1731
F6D06AD2A20027765CF62F7E4BE9521465A7C3E968DBCF95F2C62EB3829CE6DFE845EE20E8EA
89CA6C46BA14E5A920D8E28A4008C210F747622AE31F5F9036C70FA52BFFF08A4BAB3D5EA2EF
6E8656F89058F4A67933AF30E9A16467D563B2782268E2568868F677650A74F415289CBAC0DE
CDF828485066AC07C011623DE9643DDE39840B1A739B33ED3EC705C13DFB191472987059E501
7002D278168B5280FA2E26C6D51CA663B384F5CFF4A6232F5F68E185231EEA239904319E180F
91DA98A63B38E16E138D2DCBCFEFA5F3E5AC6FE764A3A9F3EB622117662AFD26A124933CB1E0
4AAB53923AF5D9DD972536C4904A1602040545A9AD4904D867C1D0AB907D733EDC19EC093391
3B0EE96E8578527FD3D1204A25982635CCA01A9B101A843F6C373AC4C8E39E39BB13AE6A0EA1
70B59987488481D38806D429E902801F9CE25EEDEB6012CC9EBA0736820F82C640CD8C7D852D
9EFFE6F769D7FDE1DD628861FF628BC0BA8EF12726F83D7FCE6ED8785DBCE502DD0571A76D88
B7FAC1E2DB24DB97394937A1EA17031078EE07D00B554B9C892C68B624D3900266E885028724
3BE44F11F86E95DC00E89C5C47F573C0A7F1CD0CCD26498334C7D37A3AF4457CA805446A7434
45978D8C3D25FBA2350A878E23DE65D49E9E5F819484DC1B85ED2BDFF923216C101FD8F411C1
443AD7BCF5E90FDD6BD29899C86EB3ECC82832FE75A59EB3FA696F2696A450E2504A473123A8
D24956ABEF5ADAF5B3BB57FFA5364214AC0E9E245CCF431DFB8A7A5104BD97D5E5104CA9A057
74D0FCA9EC0458BD7289794FF19FD00E2D05086336902514F5CF8141307C037E5D2E30B62D1C
8A5A7682BC941A5445D8A17F5670554AD4AE24EB95524CEBF2599D5D00AEDEE2B5537F869A46
BF093296C77F86ED5658C3DD3AB9C25850624A53F6573A51C7AD9F43EB8320DFA31F7F58E0FD
FA9FF640DB5B55FB5C4E014A8C50E062F13D573C845231F98CDE7414BD440AD4CE9E00FB39BC
93C3D1C8F5FEC652FC28AD9EF814CD964DEFC5813828B0A38AB0E0BE6E3CD60259B8A50F95CB
02EB685DDE048D73DB0460985EB16DA749DE3EE1625182EDC552F104E547D22E62501D9D4EAB
C09531E6457B7AB148FFBAC7927318F8BE99EAE5AC9E6AE81081E236187C2D384A92494DE6BD
1FDCC5A79413609F865C6067EB60B83B1E0D49D2CABF88F252377787534037AEA74A842CF21A
5514F3A89A00EEA33793D63040EC2E1231C04026B8DFE67E0E0B460E3BC6E60F71AB1C05F295
F617829255BBBAD68D6D7E5AEE12DAD835A693A661AD9923BB65C781B9085640D3A5317C312D
D3C6159C15D8DAA3A592C9F4B4AB648B160E4B3BD2E3DD475573570F5EE110AE5BCA3C499513
061F202DB76ECBB5316F21F041954B9EFF754A628ECC2B68077CD6072C630CB99421BA3D0D1D
A24CC09B8D42E8ECB52EBAA0E16DE13F0F2E235292A0063ED390D9A8E685160134E931F924D1
50C3B1E315CCC86F2AC29D02D0D98DEB83DFC7531128E0AB55B5F7D161A44DE0154738DE0656
66440E46D94CC4AC21C42F362D222A5CEB4FE9FAC0892ABAA08F3A3AB76A22CF73E343BADA5C
89355A821C67A626C0FA6F8742178B9562543607FA648F9FC0971734B99E476E36E9127419F2
7469DD3BA6A1D82680155B4603D1DD68CCFB5D5B1A90CE7C6B780BBFFE12723ACF7CED4649DC
D6D61DC52FB893305D4CB1D956B4A8393D2ACDF74247F0695C9778D5E104CC29E7E8BDEB1305
DDAB231758BD41DE987F4A3D2A8FE210CD806CB42F46951A51F24526F4E43FE18A7E1B432652
01F114F258CB9DF6438D064CD2541FFE07B847C56E66C501758AFDC9C644CC5BF98C6D0D4ADD
4F4245DCD8BEBCD596F363F8469DBDAAF511789619F04BE31FE959F19649D7808F42AAAE56E6
CE93C9F3B3D1CD7C1A67E0FC85ECADB448869D34331BFA9C9A0840B7FED1DC2B0A40072B5244
9B01AB2CAA5765C2A969B61BAA43F084DEFF1E8EFA194F6EBE8C1C475F8895C6DDD99CCA8F4D
A57DFD02A3036407671F3DA719E819A2D2678167EA17CE5ECA50FE1EA359A5756746DBE661C9
F8F4678B762FE87B2DC98AE853E7CF9C2AA1A34F3D560248C5870653D64573587799524583F0
58E7D5DC9D80E7BC03A0FA66702A5AE4CC9EC25ED4433B437B07FB4D3701683D0CB07D90E29B
8B7A0FABF72D0852ECE8F58BFDC35CA72B36CBB334D21ED27684831DB43F34D54F85F19A2B32
C72874AA6D9ABF878A6EFD56BB4EF0E10D2F008129872A03334919DFE9F9692D2A75B870A43E
19890D10E13DA69D3F1BD10FDC0A89EE30ED890A8D278D132C8AF80B14208623EAC8354973E5
A7C2AF274EFFB139976B0C91FA38948F3C1F7E3954D3826F2B19C3799784C139DCB19C2C1ED2
5C62DE80C876F0DDFD3378A061F8293AB0927797F4453DFACD6D06C0C59E7C923BDFEA427A7C
874543DF1E42039296F0EA569BC8CA6B73A2516E4D495D4894162962428B915A6DF5EE0758D1
D24AEB9792A9AED3489EA63514087CC8B1844CB75EDDBF3438A7BFD22E650C6B2042D622656F
71950FB8EC5300A295431ADB83C197CA03F4F10B2675E9FF74E546991E322B0AEA38F8400664
56111A304DB49A08ACE0EC0CC1021F54472EC940A45CBDAFDBD4C90E97A1A652A2E58E328990
C76E4E28B15743034CBB79308D7436074580F28CD65D3D718CE59451EE17F8FC39653B189901
773569CA66B7D7450B8D06DE959722198A2B50AA0F0BA5938A826E8DFA88F173EF5BEB7505D3
78FA6D783DC879DFB2EA9C0E174EA21D07C4D7BBA357FD75E1876E3D11678B9C53D36C276715
C380C13A4AB0983587C48DA984F47860245417831DB2F80FE35DCCAB55898096DD0A03EE4378
ADE96457E70BF5A9443F83E01632FDD639AB962B00FE75E7C641596E458F191271A12C8E11E1
618CFEA573ADE97B5B318005E263F11958124FC005C8F6277FF4B5510555437AEAC5B87E8CAB
6F34E7A590ACE1B457EA3096053E5E12F73265F4387FC8531172CD7E3491D8AAB4243B2039FD
A78228FF7F388428DA2A0487A87CE25E6C415D4B433E69E37B3EDF317D7CD58F1B9CDB64DA74
E1860BEEB893FA916B4270963BEE2D635F982766BB52217F25734946A5C9EEBBF97D1726D325
BD427F5899B765CFA186B553A3D1B51F20568E7F0EF264F75BA793CECBA43FDC09F40B850919
97232288F1486ACF5EC076FCC9E203B96714E10D87BC039A14415DBFD7102C5788142D26B785
4F777B3399EED12F20A6F43289DABB8C2778AE9DB4838416213ED419A20CD7777E9AF51268EB
BE11CB03C9FDCFDEFE3DD8EE1E8A044DCC343D38087032BCEFD6E7C3117E0BBA4DE53AF851CA
0206B46D5CA8286B738360F58F09EEEEC2F9378BFB3810F0C20977F4C1E87C4A5C309C72BFD7
E695DD4F88280DD2279DEC328F1CA2D4DC3147EC63E31709864FC0E9D3923A308ED551EFB420
4E175C1D4009F767E050B011E008B6BC9DA47F98F3ECF7B564828670E0B8B244B0FAD3BA7E48
C2343002F05824243C7D36551C2AB0F4D5EFFE98B89FA1B0E3051A789484A03CD9C1D859B346
85806980C474FC28FB16C569E1FD2C0B4B4E6E4E3789D3469225D4CEA3ACC9C9730DB56BA15D
1470E1D1C00FC73096657390F81ACE17A205F86BFDF183A2ED82D15FCC3FDA5E550EF4499619
BF61173AFB97F698A6B0D8E0CE3517A1301DBBB0D4B2CF504342651D897B23C39865142FD4EF
31285FE25A217E66655F47DE7DF2A43BC3D8EA73DA4732FBF9AB3227E7135ED65F1AAB9DF6DF
84A6138FA963810826C920F04B3FB4CDA20C84B5734DDD661783319389A842728B70F94F3182
B5ACCC4955402CE2D267B63F17D31F2D327A0EDBE40F844650BDA0F314A70CDDCAEA9B8813AE
C77988B920DEE2051D7ADA7FFFA3E22CE81A34BC8363CD26E849D1B7E38F19A1EA6E9BBF3391
BAB5B2AABA3B76EFFB965BA9AEC6338996C5315057447B598EA690F4F498AA0051C9DBA13C17
643E0498B0FAF6989902C1567F3D60301456CE29D86A185025D9BD7DEBAD6F27762D8E089291
98F5B5A16AE3BACA3359BEA186EA1564DA576F758BC5B19E6863639184EFD399FE805770F0DC
7B694E91E21D5FAD6D2BA00252C94DE00BAF886FBFD50FDAC5D5AD3A7D872BCF54060E35F0DE
643D27FCF7B377DB563A546448617C89017331AEF621D2118EE0FFA0AA96596FEEA3D08FD9E2
C4ACC78C97231C63D91450E7B5F4836F54B1280AD9DF2CAF300BBCDF6C6D742B96763EC0ED6B
92FE4AC86CEF1D363EBB99D83DE4014DDE8169240F7E612BF7030D3CB845B5BCF348E31740D7
969932A4786BA759BE5624BACB358E16DD5F37CC8F4F698B7204843787C68E4B370190F45F86
4205A966EA82E6AF4E94FF0D5D74994F0C0EC831A49DA5AA9C03F091DBFD2771AB565F3729D9
796C82798B4DB4EFDE0343A7AC5FEC161E94F720A9A45B9558BF291C20C77430E15E0F7AC4CE
F13AE71FE4CE17EEFCA65A076B47A8836A87B82B63E5E901C6AA96E200B0894DF568483D3D18
C1D1713D6E8772F4EB480F1D53D9903ABD7BE69E4CB68D14820981E97D1CB9A6FFE916559D0F
562FB8023D5A8A2567C682C79B50E2D45AC30DD9A06DB0B3D5F570B73E599D4ED88CE8B40ACE
0216157B0D1E7F8DCA816F2CF6A751AA61D8FB3FB3D3706C983A96E1F49E32245480C9149643
378AD671B6F071EDB1B689208E424A3D3DC27B117936FDFE209154408F2A2F5145217A6B51F2
D0F701A918CBDE5C2025EC66258708A32B5B1ECFB9AA7B9F0E4E6C8F82D12B4D6855305F0564
5046EAEB19F34A586749DEF67568B65D5CA63ABC1713312F0073BC62233709076D93483FF276
381367F5815479C99FC42DC29E71BA6C718C81B032FFA4CBE02B62AB60ADADCBAD53857C1210
12812AE32B492ABDEA406E2720BF1DFB11300BB604F0EB98B796F351F8E5F8DC99203E97DF60
52EF6435BC0C4A5D64BC7EF3894E6AAF7AC169B107255E9230AB11F1EF863979DBA5CF23CDE1
9D9D2E31C71814D8AC2C52E9EE2F28649EC566A83E0AA69F837B3CB9A60B75E88F94D17AB48B
D18FF221A07A42AD8F1570721D5B4DF95E103D1559CA57015EECFA45574252DD1B6FD6BA3CA4
BE0CD66B225B9E21BF951E6C930A6D8546E89E3B586C64458D93EE058AB034B47A2331CA2634
F5E76CCD2DCF6FA03BE411F360AD5B32CE2C70AEF6121E71E36287E49C94C36EB989F22BFDBF
1A6C0F9548FD3D43D2DA96B5A63D96B1F47E966794F248A90A75A433141D4063AA6A5C6C31F5
DAED142FE6790D59CDBB2A96A40F8DE769B50B8C24783CC872EF2D25579852564EF01DC46471
B7D1C9C337606D253C2366E1CC6F40D24900BA9A4883CA16BC6FEF6C9595BE3B644682C46B77
5066BD9D0D83ED7094B47A0E0F373150714B01B8687F3EA1EDAE559C045C461865F4FC9B91A2
0C80F6B7D915187748169CD14F97E606BDA20ACA6697B886B5D41AD89E243D9958529BB6499F
08097A0F33F68D62233A488ED98E3DD665478FD2944E2AA96A1DDFE6EB82BDCE16733D13335E
9D3780F6AB38778744664A1690D7E1A7681AE3E9C17CF10282806A942F656BF3665968B97F4E
0EA511A856C31856BBF80E501E34133C099F2D1B7F5A905DDE99B6C42B07FAC37D4BB1306845
8A7E75719B13AE392E49ED85EEE1CCD069E304F08E8DBB0583F2DE2043BBA9FA8A554A019301
B940BE40BBF57AE7D41620853C171F126EC88DE9AB94FE8BEB9BFF7E846F007B7077456C182D
376340EA99AEE271669ECA77F3441B3ADA0DEEC4701C948D596FEF836B0323921AA1E6D62698
D07A9A82BE2AA6D7C298811C99920584ADB8BB02B2E6A18886594FBEA7909559DA4F5A82B6AC
36F2610A7D9FDBA9D8FCBB4A0BBE288C82505B0E931EC463B2C2058DC56C2C23D25FBB0078C5
7E991CCD19917828F19BB18F0A94C5BE07E241C7167E5F982C9F5929B68E32EE748DA544FC54
5E3CCC85A937D5C7A716A8C455168BCB11237C65F99CEC5DE15224A9B18D8476DE7787125A60
AE3D43E04691EAE16F743A4F9017E747F37A15E9429C3047D3179C8C9C22E1B3F312F2A3C9E3
DD774380CC8D736714A35572D7D5D7B596EA30426E475F5624B8B164F3E006CEA3A9D7E2E838
FFC93863435C95187E4AFC0B20D8FA8A6B8ADE3F00AD6B51CBD28F5CAF043787ED6E277A34A9
D733CEB8A7BB3A9AA83B274E93FB94FCE07B4430C4EC2641E63E01BD6D28875EE6C1D1F312CD
8929C44CC5D6610E81766143D9B521971118D4AAFF99DE5E8D0B593767BFB635CC3666522CDF
94F7C3405CB5D1395205A3744EDEFC81BB309757C5D0F9FF8D55CDA155BADBEE2F50CD2955E6
2DB0B60C47045BEB9D7CA5DEA8B849AD6B2B75594CBE7B0C1C0F1C5474CBEDE8BC9383827C6D
F7FA12A16294DFC87C06DE28767888D21E85F8F4F149176DAA0E0175BBA5297E94CF9ACD0A75
583792155E3D5525075D2302F438A725BC31C226CA1D18FB222E30759E4477428EBB02B72AFE
BB72686AA496BDDBA889667B7943F3E67EE1941F8E884E245249E212D235CB7CB80BBBB410AD
86C79BD9D959767D75052314082A93AA4878F72B2D492E6FE382C902AF1A86C63CA4EF38B2B6
E3388B9E3A002528486CA8F8D33BE8BECB8A259B4253F199AD19E703EFF16EC695B49DB776CD
ADC9CF3D3C1ADD2F42AD6D1DAD8B21B67D2FBB35B93CCCE96E96CE3D277B86CB996570E03D5C
88335B53709B655E6A94C07CE0A42E46448BA71F4FC26198E61C79BE75EDB4D8B396CCE0932C
B5325A8FDEA587F0D3CEC1523C4BC1EC7F449DE4E80D063A4A4DC5028CA6D11849D17B88D400
003644F795348009131FD88C8F1B6404B0F157BD7A38BE605BC9187DCBE2E2566B14A1E6B412
BFC3575554FE79A4D964F858267D589E045C0B44D194D208B611755268B75FCF76C9018D2811
281D84676BDD52512491BE789E052F1788E21308D91C4FA6729A9589E5099C818F23436F6A5B
7EF2A227BD48E8EB989A3D160592DE794AA7B4DDE82D1FFFB7B54A2DFE662FD75A9928C1AF34
29EFBAB25557DE5C2D8D172656F0011A25BB7473E1EC56A3E5A329699CC5B1174A187CDCF971
38C0418256D4A5F3D524F2E8E798F7959DA26B5759266AC85425B0DD0D120CE221E6146DA249
ADA68BD409EAF66B2E0E2126741BCF23B17EE76BE42A3A98258568EDBD8071037E1441E4C6FF
499F9D122ED505D205D14E4FB96F0F6919F778E70D65CE53689F9703C522CE33D2EAC0D0C6DA
A87BC96332946FA280CA70EDC593E681A9832D3FFB049F1723D03270FBA0CE8D26ABCC4F0952
98ABE8E584B5C2398D8D40FF035AB309DD09997041C612FD3E919DFF89D942711EAD46AD88B9
F8F5A7DFA0A5649E5538551BDB66246A74D83A93C223DC9F2C8210D18764A09E12F44C8E00D4
2FB0EACFD71BCD347FFE5F8BBDF0866913C843CD7250830D9B939D629B85F41317A0CC64F8F9
326DD88F7B5F1B85F36664EA9A93D94DA23F5AA633F03F8B126B0BBC54BDAFFEF696F87CC146
3118C6E8EC6119C84507AABF53DFB2962445C0C070C4004BB29788CB7E80402B4F129CD169C8
A86E2930DC219040750C89C9A98309BD2E0D75C9308B44CEEFB308652EF74A1ABEC02AFFD219
F4770F90049F29C8860238C89942657BA4344CC9BBA7DC5322897DBB8ED401142136A1277E25
96B53F9CD171BD41E8F9F95DE0AF97D7DF8CF246072DDF8F79B0D34CFE637ECC6B9DFA669D29
7395EE6935AA830184F0959147C07FCC7C54EB74DB0D65AFACE372714933968D3915AE3FEE79
CCF2CEB66BBA763769075C04E9EA8B7766EC65F80C12DE1081236BFBA1F9734C08FE0B84D978
F3D54D4DCE242FA65B243B42B9A937EDB7F36F1EF973B1A230DCBA8D2B914CAD3E08CA56A769
7C046E5B35BDDEF0D200200811A8E90BAE2F87FAE2B106BDEB0B6453B0451736A16F2A4A4034
876428DB735341ED59852D69E92C1B1FD07091EA476E88A666F0BB4FA270B9C05ACDF31DD38D
0EFBA1808C8B8BEA0FCBE0FBF6B2208BE201FF12753CCE6F34B74255DC2AA1DF0366B71211D2
9DE0262DF6A2B916FD8306C87636A00DA34B3D0272F37D38BAEC2A14F33D6689542A553E4225
59C1581FD73B8D63CF8FDBED4B3CCF9C39AE83C0DD287D5D239F443DADD96092A4B4A723C341
BF97FEA378FE624B1AED5AA20101C384C550CB73393E0945449A53EDA528A465CF4FAA3B020A
0E3505FF154995206C0D0E26B29AED1243932D0AF02473667ED86B56875E818A8CDFE7678465
BCCFEE7818625C7AF987BD430EDAC3F34B78D7BECEDAF0BE4BA4A0412D19585025CBCA4F9583
65CD8DE8DBB00893E287D1B10DA47BB7CD8E78ECF36940C865099B3D34C8E063D09D22DE91D6
9D25F0BA34EA859B31B750AEFAF19D26953D100951D0591341E48BEB10BA8D11C44DB5D1EAC8
BE176BBC0B878B7F945E69CBA526B7E06E64F9330A9F6CB8C49E09E2A26A4A2CF6A0AE69A348
6245CCFF8AA3F5C72E7111037D3C861116913DE6CCF8C5BB54BFC2243FC85367496BC7457C85
E81CD556A6E28002805EE1FF1CBA1EA83500CFF41A537A115A57D079FA28FB845E4ACF04A710
B3A1358C00354BC0AE4911D4940C5D76104BBFC0D68007B4E1E7CE32B2839750F7A5F3B6FE34
8FBFF32330B3005D165B1359061FD7D6C5BC06F1F77A739E7A4B91A4C66E1E864999292FB070
BC941A8B28BA052D5A49E492EF4D8B5A61CE23BBB974B183ED33E1C08BE46D0EBD041B955FDE
3B1EF9040FEC841C8ACC4BE3DB3FF3ACED3874214E60E2C3BAC462C080D6DD88CABF15FFECB7
F73B719C4A7FB00538791B6396FFCEB6D5B67DC19505C5435B37209F5715033B7A75CCA4D38B
8E0B10362025D9E11BDC8311820EBA7280FADBBD5E89AC6F2D1F828EA79F806DC858CA42EB35
E59DD17697BA463273C6A0B5295D7C58AB9D2A59B770BC6A6DD4D823FD4825B63107C2B0D6CF
0790752541CF2E10FAAC32CCB0F8FE0BBB3027FEAB8B06651526069B04EC3BFD54563BA8F326
1FE7962FA34A39C845C62E99D60EF0FD729C7948F7306219B339B58EC0D0FF2C9C8872C183BD
1C3E572DE453B2D807271D10715B17BD9E2FC7583F83E03C74A64DF2BE321AE42EE945BF7E74
B9162F918A8F11D3D923A4CAD3A98BF53A175C3E26086D2499AC567B0B947F7477E7F2243D47
C889EEA390B3DC7BBCFDED34946FBFC4D184CB34B9332B06953F9DDADD9174592F6BACC37EF4
7E31ADCC329DAD3055374ED404C4D812D3DEEFAAE96226804980AC01E0870C992608421D995D
C954BE4C58AADF0A60AADC8A27A55E0587B45B4CC45CDEBCF6446F462A14E145AB724C4E5C68
EF5A86C54F145E43ABCB45FDCC540B718AEC2C33720546ED2A2D08961F01562D05E014652D55
C9FA7BB7D34A1FECAA7A2C6FFAD2633178F6B2C41E4A01E4A10B7B9895F7C069062D762B1E01
49E1001DECF0ACFF4D9662BC3C1F2AE1B1B860A84CAD344045D4BA7DE000DE22B035825F66A3
1AAAAFCAE6A0F981DC393F56EE1D2BCC60DC4FF28F44DCFAB6C95D5AFD4071BF5BF19EFC8A6D
35338F34433DA402F84719F300CF731C4B55DBE7F7354E002D85DCD912D4AABA2B02F6D8083C
B2C8F92C2B92111156713D579E796C41C508536345ABAA5EFCA39D664E1434BB6D0D0CE6A584
E0316880E16E6C615246103CD1DCAE897A8396FB6C0CBD235613E00BB8CD2B2F9E993B1A01AC
819B9C6F679A28D4338458E21BF10C7C4136E28D2B060F694B9B03C83675A4A616EC53790152
081A7B4B1750941CB1117BD569A532ED1C49DC49FA3DA0D6BA30E93CB4A71A14B21713DAF82F
D93C9AE4D53A2FE61EA62BC37D38C2500EB7B5A2E4B448992F428D75928AF8ECDA6C9A376B77
17C1997B35C3D9971D1D49BE9B8E4626E3953751F0C6D784B406153488053EDAB38B3675CE8B
05C030331C974164088629E2A9B878063684853A37F20BFFA7D8310769A43774B51DF1BDFF39
A620C578D179D3128140453A0BE7AA76F71D106C6A58642F1A6EFD03E5EB12B74E184F1C0FCE
134A886C645E5762BB77C4A03BF0AA7B93E8766611974162F3AB8F9137E7E8A17E6EA75C75D2
E6FB802DF69EEC93C5E658FFEA205DFAFE8825DB796D4E8E232E00122D57A709A5E0543D01EC
1E2522ED30EF484333C222959B8B98710F958E9C2A57B44237427410329C1A5EFFD3E1E1C125
3C3A25387B5C165272038F19653F32886488F16AC31F7E576327E606CDF3172614561291E7BA
414FBD1A7558084D9CD408EFB7FF5CC53867B3FC96E6AA9419FE4DD98A9A064CC679D42829C5
9C96092F13F77D9EA63249762270017E4E31E1DDE29F57ADF2EDAA9106CC1492A8171717AE0E
42A9116C91CAB94B34C904A2811890DF7B52BE40C01846D131C8DFCCFBDF34EC9DCD5F4EE582
E858F357C3853A48890988859B202CC2A8CF675BF8B3C0434698A4A34D8DB358E42A38220874
F88022DEC2AFB967CF470CE40919E9F0A17E901806D53760FA81983D4E68471440BF8D1BF07F
CE3AB280E3FCA5AB0DFD9BBB74F39752939B75D62C43A6819A40464189F2A49F12B3D25269B8
CD1FFDF68C76AC81821CFAA668F2E2C2D5730C0F201DD7102EF066EEF420355806B127CD6B05
B0C5644072CDF444422DAB1C82D5F1B5C116C758717DD38C1919B099C4DC3E5DE9B6431BFA94
9FD09B01B723DCEB135960F8138D20C331C41B9BE376DA25F760F46072C799F7148C5C25445C
68F9A531F07CEAA52365A8291001D8B239B96CD6510F71C2F2EFD6DE3A2FD816392BE13F3901
CF9DD30CE20351FB9C40492B4449C51768A0C34CBDAB175FD07BAABB0B49C935BE2BCE6527AC
AEB677DFD53EFE53C057DD8F4F6235D93DDAD1BBE54D5E7832069D2E9FCFE8AB5C5112F56466
08168332F691AB0534407FB3A3D36D3C193E2761FD034C689BD35CC7335AD8600E7956003F56
EDF6EFFAB63291C1796A1A8829D62C16DF8344BAA8605A538C320F8BD41E35480DC6EAD20986
D1E671D5682C1D77D7C81B2E983B5D2955767A5940EE1FA51159FB5176091BFF203057D993F1
19C87D5669EC4AA1ED1B1048E0D34A439A10A03E64E6CB5305003832257C5CCC8D53196D0B57
AC82A5DF7AC9F2FD1528FBA6AC34DE1156D9E0CAD7D3B1E1945A3BC75FD91E0F76085E05B096
E139136ADF04CAB6F026C46E31C544E28B7D89A3AAE524188657E7F40EF34EF42B7B636A4501
0E9DA1D4A14B9F673ED233A46A8BBBC9522E5D1514848D51664B78A607390BA9D4354464F3A7
A91A876C1D893092105557CA13E2A460620B8ED0378C9FA6272196E5F7A2D63AD9732C57D478
549812AB1EAA2E735FBFE0B200D67F57161517B0B52C10EE134C0696DCD8FA8EE004B3078241
88469842E260D74758814816410E2BDF23B7E2075FF18723593536C293574E1FAEECCB985B02
E3FD624FFE0380E631C362985DE944030F9F13427AD35E7B87705EE761BD396B92A5DCC06D56
262D495994890218F117C3024A813C943A0608EC03CAE0D496B557F748C14696CE391A140DD5
E5248A1BE58A1764076ED3A5361A2563BB123C4831DFA952D6D8872A0E3C07142BC794682A94
A66E70430643C4096C71F6A634E2BAB8AEED329AC08110B690CED40CB37230AE9012BE2CB6A6
EDA2E2022A7CA16771A5BD2B6FA659BB47CC2C427E4C209D01815F0A907B096085B54752383D
C6FB049A147E6DC9D82DBB89C34EB50108D4FECA7DC223792292E64801443F7AED22E123077A
A52FAE9AD49AFD8A3F330CA78AE6B088BB8681790A357B46E786602BBE3A84B0781433C9BD1A
A098943D50743BE32FBCC9A35FE81AB29525983D6C93AD2EB0C66A0D75EF0F85F8A97CA5E54F
A5EFD9E23870C17DC543E87AEAB16A677B846E1F5954924C60650F03410B4C7EE099415B6021
E5C8F33E81FAEA57B6DD3ABB45BE7DBCF2D23CEB44965C34E40EB67EA8C504BE900FDED57E44
9A6BBA2C55821FB261537036030831D23EAFE00B3113AB3EC777DFCC357BAAFFFD655461888A
A8144629E39F83E169384685C1691927FF889A67B43B7F84689138CEB06C6AEF4402B5693BE0
466994665CECF34F5AD656CA098B215754794A6E567CB590C2F01795B2931BAB6F73C777BCBE
505D1CCE87026CE3DE41152FBCC4E1470F7361FE50843D0FDB2E7209B2CCDFC5C7D910BF3276
AD395F46DA6E532343104C4BFFEC3B627F89BBA72BCF7088A0AD564C05261670DFE2B1E28E8C
61519CFBF5937AD54B37A7B13B7770C93097364F5F8596BA3BF5E047170CF9F686D18ABFB7C2
4B0B22750D6AB28A1F47EFB0E06BAED2948EAEC810E2D11CFA7451BB33A2FA90FAEE1954081C
CA93A3E18749CFA50A2F7553AA63000A2A19FE92AD0C0D4974FF743D3341185F8916C783A466
C270C689389C9767289B1A00D11226AB3E1E90E9097588E0C14ED8EDBBF717202E5C5DAE9931
2B1E384878E4B6991D10DCE9252A8B8F0B2F2DDEAEF92A87299B2BD39FD1488A57CDC77FE147
0395DA0D4D7DE8E29A10D7A07849C78F003A3F2989D1EDFA7CA70B0F89D904A5DCCDBC292BE1
A0E5A35C2F6F5BDAA9EFA07D38E68959DE0A5C01FE0E5FF7BDFA46B4D15F050ECE607563BE52
B3104DAB7805B4F27231CFC0A7396605CC2A6D439C360903086CD1112E671F74E4E7FD80200C
A5CBC9EC087FC2C95FA7529713E43235767E29035D0BDAE76C4D4BC0AD18EBE12ADC7990666D
08EAF98545737FBE26F11EE1B42A52B170F37B21896E33209A9BA4A03285A55C6F98FA3B9649
28F83D7830A938FEC7B60F454BB143507407D3B12B6CD2094DD9AA7397810EB21CA7E47CC304
55314428F5EB009C9156A296A12796AEC951B5B6A8E2A188D3F3C5C03EE1146A1F94DF8E661F
8524B619433DE3AC98B13DBE39135BBA43C0832944FBDB106D0696CF114DFAD04E5DD7B6A7C5
2D9184144977194BD24CF2788A56EBF5F3C992C60B2F4A7B8A697FABAC56C4384434F10C980F
1DDB5B79DED34985E2D6344A1BC036CD50DBBDB8BB002F96A887036B8BA9E81893DBA05AFD50
C3006ABD5A74826AC085C6F85168E098CCC5F17F36381746FC37C6352FDE3D8A503014602EE2
78DAC70A16ED96CDE5BBACBA2A97232F71400B8B4CFD4C44183345F3165C4D8470AF9709806C
87AC87CFCF6BB1CE6366F63E0C646161E5EFE934CC215DE13B2E9A93802FC3C1AAABD6582A0C
B2FBA304FB5E50514B8D2FE55BE1545D034F207A96DF61AE7EAB1C06D26AF493E51B479B3BA7
8E16C7FED79A9EC38E1C4988BDA8A37692F39E6B944EE7AFD329F827AE8E58D7D6452811A0AC
50F3ED5F6DC055C7CA7D52FE746F23EA6BF02DB28342E173BBEC647E38EFDCE4458295F5509C
BA247A76EA82685EABE8846E7B07ABAD72305F06A987178098D19A37AAAB4D53988C69FD7513
014E2DCD9A36C102A7F49A22561A32F94D7790A7D463D6649A7F0D395627CB2AD50445A602D0
F6C2E1BB13ECF338A50385A0454EAD42B3441CDB836B6CEF0817D7FE9438187045BACD849EF3
348EA859E77C0DE75175E1DE97F2766C2D25F4CA2B2F441E9FE8F8AE95F9D8CA736AA5AD7A8A
8D4CB90371268FE41A623BFEDAB04FEBAFFBF6FA61DD1A3EC255774CD58C927AC41F24769F20
D43D0CE013D51A7434981177121A77547C298ABCFBF0AE83864E0A5F052CEC01B7D39919FFFB
3DC81930B423003348BA7143FF58F6908803695D70A122081A77BA8F797CC85E39D8ABF419AF
8732472EF2972137AE3206787149550BFCE8393B261B2AAF73417473B467464FCC848329BC3E
A5CAFF477862FC35D35BEFE5850153733D88BBA52DD1EED6DAE87A1EC09877415776657443DD
2C454B3D8ABB71762F0D636963A855BE25CB52D6B621C09E21A47D0DED25E92F52370DEA91CC
4E3F118C082DEE635443582C57D7151B934AB5975C9D8691D0FE281AEED8C196B06F787DD75C
F6A04BF63A3C9B88A36103B18CCDDCBCB213F270E4282C3B40E7B91AA535B6C58B239CD7DE24
F832026ACF4D87EDC83AAB433D03AA633B094AB62F2BA8C0265B9E39D1072282C0242B570661
4C34C2F2DD37287C73515BCD77BB2A4A428839F7683C4D8C83324A8157D56B82FF518FC3D903
F85DB1676EB71352E46F1B40651CCCF53F7D92200778A2F3B8414AF97779BA01E1DDE594A9C5
E45A1A3B5BE613790E9126723B95E3EA265E6A6956904DB6610F997C77E02F719EED9BC40AE7
66C37DFDC2581A1D6C625DFE94146E39DC435983D415EEEE370D951F660A0C8A34AD303DA80E
D66258D4466A647935580E86D723D923CD3BBE150B558AA4930CB9EEB4A4D2A57B4F087473A2
9BB3760B23AE615B10B58412CE6BA4632B91B6D775C06679AE08382F0934BB6B0D4CEE4F5B98
ACC6D7D5461C6A9E827A11603DA185E451C905843733031422218539B01CE7807986B866F659
761DB98CB8942BA1959AB973380394F70392ADB687FE92886D628B5873055CFF4F1052DCA10A
B657A147188F1E42B180685B723331D8CC35273E114F324D53C9DEE784F46026DA726BD29388
3D6BDB60D4A2198E89C21816E3E711D4FDD2C1A9D675A71BC6095F529F8625E815F82ECFC865
29A5AF692E8ABC76B940D19D24D6B96500E36FC662D5937F64C1711C1D265A2C90DD56ACF6D7
CC33C7633DB37BFD437F5C3D78973E61A257C379FA1095807579EE2514AE15AF5B341B43882F
3FE19236A59E92651EC64961E62E4FFB7A8F800B8B3C525E718C7E7ED92EA07C04FFE9FE5CA0
59D2FB05B95800EFC84C3A7C6B816D821225FBA9D3E39AC8052D9F37828218A221A031DDABEC
62BF03601183E68C83E8BE713A2C59E9306E8F42180ABFA2EF83BF2DE707FC35B46FB6A6ED72
8B569CC07BD680CA25661E2F9FD89428BDCE458E96578F725D210B60AF26DDAAFB382BC8E311
69D5BC5BFE7D48E92958EEA2823E3DA5E3EEE7A6AD644F003915B922465FDF858389AE6A88CF
7924DCBB96EFD85F12478B4C3D330BC6C5FC412091F3C54C9F1A6BE17973C025F48342D566C9
6220E66D95CB04477C054759A3C6DEB3FAB5B3F650ACC6DC1A57ED0B9859C9256C6BF4901C68
382FDB25AACD47DE9DF59366236C3C4BBE5D50465DBAF139F4F49E2D6E5CBA9F47D558BAC06D
FB98131BBFE8FEE681D5E4A737021E4B175B1CB96ED0B5B011BCD639C9756F8C30AFADBA5162
A48D8F5090C469A8E1EFF83E5613497C8DD7BD7B593CE3440C46027F0561B187F75F9C3B0C82
9923310354E5A903FA9846C199A405960AC0731188C863B460B51FBC12B407F50D4026AAEBC1
D21474A0915AB42B368AF2BAF658902D3B28E143C6B2B1E1B414BB399EF6A39B5ACB2EAF438C
C0B38FB44F1CA9B4174926B585BF5E287F8B42758ABE9476A9E4D8B9B9D3418014B2D1A2850C
62D4732D2024D4262FCC42EAAADA3B90CA39E03674AC19443C5B5C496C4A83324F822692B823
BE229F901AB0CC2AF98C43B0E13179D6931F1AA28D8DC2B1CF6C4A0959602A84E5AB1D0575DF
DF70E347A9A6389EA7736D353D0E5259A7686B50887883B3C9AC232B0DBA3DEA5C6B59D5307B
205F1A7D5ED917CFB3A2E9E66080BFE5B36BA012D05C73F6864C1E59D05CA076147DADF784EF
F55390B412F4BA448F93520F2D41BBC3CD52514D8C12BDCC69D4C5015B3462B2330046828399
029F6279A8109034B2D8A5AFCCF1B0CF20378A411863148DFE9DF7B5BA6219FEA021D9AC10B2
42FC55A829B050EE40C7C8213C175F882CF68F8EDFA80CB1A6BE053B339A70B1CC92191D15C2
D3E16ECD5F145AEAFDB83CCE8849508A70C3FDA228949070E9103A881697FCCF2AAF69A213B6
808F27694433ABCCAF502A8B0B6F075F7459DEECABFB827F760C8240D88EF529F4284B4CBAB9
4E8651BD94516005F72268C13B962867EF8B7939E1B077243478F83951F995B8C697508E9734
7E5EC96FFD7459C17C9C7C5FBE3BA5CF15EC0DD2872A60C31736F9C3948371B10A903DF62A9F
C360933746F20809C2C0917302FE0A397F6682F51CEEB509F4A070546C7422DF6F421B801D06
B3CB6F7D08DEE3E53A21DA5B416678170769ED91E27C34410BCEBE8FFFD94B2D6B22E88FD377
DC10BA223C7F305C6D7CDBCDA24CA5B2D8A0B83D6399ECEE47BE4421A95E6BAFEB7E539DA63D
CF328E55F4239EDAFE7FE722BC6B2B2C4FD89623023C8EE3AD682DB456968332CFE7145C7392
F609B0E6B5DB4F3E5692F3B80E0705CC5E712507D6B85E3372A54911336ADC17B2835EB4E470
7AB102FC2B765A2EF0E0EAF396B27C04DC6141E769475009F5784AF8498DFC70E93F5FE96EA4
364B3585DF27FE165C25689C8CF8D8ACF3BB4705B462BEFF2559A4E43B7A1118E611CC64BBA0
4F2AC87903880F8FE94B2AD27C1DB989E9F369DA73BFDA3A2BD6E6BA5ED03C132505E22B7DEC
FA770050D6A29C09E32A3F610B71E5C66A96414FE18030F79C652D565184723771C3F7E67560
27C68BB8F0362023C22B90B1A6B742D3D65297885AE7226F7AAA60309FA0E089F30731E30F4C
3675D4A2C9AA15CC3F8F54AFC4EFC6BDAB1CFDD3FA6C62C58E1D46F0F8495178A7265AB6B96E
E7EF51CFF1A24EC5223166239F892BEB7B2E5848B5D074BE03EC888937AC362D9E0EBC51B9D6
9C33C1BC3CBB2ED97CEFFB0BB6CA48B78611F8077532370F71A783E414ADE9C2A8E2120BD984
9F52872C65A4EBFF544E2DA3F27477A13457495F422DCABD8C42B84E3E2D28CE9B8ACE50456C
0D67D7BB4702A51D123A9290D7531611EDD7D022F6903D6B3F9574C3536C6BAFB54B00702F9D
C1EBD4BE5C2E8B113F92081C3A7F2EF92E04F0A53E67C1A0DF27DD65BD8C80F200260AAA9D67
A78A646F069850C56DE92BE2FC4FFCE96F0A4192E7E8BFF17413F1E0C01FB92EF970477B44F0
13B3C0ADDD856EF6E7D9DDFB2A88692760DE7CE43BA60528EE4CE3E656839F74812BD758F890
1F3E0E26782815F286F01E88ECB90D2B95B5A1183836D6A998B2EF57E9986185A91C33A0A35C
AE7D925B8DA8917535F1B602CF8A5D6B18825021B240BA96623696A8F6E668C5D233D537591F
5877AB2CCB7E954C057010706EE26901D64B2FBA1DAD9CF2A0E7AC704A96A3C4F5D6CB95F78D
A11ED9F98D36BE48693EAE30CD1BFE3CDFC47FB46ABAE7D67267DDDF0A319EF85C918FCAF6E6
574B5621218D04FE1864F754E22DAE2000EE135B975E3630064078A7DFE087EC81B86357008F
097310D45F7C10A253A90D713A790F6B0B3DD6FACFA99AA1513ABFCFB01FD363F18142750A33
FF283543377E73D1C006D8BEAFEF1BEA4EC8C56B46EB5FD06B85EA234EE5CB844765C229F084
DF8D3BCA608C34742BC6A8362F5A7994AB11D85600C5BAB2729B89DFE0E3B47ABF8D02367B53
9C27FC772838D806C991C6B03B9C6AF106771F6F7458F6AFA4A3DBCABD7F9E45FEC22A681F3E
039A4713CA7D9BA1E091CF7244F0DA2E53EA1323E03050E61C72DDF8C651F4C340B35FA341B8
8276A741900C9DFCC0F7FF866CFB348FABBEBCAB187B3F8AAE2022574F287324CF915AB8B230
1848989E807567C6BEA29D6ACB9CD80D6B54928F8CA4303C6B519D7E3E97EE92EC9FFC4AFFE4
D842C979DC923479B21136AD12D8DA127CFB12053E0B293A35D0152D0721EA96D7872BA4CE44
7978BE1CDCB2FDAC0D12FF26396AE0266D47C2170A444580EFBF5791E1490A978A15141526FB
1C76272DE761167C467178F10BD9B949A4452AD1BE2E79A2290C356ACCBD0556A3E68A88EAAC
42F166C263F37A2749827B09F77C5BDBB813C7EE62F625B68BFBF3F265B1D11D7E19CA1E1D31
BD6CE1CB12371C2C60F2F8D56D0C122034C2E28995FD0CB0473FCD2893892219BCC799A233DE
1809EEC627FDE75A66C7475BC5780D7F3B1330E496075913B369CA8C50918736BC3119228D93
E2C2316AC4418AD32B741665F81FE667D1697D8F59594882424F012228DB557D6FDBC99798BD
81C40D89C583BA80DE51DE3A458D350BFFBE35472B1571F78D590216C812EECA285C6AB4059A
3636B823D0F0BC2D931E7E90E2B620374099A43B8C93DCD6AC9EC986E84A2F6923C49C92E016
F58C540F1AD4B2AF8D878D5921C725FDA3485C058D9FA1CA672411EFF31EDE22BAF340B62D5A
6941B848EA9F56C651DC64D5193631E88C6A70BB78606A9B7EC9CE354EB410A5861206179B65
3211263CB49D512B20EF237BCDE0BB8F89A2013D08AD7F74EB690986E6097062902B4C523B34
E798A7029289C6C43DE12718C6E8ED13A4B987C44A1FB25B69E121BB352BD938695E64981DCD
DBB99DE0A98D21385A29792D9792949B385CC952F2E7C874A75D43D331091B4894C176A42EB0
A8F3D2C56AA95D4FD8813BD56F0F41BA0C769516BCCB1FA3284A9E973C5414300596927D6850
9592E224172ECDF8E90D9962BC4227356932574D951F6A0EEEFAEFAF771A5BC8A07480C424A5
5BC53CFFBB6E4EDE0F6F8FB506B5824086D8CBD0C3A1C20D067A111DEE113523BB7C690D3DC9
1F230DF7073250C779D6D3B1EAC04469D32C787E9425C27D9CED3F514C5962854D8BE3BD9B08
99685D1648E46A1484A7D6B820CF8382034E05EE3BE3E5C41220B68C7F0D7DE690B1A7F2A047
2D11C34CFF62F3D355FB2E237738773DC16420876A539E9A04CF5CB2389DCFD604F258317573
E5F46265BB4D9096639345B76EBCD2E0290721342ADF75FF56FFC00D302DCD7576CF0112C9F0
E30E4943C811081D1B54853777B7BA249E7084F6C5D7CF3C6146F4A3F88364DAA093FA30D248
133DC41005E66C1B56C191E6858ECDA5D3D8663635D796AD9D3548087D8753BCABE34D2CCB70
66CF23EFE18967509D4F3F6DC3318F7827C01AD194F25B20DC2A9D08E4878DC6C4A42902CE15
D2DF0E91D477DCBB5BA0D22EDB471F077E1B8A04F4111EEA04E1B29203839C19610C14B2FEDC
C1D6DAB356BE0FE566CBE184082F89E7C2C70EAF2A5123064A8118919A4655C4E6BC7E5353AA
FB4397FE2980588A678A2B7545D1CD3EF800A64512A1DF23A23249344278150A02804E54670B
FB4402A5FD402415598E1470196FC70F90D43DFB83F9844A2B91D914BFEE9164BDCF1F88117F
1337CE78CFA07C5D37F5F4CDD35CE6C8653CF2073699FC5CF848978E173C27B545ED35DE88D3
BD45F85782E5E51A9C2213C2DB65ACDB8E74274F7BA880A1DA7205FAB07E86A650499B8B2595
9C1DF4443A003F2616A68266C7BA1636767FDDBF3F50D432628E5219BDE4658DDAC984EADB62
F9DB863571E4DA74D24024C2491725427509469F5325E424B48993707071EC3C45006F1986E8
79D359606027510D5383E2178D016B402A18B914247E0095F9B7F905ED97386780B1120D3909
93ABAB3D18A36A2EB9BB8BAC2F084602F8BAD9CB754FEC8F3F4A263F48263C270EC619E73C0D
1E9178CFF739670A55CE6B1FC8EC2DB82795AFEB2135444801378862BB1FE4188C1C027840EB
A39E431A4D33F1DB6657F1DA89D2CF31C9BFC649A36C1DA8B28E993B4EA3B00742522FAFE528
9F1C736D6BA6DC95EBCA8DD45AE1FA4053411CE9AC5F768E3F20E2E0B799173B5D0B1FC393EA
7C86D8D75B511BA49B22ABCCFC43D9EB05B92B773728F9D2C14F0ACF1BE7C551FC2B8AD0258A
B348D9972B1939F9907B6135BE10B0D5FBFAF7BF857711DD5874C904544E12D6598A30E426D4
BD5ADA82F18AA5A78E5AF27E29C2B084A59DD2FD8DFC883B28296FEE1E9C143723667CAA3469
730DE83F2766A0B7F67025E941E600A3CF54BBD06D7AEBD95B80A6F05BC1D4FFE50E7FED9351
FA364B282B4A7D252F17C2C6FD50BE1A7DE88EC69E9436F8BB2BEEB6070668CE0A55AF51AF2E
9AB88DC3809EFD3BCBFA40778054EDCE6EE4D5E890187C340D22A7BDAA66B7D1FBA0C82F1B31
596699294BA2DFB4CA8DD08BB5B1DAFD4CB81049C186A7E91CA85BF3CD725084CABE2AD14BDA
65B947C107F93D8FBBC10A0243F9CA18B9868D6BB70963922B30D619BAFE6F632023C56281AF
A39376F838EE378AD1C6D7296DF4AE79E0D932B0DC027164EF2AA38CD543FB81DA48D884F056
3F53A28B59A2A9A0546805F55A60B2DAAE5CA90988508F9C8E5109FE3F6C8BF8B72A5E8D9286
E673216696D80FBDE4CD2AFF31A575DD7BD6FC45556E300127317DD0DF074B25594EE07DDBF4
31F5E3D2468F761DB02A85ECED800FACEA52139A1740D8891405121316E4D300D5F5B683811A
978EEF289D0F78D1CC00C25C539D2E828095A5C55F010771F694EAAF8E5C895204ACB45C902F
047DA19D518978528C07387828A977A9A845A06A2EE18C1EACE655C3E6F730AABC43E04C939F
73EEBBFF7B1BAB91912D3DA93E464AABFDA0335DC7037015AC17215D7D0A02AA486C3C7BEA98
16C11F027B577341BCFA10063C7AB567122B837AD85C5F47631FD54D82313CC04E1B2233F92E
E844A6DC0197E797A936CDD10C58BB35C138C7C5F84181A9EF67246E815D4B355877564A07F7
4E8C240EFFD757DE474BEFD4C66A3D50CBA5B7DB5F78EDF2A17766B38F5D8AB4B90DA090F75F
AC311E44A27AC3A5466BC6BE3AFA08B8B2EB31D998A45108A77B7ADE2E95835103DED4FC26DC
3CA70F5A29D76292475876563C5E5B7E12B2DBAD372FAD8EC7E6BCEF4FCC7E01469E39AB46C5
B3CFCDFA60DD550776B9748AA5581957F2D884063FE1920790EADCA2BF8387FC9232766D8FE7
2BBA9B326445813052B28D1B974F6221346D1B60C35678A23B9CEF0B87522233FE575C1C49F5
F0606D764B02B5EA88BBC38EF7B7D96B41EBE26DE64B5DBB69ADF3BC2CB73A046B20C3A2CA1F
7500D1F82362AAE79EF98A1AE987976CFADF7B041F82FB582B5FC6BFCD69187B839CB2BC18FC
AC9881DB194A8282BF236A8A1A1FE37C4C5C96505705B2D29BB01B70313C82C49D5162011DBA
746019D131ED8B94E200E1EB2A72E59A57C7D9584B46991514F2FBAD9045BBBFF0756B638177
676AB0A4A717CA9CCB454D2E157D90A15688AA1D4B3FE43CD6F25034BEE45158EC8EC94D8363
027E0D4E18D13C6A77D9D97B0E55AD6B2DCC0E7B77D6A942F7BFB3F26328ACDAE1D4DEDE1C6E
8310540CA38E0D4A9BD2C9DB61DA674716F3BCAFC3A43BF5E63B4E723CF453241009E1E8853D
F56FB8B61E969461A479F4EB860AA7B3DCA2276623A688177C0E3F4D35E6BA3802973CD5C15A
F7BB6FD30A4F630D30D6D9F976291DBBA055A7E2A665434921AC00F211147BA146D78CC9E00D
2E1956C15A95AA4DCAA66DC6A73ACADF828385FDF1CB047C6A1D64ABC5575458EFF7A8B0518F
459BC0CCEA2F5BE6C17C6B2FF5D9D6671CDB4D1EBCDCEDE311EBDBC46FFE4CE5925174FB6867
BD8782FBB5DF89A3E09B0E3A1351CCEDF95B919F5089793F82FEB57BC6A103F8CE6EB84AF506
C4ADD60A88295B0ACEAFEA03D417664F98C420B2FABE59DD85837D7F54804C5AA04ACB78C21F
6338989335200E5723EBE2B61F1AFE37374BD1281DB67EBB38CD7B6FF4955087D91DB6E50527
AC35D289DE10863B9CAF2F18A24B497A2E837B92E18DCB298E95A553152A94A0A0DA2A2589B8
6FB2A1FF9D9CA0E8482F2ED922A1805C7A6502C1EC0CE0DE7DD93D9D030CDC1425763008F573
5AAFD3BEBABEA1EF6E61E081513C5955F787650D381A05D0B806D2FB47314B962E717C3828DE
D4653BDDDA36DFE2131AA67583BD95D70872D1912C8635C5D188B42DD25F15E56FD0B7C8DA49
0157007B6D8241A3FFA3C8E3B105E233F6FA1FA4360A56E4A6D1DE7DBF15F9A9B298154129D4
3FA9B8208C40A519569B4C783B2787848930DDA9C566C58933F3BBA994BAD9C573D0130F818C
AFEEF9EF6B21CC05DA1CE1392F8F29D5550385D2F784B65705ED82A1ED75EF46537F3D336E91
FE5FA1843B843403DE927FA880CDAC0EECAF031D05E7F293D0644AFE6233583230A0D831E228
5B10CB3F25FB8CB7019A6C0BF054A5FA3A97CB6AB89FDD920E51B3DD8ACBC965A193FF0F09DA
90C0791C747422188DA90E2E9FDFCE7CEA252CFAFAF2616559FE7886C2E5C2B399F01A92BF00
8101111551D8495869B29620BEBF01FD091CBF8124DF8F433ED7E11F61FB6D3EFBB8338C8C9A
9AD85FEBEB8157F33E399CFB06A07487A28EA0946285667BE432D44195192F0CAB2460E5228F
0273629B9718A09656AD687B0B097919147AB0040A8882E5DF6067AFCEE5ED0DF2591493F01D
EB106D2BFB242F822A4E478A3C587BDA9E3F521898D0DD3020C30C999721A4E2DDAA72FF600E
D8481E7AD89C5E0A3A548442A5E117C8005BFB8216EDBB85DC1206320D903855BCFE52EE480B
F2514761D5E70ACD27EC36294B8EE83166769B1B7911D4C6A6E768A82BA9C6BB114FF803C532
590B1BF90E91FED98B2CF78378AE408D5013731547C548EBD62BEEADC32BB41796BC13C2A230
0827C5F717D4AC53B31DF3E1824AD1C5D4638DA0DE14B1D9ADBCDACA45CD024F14272CF3FF7B
F297EC6BBAA06566F599882F42C14AFEFBCBE9F0F0296A9FAFCC0DD04E24AB71118EEE1F8051
755D3F9A1ADE015374D5A6C7473AA23189A35C39CEE4022C5746C57DBA2208289A117DAF48DB
979BA835DBA59E4F5378B00283F49A82B5212EE30CE2BB037F628B9CCDD05E9F405AAD364F76
32B5C0338638B678F7FF9611C9E7AA59A50E28F5CE3582550453AF5B383798E03BC755A85C31
EFE9FF7F7A855103B16FCCA4168A7D47D0B0792BC52DEB56AB0C88F1E4C1B86C8382B5E825F1
D020D74229B25E40B774A1CF6EE02A298447C2E5DA5B4801416E3A27542EE0583BFF6B2CE90D
A6DA91B6814D58460015E6A6F6DDD3A804725E38C4E6E8A5D810075DC614FAF54DE04C99CB09
2E37B4FEC55AF9177B2D32A570F18D0E5FC556E3BFDB7C7EF95003EB25C1803FCF40D95D2762
DB4BA428DAD4F874F08E2852DFE9A9D22EDCB8A8A81AEB4DB000100694A0775C326877E3BA84
03732C640B82FF394717EFD48403550A7000A982A4E4B53BF01C0FB6A3F7756EFA462EFA06E5
61A72C7FFB24B3DEE827AC35E1EB302CDE6776285946826EDACFC9FA595C7D722DE059A6FF17
B6A1774FB4556398881108D239491FA4AD855237A8547AA55906DBE482F5B97979C885BB65E3
2E38949052E2FD9E714D7219161DA94ECDBFC591BD6EF0A58C4CF5CB13C19453811FFB81D44F
D2CD81997F3EA89B8F0EE379861EE1C7D18667E62A7E363CDD956B8E7CA9BD85794B154EC5EE
A9D3FDB960E272178043F4F0DA163FADFB2AFA9BEA23BA6E3BFC1A2ED7CCBF014B96E58BA2E0
7CC58C3384B38FC8E4CD78732117650C8F7ED5762587BC1663BD46AD4589E17B933EFD553184
391BA1D14881EDD73019485D880E1B1094E720B30E51EC5365E86C36CF2B0524C88477C0D71E
2C05E8B0388BACAD8BC1FD6633B41A18A53CDCAA86D2A7DF1B0B10326B398E208EEDDB3EBE80
516091FB7C46EFF8F08EC4A72DD8A3FCAC779895C14622B141348C7695BD2B861E32B31F3E71
A2DF12B0A7ADB96EC0C8C47386FB906C34603043EE4EFEACB7B610AFDAA4F19147532B2193DE
D1979B71C9D125590E78C5172C527988DEDE67341E306538CD6A837011130DB62DA87BBA4211
CC87F6815914AB0187B0B947D50FDE31627486245829E1EA5A94599F0E6ED0DB7853ADAE95D7
E6CD82542A14941C207F9794C9224E8DFCD434DEED1E43E7C0B86CAF70F7AE673305894BEB0A
33A840C497D3424B097D1065C57D9CACA4361C2FEAD7193B6CEFC1A10F26B2DF305155D9A392
5C360505C29C40074379B291CD8623556257266BAAD68E219FD9F24305F961E5D6017978173A
5EB177E17057DB577FDCF63FB0D2D45BE7D63F0BC205E7D2F4C1749CC9DEB24E730F1B7420A7
79639237756CA9516170EEA07E607EB3D5627467F65F5DB49CD43FC6D4A3AB2EAD3DF6703EBE
613ECDFDF64B7C9B29B08AEB582DDA25F944167D367F5997B8023564617C517873FFED86CCD7
09565DBF690F9FC22E38A7E619718C9CE7C399995BB01478EB3AB496F1D7E107AFE627C77CC2
944DB98EE2919BE57C144480400FE53970403F4F0DFCF69CA68235F001309841CAA6444EBDE8
B8ED0A1B049C62E57B97FF8E2307573BDAAB8913D220B68A8D551E2E6653F6B14FEBF8755440
47401AB366A900A58DA1C37BA66252EF1874B39974F0E31086BB20961D139AC7D57B8F2F8E8E
D659F0A68CEC598C35237B820A482D624DD5C628339946A0DC68A8BFC2E660E07F11916E951A
C82CE45D7E4D31D2FA5F3D5CD821F7300EBB8B56B7E4A52DCF641A5B267A53DE0BD022B3F928
C1AEDC8AD3F3AFF20EC5E4A5ADE35A5F1E322014A2FB9D19F7D42F994C1E4BEA452E25A090E5
9297B10EFAF537A2D584D86CF900F986C2EB13960B80BC8D133D2E46820112AD9921499FCA16
17DC84AAAEEC403DDCAB8837EB69A24C88407437FC156535A834C29FC06DEE695FE1734DCE89
1BEFD813868AC2ED37A09A9C29BE143C052AE238DA802C5B931D325EB4007FA1554AF96DE6A3
82CCF9CD405368B30209D8F4AF855716F0A78378D1A4152D10A5E3198D5791FC1C7D4AE6BCD1
5BAEBBEE5360CF1D783EC7B15B43F93C20DC09B6A016BB511BC0DB4C4FDC1FF44289447DA34C
C530FCC1988BDE9210505CE07196B5F22FFC400D951537978387DF257562833FE7E76CDD05DA
C3FD37F218433AAD9C2EDD90FDF346B92754FDA1EB1644C8975F1AC271D75F442810C163A2B5
2781B72BAF22D21AD77D41F78325CA190CBBEF27173BA0221486ACAF4935D2966FC34E61D4E9
5A15D40B8060546F99D6402371A4616476AB9843C67F15B2E0C79AFF014A8D115C521FE27572
B9FB39E0C057108866F8067981691466E13F68AC8D6C35F90A347B510F0A30DE09B98DF4129F
9EC2435B7F9E625909B305053B21ACC8B7D03CAC2B42BE5E87D6EE4392E8027E45383E9BD62B
F105FAF9A30E0C91AB1F3C55CB51995D7CDB27B8940402B67B9BB29D1B5955C8333863F71323
8637A42A3B8A56BE9B3B8C21D9CC04E187BEAFEDA56F3135DC4CF13867EDC44BB2537065FBCF
6CC5B4676E3A7D0331B6360C72291A3D9E9584A0E42412D24CD652D2D0A61AE1FADBACC27580
0438531823E31383F3BF75AD2C77A79D87C68E63FB3ABEE97D7C3B89DF29214E613B82E968AF
04E4A016398FDEC55F3F5DCFF53EE4C8F50A979F947A9489D878B7BC6C6D8E3D8BA220F44247
1FBBDBBF20F6B542A766B85B36274C7F59232E86B89BC54912B667887F864FE14B655D600674
E70C7A8F81AD2FB92701D3848E1D4BCBC8D0F4E317AE99D6F23437401E00F7A45E3BA8A10CDA
37ACA54571F16A4FA9BA469F71AC1395D37641E983A846CF7DE08EAF91EAF1B50CB9A9EADBAD
6D726799F70B7D8E9930CA0F60B5E95AD74DE84B9CF0CBA8B5767C12B62B875E9F96CD0AC537
256214C9363A94BC091FC0E8B45FAC9F1547C9A28E29F846ED8821530AB5898D9FDF0A58D506
E2C8BB70F640BEB821AD493B2F544ACA73584CFABE675D45706E9EF6CF8ECE867C1DB79E770E
0E000F30E64661469581DB39DA9CCF9783865BF646CFDD575ED5E5B0D3F398665D076EA19BF8
80C343253B8A86FA250964D45DA4DA056ACE37D73EC9D9C53C0E61CE96DA8C6C12BC3A3BBC40
DD4B95791E43A262BABE81E60126076C7A349AFCAB912C0D0D3B3771AED94F5BA90B9964B745
3BC7B628AA4380072438A6E7AC7C40D5C5AF2E072EB864B30FEBF7970E83574F351FB8F10695
AD664643659538E62266525677BFDB9E59003D79855AAB92E752087F138E79C5D22C6977043F
ABEDEE2F241A0C785C847BCF9B48FB6D1C552D60072FDED1D537277517EFA945669B16CA32B8
B2D8B483268DDCB6F00A3F43DD96F684DF21106792AB1D000F9AD65E85CF1B91467E3D4470F5
B40541F693226A1ECBF8467D6FAB8C8A99D26760643057CC977B92FD2EE52BE5152AA39961BC
2170D23B90BC6D79BB3E13BE3362E81033A0AB5F9902343B0E4254F5CEEEA9D3BD90B8F3D177
8F2CC8C5B1EACC65A2C46A49FB3DBCAB07A8F9A07F4F67A147E960CE643DA0FB451EE8E30158
A2083F4A2521B509383BCFC964ECDEB9680F1D4B5C54114F84027CEA064FBD53A7F1BA318526
BC4A33889FE55712D7496B4617C3FED3ED5357A0B4DB17D162DF05A701256087375FD9674440
36F376A799CD28EF5ABF726E61AE444182661DB46DA17B995CCDAE0B2123D1CC163D2DDF3A42
DBCFD951BCB9AE709F963201D58E5C8CE701BDF2C6111CEB83F6D7C2E7C7013151698312E6D2
FF1617DCE6F2475F6C21BBC83F086E67C53E76735C82E3DECA8EC7458C445748C24E279A6090
CF78BC19ABAFC68854EE2D5EC2E6F4DAEBF37E6948E1ECABA286078E8CEE9FFED59F0937A4E6
2D1B0833A7CDC16516CEB2CEF150AD08AF75951EBA8FC01823BEAA232327089B990039991E31
38451BB972B559AC5012419C2D6362C16A540F6A40B44CC12D35943BA077995048FE5F2B81D7
D85D1EA1E84672E43E333325289E7888FF3C9C7E653056E71201649B70834FB1DAA67F3D01C2
C8D07B5F6308E61C076D9F7DCDF604D652AEA56D5D507A4D727831A5FE3948DA472163C621F8
3C8B2878FD8B96ABCE28B3CD83C9C2E08A8421AF5247CA6E9A8828C78D09206F8052201F970D
485DA2158B6E81C24834B31A8F4F2AECFB89982727DAAB34F2A1CD8016F595C71DD19A7963CD
92395FFCCF248599118754CD8414548B97DF18B9CFFD49163A67DF17ACE0614B218333983C37
16B3AF677EC99E7BAB09B216B9A1527ACCDD137F50E0D37ED634910BA15CF0498EF8B6DE3F1B
846EDB13E22CB55456FB5B9322B395470B5F37C014D6572A3C3FF10B212880AFAC767395BB33
25E3C551A21AF572BBFBB118C9594A5ACC23C0B3523E43FA6AD72B28A37A82FAAB983600CFF6
2CCB4A04915DE391EB5A7183FF5E4F3E4D58A960E49A2B9D2374EC6DA504E854A1B68F5C2925
AF5F847801E7D2FA2C1286EA5F055FB7D222A615371D19D33E26BD537E0E323063D01C1FFE63
190D1D4DB6D5F45298CED7DA97F1CE60819906BDDBFBC5B679D2580CB50218F0E3AE8FD6D06F
DAF8710426A32461123C450B147A01080873511DA44E95DE756BE0E6157176AB43BDE5A9E745
9135E063DCD5A0A6F7779CE73E09A2902A2F040CDD62E0B033A7B3D48A1CC38C69D219FC44E8
0D61C1DDC6E3F553168913980ED2FF3858BE6C382C5BFD1E823430588DE1749F7C21081437A1
91A54DB980D028AD30D6DEBCA652341C0F6E4B211FE3247FCA193380155C9513386FEE05B3F8
3363DF205D7D109503011CC569F5E62F44BA7D1ECE2DD4533F1BF4157FB346D8BF38A0748588
741764FC50E7ED40E7B58AEDEE8CE96D7F09FAE151C18C006330B3B6FF12D152AE50D23C197F
461DEA3E4BF5EAF6C3EF700FCCBDF738AF1B2E4C28B1A514BC19A3AA5ADEC18046D75092C2EA
9DC70C6D98D2EC25CD0235253480FEADBF416032296995F5E94982A874EE09527348E31EF84F
21224F5F0531F85486A77FEDBCC60539A27AF619CAAB23E2699758529B157C7F2BAA75123A1C
5AF2F39A29C41B7E77AD0BB0D1290501CDF0555595583D04E447E75013915C459468E8378E5B
6146AD5451ACC0E902EAC8ED877DA0E6BE58ED89BEF43A870E1C155F08F8CF2998B494E5D887
A1E0A7085CC19177EBEFC6206D3726AA1148E9306F364B724AF7D5263BACFF0E977D399CCB58
EC653CF81F125989EC81F2224A363847709E6AB95FEFEF0537161D36CE2F1F36143F0DD6B139
9B31C02EFCEBD869359560BDE67B215FC88CF307AE81F39D793446C3F3A92F81E41E4C4AC627
0ED0A7D4C69702FB4C6CACA87CB1542DC76DD3D728D7FF25DBF1D491F121B27AA35B39296D48
E85D7EAE16452BFF1D9B4E211E9FBED567C9842D1F1503EC75777B01F4FEDB4F199CAFE1C559
47B17D087ABDCF0E7B5835AF7C82C3D9A4ADC368D78A2B1D46B2337C0CFC7A9F8FD3A87C6830
0C2B1EEAF6EA1ED0DF35F0D4DD92C01F76E50B84C879EE4D11510A0211C19A77E2680E4EB2E9
73513EB8B7764551FF139A1028267CFB2406333BF1C9D13286C7EA902E2756216EB1435189D3
FC0954CCFC970440775F6D106561EC34B2750ACDE5303D25DA50E29FCA7E3AD78322ED26ACFE
F57ACC243E7648BB168C9925CB5B57E2EBC48F0E8604974215FD03958EE95CA8F25172CC8C99
92B0EE94AF3E37F74D87C93ED14D96C15FFA788246AD6E73BCE2E8242405C5FBD3D01F8AB617
332AF525DD448BA8327A6260D2D2A3813318F46D7620EF1F9AC539ACBDA49DF39E17B8303A22
B575E5E8B8FFEAD8B7DDBDA7F9C29230279ACEE05D25704E230C837C09F5BF61FBA7AFEC8B44
8C76A83E80DEF396194BD7CE0274C3346023DF99302687CF624704788151F8FED792463BDC87
12EA74DA79710DAF5E059D1A72BFE36D6E1D688785DAAE4CC1E5D6167133E2BE54AA567D6149
AC06139EB1F705C29157F8F5A6431CE5B57374BF68C1D56373B87114722EAE982F7E9837C52D
FD5BBD681311B1B68A8E78050A96BD14A374280F541778778F76532D7F9F7FA31F41AE5C8193
D4009E8EF285F96F4668797A0A36A92D6C7004AB9E8D374CABF4CA99D072807AB7A2A6F137B7
A1B1DCA1995138F432F18C488D20E4C296823E72122101ED3FCF9D5AD16C4A911A951E59F2E1
ECB61B6A2C9844E571862EAC09A7902979F9E670AB5A47E4107FAFC36B0B25C85B109C98847F
7811960D3E0408A9DFB48C21C2E4F540F314C6225067F0B9AE3F507D637C3F053EA154529952
C9EE790AEFABD75C9A0FF001A021A39C58906DFF73952AAE28816D999955C446EE5B82455E4D
AC525656AB41A857139192B72057289F02DD6E2342F3DE1E5DEBECC81532E106BD06AE97DB72
E8F335C7FD6335A7B9647D38B8314B28742A8D6CFD6C037913CA3F10B77B0133C67C9130CA87
32FFF366EF89D3F57C223C28CB622AC956453071B85C068D131E981EDBB9BEA673D4B9797EA0
5BFA78F7FBBFD715353FAC5000055BB7AB0E5F8822941361225B119E4F20F108A4A2D77420BF
BFD8DB7A3C2E053C4925BFF27CFCDEF223E73DD02D55F6ED833791AB74A79DE8D16FA1F6E56C
B5E1284B1E2414DEB7AA020B4ED8AE44BF6EE6E433E82A0D6123D871DCB14DB07F4631E69F1A
70E3DC7A61E434C0468FAB02381732BEB2B958A6AACBB31CC5347F1968A863CC6C17626009B1
47C3F7D2764F46F89476032526FD0B1D884981AF0DC2708D1A7C7BB6548EDA90D7C67BD93B25
6A36D4975BC9C9E774D93D2D123DB84023AF2EFA22F7F8923582D4434A6AFDC98D831BBBE89F
107E2BF6F2E8BFB314C20FD8660FA50EF01BC8489812048F8AD827BB0C0A2E63435C488DEAA1
78DDB75D4D76B60CF95D07DE85F5764B5484F377788F49ADD2545A8B8BB81CB11E52B1964577
E3B34F3505B2ADE76BE512A0EBCDED10D35DDB2510B372AB71CA71ADC085701C7A5AC7F47FF2
EC11912EC6EF53A8DF4E2F823A66479594E70E14D78B2BE6108AF4D077650C5FE03CCB17AC04
952977F668B887C9C426C2EDE490E28211D8034C7226D128A1B91B20631F505143AB1537B371
709ADB7D7812638416493A4A2EBC27DACC8501E83677D7CAEC05E7FC8CDA2D17FBBAD16FFDC4
7035478AE84CA72C5F644BEB0904D2325968B9E8065ECBEC37269E6D9BFA3CA975CD06C19F1F
23B073D58E06151FF11ECD71F20445C2A6900AB9CD54D4C8D3845C6FEA080E42F758214DC001
27582F6A6DB20958DA4DCCF3452B5ACE051496927CEC7CEF42C0268C9517DCA4D146BE0B4B00
D7E510737F28AE1407998D095D89354BFA32738F113FA4DFD1CC28FC16177F14AA8EF8350CC3
5793E01E77FDC2699638A0D269ECA8EB21C94D05632E3B43FC33AE57F5F808C0059F22F1FBBC
A884EF91D744E54A8DB6D51EA9F083D89A0571C5E7D85DB94BA8550828E75A61967427330638
8EB7BBEB8F69BE203E9C9027EA35C98C4A3B5622A11F434204BAA008F3BE852484C7A61D7DE8
1C5752E8C600C8DB896E608BC8BDADA3767DCF3A6ADA32C482B8CBE17B416783AB018243FDEF
5BCB84A2294954DF5D1F4937A17699B039B9694A20637DFC8AAD926173D935652F626696ACB6
3D8CD8AB36CAB2499F44A3FEA78A99BB3BF16FA52EA267672DA977CF2D5AFC1E49967DC04A26
E1A849FE20D826BEF6629CD6DC568EE87D4EB3DC9CC291D829AF1251AE6220AB60E7D750E8BD
F7BC635C69C94656E638AFB9DA6A5DDD853777F26B0B6167B4CACA08ECB0BAE84068B24E1EEA
874FE583A10FB7CE5E581791235427784C0E1BF18C584BF5F2330AFC21C26E98BFF1305462E0
E8FD02D13AD10D33031D60924433583380A48B976569C182BB636E98D39F9966DB853058BE02
ABC7E978C7C2F45D8F0DA754F51CB3454A25CBEE824FCE9782D077B8CC67846FB33CBE7C7F64
E13AE587E4096D7797D51401D309B06D5A87E1467125B7EB3C9E4315CF6C60B31FE767287C66
9BB0BCAF25CF0E2D22EAB00DF82EDB90EBFC6B8F1649582B444E6337A7FA2C925F677B4AE829
26A60FEB9D30F95EDA59B86C0658184F2482A9F09DA453B88D256A2479FF03D8033681200A50
5D43B1A9E61AB71262EE3C7ECB51FA62D6046A9F35596A0543DEC82E2452508F0DA86C5EF6AA
105D10FD1F2769501A4FCF49861CBEA6696BCB76A8E3E84DB2F43DA6A17053E9FB2CB459AB7E
A91A80E20932386D9F3ADDA23D2E4A1CF5D6BA73B477824ABE16BA45E641F34104708129D896
3A5D972092D360BC6C16A53DFC76157F227E71EC621BC9E1C9DA074901C4C288702566A5C863
9C39144EE346158716D7CD94739742B94496DE1DB825337342F7CDD6DE68BDB54708AB9E4969
5031B07DF9366C3ED0AEDB35BD60513A249AB38D6BC44472638A17B537F89E6BF1DD367097AF
E4DA5809F9D9013D5AFD8C92A2CFA6E040F28ABD7E0A0D56BF97EEC35CCD8D212E5A772B33D1
512546F4C35DC1CA4CC666B01B5B8FA9F517CE409F26D3710C519F68E411E47AED69B8000FF3
DF955943A0CBD6EAB124A6BC157ADEF8626D8AB9F6910B18E950619146C84287713C4F3E6A33
11A7D10A15F396760F43F6BFC144F74C0D3246C8F9E3FEBDCE96036B6AC4316085CDCB72E7FE
52D732B83D65F48E5D23B6E5E948E5AE2BD5686ADFEFA3FD4601B096BFBF04D4924384B764FE
34D29C5E61629DB5956B8A3F7C326D7B8D2C01EBBA6D875557BAD134B422A591FB636F6FB325
179A1548DC183FC94CBE924BE379A5779FE2ADDE9D652D78400CDC677EF0CDC08A85BFAF5022
BCA9054BD0B49DA4DDB77CA9F6D2C97A4145731D48D822089E687481DFF711E2AD61428DBCA2
2C6DAED292450E9D6BCE00B79FC3EB027683352DA7A200948F06B2946E42F8DC88FC22D43D22
E4527C4C0CC4153A285D78339C2C9D30F7C1A9D014986BCAAD3ED6DB41D66C981A1B0B460F74
39A06C2F319A2F2EB24CF6485E6B46447F908BB4730875090700733CC22C5E0263E53E80FE56
862FD336D263245C2D433C5F4ABAAA7A81B2427F9AC8595498140CB8461893D7D1311075DF42
2DCEA23AB71F12DC8909A0AB787219977214836D085D456A053A193561C26A5D4DC2DF3B99E0
ED34A9FBD688977EED1D18EFF8E8D617628DB902988D1B3066A62FA123C26235368A21B79D68
022248664C93C241BC7AB24FAB0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000

cleartomark
{restore}if


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /theta put
dup 66 /B put
dup 71 /G put
dup 73 /I put
dup 84 /T put
dup 100 /d put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709006B68486B326967A28D
41E878EF9CDFFA015BFD11310CB2305640182A131B96D73348B7ED8D31A29D7F
2D889D8EC4F6C7A55DD179594ABED611CE4DE790CDDCB68CC677A362B879F4A7
F4F84113A561F6D170454B0DC4DB2F973E21176E5B00D0774F0BDB3F0E22D753
FDC635611AC85411D57FCE2CC85BB5DAE17BC41F3C1E5CA1BE272ECDEC1C574E
E68E33D269E90877555B1E9AF694D44B85295968D0CCDAC4B5EEFD6E6F284597
DC1016F2D7502E91FD71BA624C499BC62FE7B4734070F8C123A633E51596A0ED
00F273E0DD044A7DF055D633040BF5853FE171E3442C0A00DD938476920CF678
69A9DDF5A29AACE82231873F15E4EA92B37F9045EB711B4939EBC0785F347643
5792033AB924266D8734301BA52C5192F8B32AE780CC9D48C832833999E78819
CC4FEBEAAAD11210EA3D220AC1798A5781DFBE3E47C31D0B5A0B87147FFD44C2
0F4FEF9B7C06072E0398F740D8BBD3FB1B9920AE84C085461C1F5C08F4251173
001AC878E423340D008E73A1F49B6058DBD668C43C513C35AE8144FD672DF548
C439A883086F14F419820F312F3127097B59ECB9ED4D16EFFBCCFF0CF648981B
B0F888C510C0CB3C45918E92417F6CC39A8288A88398390816BB3FAC62D2051C
CCC0A389D730EAD6B05AD28D4311178DFBFE442372B08A31D416B78B71520456
64620D9D0A3FA3E8BA66A32F7839E4410B48557459EB0918274A879B02E0392E
5AF97B16F09D2B8A3B514BC1BB5467D359020C43A00570AAEBD3DBF637154F71
9A636A9700C081553E214361B2B57EDA19BBCCF098E1870D0846736F0649DCA8
FCCCB124E1FADDFAF3D5925CEF54EFE72CD0D2BDB735D18B4103C1DBDCD8EACB
15EA2822AC4D8AFF79F1746B14ACDB6FC83D45B9D3E972710DEF408694402960
947DA3B6BF54DA82FFEBC510725C300BA2FB19A603ECB41DC86E8ACD2DA44C5D
157E7B53ABA05461DA40B675F081053377364DEE80EF4EDC65A99750A337D1FC
360908DDFDA1D097729126AE06EE723A37E6B0AC10F2D31DFCF9E2B1FCDE1E3B
8B9659D7801E8E456B952F3A503F4AAE7A878CD75F948199CA27C1838AD62C53
887F68EED03DE18F36FAFB39DCB99A05EBF8355DA8D365ADD468CCF773F3D5F4
82480A69070C62EDF9CE6E41E6C4AEF2CE7215F9FB88D09FE4D1FCC0B5C4214A
D810A3E22CBBCDCC9538BB8AA51657E0899BDFD5F2D7837F89EC2075440673EF
6003FED63F5F59BD71275379538EBFC5BFD8C93AC879D09B847670F103540645
FF66168961B75C245FAD7929F7EC83DC5EF376AE43E5B5DED91030783F8CBB69
6DC6C00AA4C418F45F2D92CFEA647A6508A8ED9E91F2F7001A3D0E8A24476CEB
3AF69E875DE4F7903EFBA303AA20BCAD87F68AFC451C5C820686E2FCC1C5829B
850435286174AB730D720DB084E04E02D80CDF95E32FB0FE39D11A9D53C18C34
BFD2A9E7C30286F21F06F5AAA11CBD0F974ADE59B8F97069B08A4EDB0707B8D7
67B3085676EADB90FCF6FAB4B71CEFB43381D43711CCA936D0011C53E7B33D5B
50ED7BF3F41289F4880253F153AAC4D8526D51B72E18F4D38022545893B243D0
2A196F9653441D5D99563AD6A015995764F5EADB67B3085676EADB90FCF6FAB4
B71CEFB43381D4371DB9B29A54F4F4B2D472C74909CC47C1675DC6FB983E6DEE
42A4F1FDF566CE2D15EB3191C4BAF4825F0BD48EC26A2D26D003FF8EB066C37D
E9A2FE3BD8838B1AB45566C1D73A8143C8A24C4A470432BD989259DAECF5E55C
E8564BF98E2ED4035F548D83105EBEA32BFF57CCAF7B1BBDBFD03F1D86407B4C
0B513DED0D40C5F3D1370EBBEC492E388596C9A417FA313A689EA733B47EC4BE
EA45EC8FF4A38162E543B16DB28737686019BD92F0EE1141E2ED2390E4F7F966
87F9FEF35B3516A5C52AD90B403D1CC796FBEFB59D6C47481855966057A4D10A
0508705816F74A5EC727A54276098A47D1FEB4D00778574D027E778197FA8CA9
BCD407D22EB5D8E0CD0AE4288A643E9F955264EF3FB071D3790CFE319DBE43F1
3E1470ED910D32D0B0E5769B4BCDD0BA12236084412AFFBD097F69C6A177AF4C
E72F15F1C12298F442B885E420C7AB98F9A91648F3E80D344B5FFDF8A01B970D
12A8ABAE65B7A87690825EAD68E1C970503369C085DCC0121EC5D3002D5573D8
0A463F779B573848CE1C62022AEF708E574FF06F6674CC130E73F84CB59A7F88
21A4A63B0394560D212D2737317B96F912D87CE1148C84B38AC9FEBD6FAAC4DD
BA0FA820ED01925A56A4DEA997E13C575DDD3B7B93BCC25188E3EEF56378FAB1
ED25CD853C1471A1446F92F43D75BF0A91BFC7415580F187D03CEF1C4312CF3B
D6C68D0B1F81A78E543340F90E6A6A4E90007E643D36E18CD77938291992A13C
B557767B73F9EE0780EB2C56F1B24C861105DF1ED75E1D0018E34A46786D0F3F
C9E1A124AB0DCF2A4F5A743699D229C4FBEEB0CF394E7DD6B20786F710DF15D9
C793AAD2368AE2C1E26B677096CB250A4A42BC77CC4FBB9D6503CDB2C2C991BF
7F90AD0A3FA9BE312C60F3F68C49016AF89D5142FD19CA46343FF6BC5152848B
9ADC842709D3B1B2438AEE4B6934AC8067B71E2B3CFD15C624061D0D899EE1D1
595A6A4865541756A0B3C8527C57B6F550043EF2F5FF1EAF0C47AAD7B02C0CD2
276F59FF6003985A53530C0A5F6465B836E9B828701A4E338382074EFBD015F4
7F47E6BBA54B06338968C13FAF5F79C26CC5766A5AC4D0C1B26176A6A19FE9F5
5FE9C7E706CC8499EED9D3B7A83D44635C0BC4729E76482CED2204ED3F11DBDD
AE5AD1F1AF936D7A3EA6229CEB596AC0944EFA5AA2CC3E613DC27A7916EB915C
44CB9E2627401B8FDDCBBB86DC00A9342DD5E9A68248B33AACD8337E50E71518
138EF23C11382393300C2ABD176CA2D38B54C27BC490487EAB48A727CBD4E0E3
C161BC2294C70E893C239A7F079C85F68CC26A4D258790EAD9119A9422738868
859ED54B628FC7EA9533CE6F9E3083CEBF6B82C90BECFF5F985E94C49D9E77A8
1C5AC551CEACAD988FC6BF2727D6B2422EFD15DA2DA26A77360A6E4B8E2FFDE3
E5992D4B5D739B90CBF20AAB3F03E60E36CCA07AE82F7E71085CD4EE111201C5
B66BFE822A25C973C5D0D7E9713586C7FAAC4EEFAE1A71E7F967DBB397D85818
74CB4A523EB9AE75757DB0BCCBC707FA756BD7B77FF2E56225C780EC0A49842C
19F19AD1A00F0EE06303317C079DA8146FA21B89D173EF9EF803CC5C314E5A66
EC0F0EBB5187A87A9FFE8D3F83988EB746FC1771ED29529E68BE50A5C6554F91
B3EAD582E5C25FED543F0C959CAB70887D6FF0A30E225DBBFB138A69396876FA
3313495F081F5D7F6F14DE89487700C7C9BA479F6E9F3716A9678A3AA2EA18D3
C22FA516177E9304BB308EE3E96963C16619EE19F03A1A47A22507886432214D
5F61B1F0CC8FC786EF75C025C1CD45A7E9BECFFE880C515FE326456846587169
35AB362D65C77F144AFD5B3D3196309B40965700344FCF5580D1A45F012728E3
A24066FEAEE4DE6421E949D25D00FEDF675E9C68060461006BF764CE188EE081
EBB5ADB46B9A29E9DB2DA17AEB1630B5DB78BC80E3045212FC9B593E6C2EC667
64159D68B9372BD64CC9A4DA49400A900CCD33A8153A337A6323968FBC74061C
DB9050C896AA98CC7A66F0E06CC59F0B3BF2A7C19EB28D48F5911D815D495E5F
7EF42EF55BB1FC28B6512C21A16329844F14172A41C62AA3683E9671B4329C47
850959AE53E1D4939A4EF3E237CC1E19F0A9C3A3DD17A329D320AB5C9EBAC6B3
766D049CA416D839DA5A734D13A905CABF94E3D6575DF00AA6EF837F84D6971F
A7D53A7B6341F9CE59FB5EF2FB9F1ADEAC805713EDB900EEDEC313B82758AAD4
CC72BFFDCBAE200133FEC3F94A1E373A58535E8463F641841E8758948B2D6DD2
416EA5EFC7DD4BEE4D95EA3E049D5C25FEF900425F99A74466081F0A4D513A27
34CC1247C139F4E499C617E123A3C3430E0AF385057F2ABE0CA97EEEE7465BA0
9F595991A836ECD0256CBE9BB8BE9F8C8409CD1231C10731BDDDF375ABF3A22D
CB707125F78BA1BDD7EABC017F16C118F62133F9077C3A85345922A575D8A911
41A8C770C064C264ED634699774B5A71E81A5EABD76047E0455717409A896CA6
304A254589FBBE4B2DAEC794B17F13C6A33F6160A49BF32CD890A1A947701E63
47A9B03F861220507D6A1EE55FE75E7F409FE0A55C6391E91CB5282084E901E3
C7EBD211C2997BAD4B01CD64D06663453E5086E281D67072FEC5AF14EDDC7AA1
B9E53A3C6F623B0486D0549A214A1822C61507E49EB30692C003DE3C4808F77E
1C5DD30BE1B3DBF68E600552BCAB8604CF04EC5D7F00D300486F71B442DAC27A
607A7F2EB6D1EF70A8F7D75C1F33C952D1C4E4593FA6641F4B412875C55A7D98
D1C36C598A00263BE2A8B541F9CD99E32BBF0328F0E0337CA6FF317C2408B077
1F6696D31690D45CA6163CCFFD0A44675F0267DB1AF1016C7CC99AA57E3F8636
C08EEB1809236D68003BC5AFBD104D64820E9B401E8ACFE720A8A62C641858C0
A6E448F204487675AF7614910DC81959881AD62BA73362DFB62B4596142F1D82
554C7D0BD3B50BA0DDD65E822748BFB8E57A4096AB54A720838E343C1124F29A
42C170465125FC46D8539F3F31A6477C5D4C355A8F96854D4AE20793EE0A0DB1
B1CDAE40DF52C2CF15
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 14 /ffi put
dup 34 /quotedblright put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8A6F08DC7B007337B688E610C55A35496196C01E6F8C3
C7ACEA49F6AFA7FD9CC809E9916813F64BB5704664DD21422F8F32477EB874E4
D86593B4D4050C116B8861EFDC6BE1ABCBF942F0BBBF4E4241C418DD1263F252
B16F904E5B650CFC5763390916625B28ECE4C39C55CA937E28093E66A9837BBD
98666F090E8E06F1934736F800CDD0E78706E3F1CE6D2EE55CC48D1302770DDB
A139EEEFCF8353D4473D89EAD552B810E0F1737A6636D15265E0FA2699BA071D
8FAD4052FA4248CF3FC58DF33249361F6F7D5246F7390AA1567144A9CFE082E9
314A2F472333D9FC189B5C4AAFC823A880D0CC7C8C48CDD889C32B21D1039D83
7843E9006E45183D8EE9E2C9F251C2C52ADDBF0CF8D36FAF8D7EA598347DA637
7CF6DE19B1FB026AAA9EEF637E3552A7488EF1C6BD4527618E130C45F9542282
9886E7A7DE1A3BDEC7A82AFCCA6489DE33B452DA8D32EBBB65199E8BB6578567
1E7B5AEC770ADF6BB3D4665054BB87C5FA9C587F22DCAB97963A57A4A9499A74
BECBE5C940F1CE1B5F11F6562C94BB7F6B58387D242832E80FD223673C3C0AA4
0D2E64F9661C62F404E83B81221DE3A8594B54FD7D1737262101EFFFCF36E035
9C6B07B35C0EF50A49561845F6D55AA043448D99E566E7B4D80EEB63E5B175CC
DFE80B87354687453959848ADFB734DFF7DD93FB063EDD60B99A7A80EC0763D3
F4897FAB65D5409B14366E3198F89FF38B30D8400BBA8C3A975E9BD3D3E9018D
69A4C0A49A29966F3662E1266ADBFA17560D71386F76290D727A7940BE558A17
433DFE44BBF6A8CCA00CBD121750F3403F5233259D0494C3E4EBD6DBBF977F12
CEA357D651855D98DDADE6C4587E8A5A5DA9BFD4187A86A7E224AC1A4E272DF7
5A930E5AE65122150CA6345B41993A10BB42C94BE623E59986EAA5FAB49B3149
6465339A80AA6EA8D37011FFB4897D2FACFA2F9BFD478A8D715C8C1088EE2464
E756E9D6450520B32D7A29E3C295294E4558FADB9C2ED36BE64F75FA15C6D0EF
AA9209D5D17036279D7B507F01AD3ACE0D70C8348547B4E01C6BDEDA8239EDAD
D27E8AFB63440E1629221060DFD2B3B181DCF110D39E8B2131637B502FE5C574
BA36EBBEF8385BA3EA99B77C95F8D03782072E4D4648070BAF70B2D7D0D00C41
B39F23007ACFEA7ED8E1F98CD08E47853E1F635C634EAA427EBD394A1F17672C
43D9297D81722AE01F30F972786B741D648F6EEF5BD178D748C313F769C700BF
85D14C78E65D36F178EB9C860315D5D6828FDDFC54D5FB82AB267370A32E6A3F
56B3488F717E33E1934B0C9CC7C9DD280AE72E33B7FC89205F558A2C098D2E74
1B2E585578476A1B9DEFB3DF34B14B96D34E7F25ADBE12FC8512AC127BBEF1EC
FF040BD37EF47CCCF387FC135231C1DF792B5B9C0B2687D33604098815AB4D16
0B857AFF1F208435A4FDEF78402DF793D6361003D82640BCC542A9E02B276BEB
28F57090161644B395E791FA75682F232097EACA638897134E631E735D79D786
3540B9391CF8C0A4D135DBC91B422DDD96E83A1253BC235AB6F5921D2FEFCFA3
A069DD3B345D6984CADEDD7B8509C12DD26A223C0298CF07114B15A1A3D03DBA
E53AD1E9C1EA0ABCCA9D1BE6B9EF5CF1B4D8FDFD4565278BD6148E9EC9A88A59
961C2601BDA3618B612B10D9583EE522196D041663AF9944DF9C8EFE3AC442D2
DB65AEC68C18C2B9DBA0F40655A173A4A4491C6EE9A38CE03C8C9DC89EBE71F7
7B959A8372D04AABFCA1062D4A3AD5696E3C58D1E012CFB19A2E9C3EB2B307F8
87AABE58D8F137DF219D0B2A8B26945E0B089560D8B009CF95927204785D8DFB
04B19A6B7C21014FC254FDAC840B1CDB8B7DCC5E2A7AA508BC3A434857D8AB02
613336404D9F919C2D1C0BAA82767130FA26CAF8F6BD719DDE9B7CC9DE8F5C8B
0370B8328C87B54085AE0AFD8479FBF822E73321DDB70133EEC4BEBB5EA7FFF9
06E05FA4AF45C7498BBECA2E7F3C7281E22E6ABA61CB0B83F9D0C867C6B3E820
7382C6551766A1C9762F29C31FB09D86F0C5269F7E0E5EC7A87B073EA33C295B
A26BA106E21E89A79D95041A860EA92A66C0348F0FE6AD86F9B8FE7F094CB2EB
B307B8A43718162868BC3F9CBCE1D5324ECE6CFC4C17CC9F00D88D669E40DE11
1A580E8911FC8F66313F65B078EFACAFABE98371E5D9F4299E7F1B9CA7F52F1A
7F59D941F87F95B5BAE261FFB6578B9A446572D5F2E470B01738E1BE007783B6
DC49CF1E576FB30803D2116807E49DEF79ADF3C89198BE5D038DA82BA50FC490
9F85F50337824A695C429FFFDC666F55D0365E28DD7294867052697665E71689
D4668841AE18E7B7C4083F811236C6CCA20542ED1A26EE750B103D609016A5BB
248A7B7A56A9B2FA44FC37A4D2F88F02BBAEFE57186A54F2C00894CB239F36A2
BA6309557540798DD6349F3902032985384ED6CB7EF284828F24C2B533B4B322
3CF3998BF5D6999AEBD7EC996096783343CCEB9E5DB6B6A7B572D1208FD515A0
57B2F224DEA0CEE853052E32A1C5BD56AA9BD1A657A334AB7C8C8EF80F434049
FFF26BF6F70A30E3ECCA28454B92E4055E229D10F0E53C079C3929F005101BFB
87A340D7F052B07A8B0F735BA046895452E6EC68796C2BA2417DA9EC5606FF79
923130DAB1FC246B59459A7C9D3DD418DA2470A1B439D4667F4255EEDFA8B4F0
DD560DBEF8F0103762AA2DE6D94ACAEB8D0CFCEE73CEC566C38BF0826CCB6EDF
0463AED1502101CD5510BB5EDA05F957BB26C6DC5FF6F1B524699592B8660101
B2F2AD85D166867F3CBA391771CCADDC292D9B8A0F1E2E1CE4972F5FE8B7024D
478EF28C33E5D3602188DAA0C7A9F93D541651CD027DE14CDF9FD7F015BBF020
3D9C3F62E317889934557387C4B53698B0483B6B418C63BAF1C837BE47D9C862
2DDAA8E84B98F330519C26945B8101ED76DF6450FAAE0A9101C2278A7CF88CC2
4C83A1E19F866719F33E8F8751B372B28B6573AAAFD5EC066E0CF02A1623FC68
0EEF8BDEA09CBAC8ED110F5FAAF90B20546F20D1DB2B39E79692E70C5F017173
48E7E4D9BD81E0DE54DD22C7B2E078143CA803E9917EE04931DF3CDEA94B6FCF
1BEFA7385512E7B892A8E46802D8AB54E97BBA59D2BE487E6C2AB60021F46B45
7F7458BDCCC4A98BC7F60C399C0CA839E3470F55B189393867BAAB38FF01A9DB
CF2730C10173C1FDE3DA2EF9B2EAA9AA836DBDEAD37C9AFAA88682BBD3214AEE
195F94AC3B72A415F5D0C8E76C119E84ED94506365C22DD8711B7AAEDEAA58E2
E2EE675861DFBD8BD76A32B1F3A7A51C76EA6A6EC82EB86FA6C0803C4BF6AE60
998BD35893DAB0FCBD14179BB13B36244FB92EF393C0E4AD1527FD03A7B908C0
1054497B5BE55B403DB622E96DB025E032EBCA156BAFB74A7D622DF0B55C12FD
92F85FA0132E3DC83C69AD2DFF48AA53B92C947BCAB8C714550195D1C48640E3
C910C945C2DB5288F5D02E4252B68F3BAA4FE07FA9A2583A27AD5A7355F9AC46
B5B41AF6416B3A636ACF0354251F5EFA5E859ED449B37C3EB73B7CB109D07290
B568819596A4C6083E3776B2393F4D000B09374E248FA0F80B0D3B477E9F1965
B30165D8C401A8D3A5ABA97EA0FA66F8ABF4ED21B0AA005D2FDF658AA8C24B03
E352882FB7537B09B8638BD0236E9EDE8B75018190CB632B0934EF554E2A0607
BA1CED18CC2253833921E5CB31C28BFCC36F8928FF35E3B8BA0C55FA377DFA68
80F577507F3CA613FF568AD011FFB1ECC93A92D82F30297D047F2D4319A46CF6
297A24FA4B1E7B8C9E097BF415CBC63F9162547BF48F640CFD8FA2B7A44EAB6B
FA13E3009A8E8FA05BEC44C7F2A169CBFD2176B8B8FB396AD375C93473C2A20E
93F25A0298E7D16B2819F42415FDFD49BD62659153F59760B044C300D048B7AF
7204921BAD327625E2597E84E47CA738301DCA2C938F70FCE180655F92D3D123
4953C9CE33CA4E2EF44A2FC28AF49B6EA529322179D749AC33D6142922BD90C6
24A10280DC300B732E66B2E51E2FCEA7CCD514A420F95745DE36192E5C729728
28DEC8BD5E60E7A5301F2B45118A49D6CBD531C577DA38D5B0FB479FBEE7A10B
D5701E288CDD66519C48B886F133C3C2792A42338D36F53361EF7B757D4DDC5B
376E46D4796DC0CA3B31B9BF3524A009FFAAA520A605019E95956C05060577A0
D70F5921FC6F80033CFD9B815D4BE395CEA41395323EE08FF567E450CD94E13D
01920933ED925CB4BB2BBBA0630F890C5B2F3E1F2E77AF0F52D4195D3FB854CD
862C380F0E0FFA7AE056FF5250D3110AFF0C4E8B5022F62F5CBC40A4A22AC29A
E63013D133831EADA4A0E141E7EEC3103BF27249FAD04F812DC4C8132BEEC4C3
0EABD7784FD1AD98BA3D5EF4CC2693A871A755A2E1AC8DE5C20E698BC803A7DD
3BAA623AA6465E68663B53021A5C1F06B1A0707A42F6C1E0E149A3EB0DE67D45
FE12F6155031B382A022944E02CB6D47E44E960EBB435E00B5B4CC51D4960FD6
2EED2E7B1F237E37078AD0C280A95633C9CAE115D8BFD413DA249BAD7232130D
2553C445A261AEBE6181F7A75E18B4BF457E46C93296B54C1FF9785DB13980FD
9A7CE4447BFF583B72C7E1D40FB495B9B4A8BEC39F8F9A9DD93A3778259F7D78
5D0728D1D4977013577D505CA11A234C66CB53DC81472C060557FEF5B2883583
85D8D95F1C1E39E2530A9AE03BA78D5137FC79DDDBB3B91D3E634AC299AF18DB
BB66B6383AD886627EC4C0374DDBE8E4C0948D36800F9477A47EDE375F9D6CB4
B762843403D2B84C9A0199638931F020EE8F29031AAAC1096F09FFAC43FD4F69
2AB281984EE6678D455EC2CD3F3D1B33D05CD0A66BA29F8F754417B01E877374
3B16A9750129AFB31F04CA8E9D7CE2796A78203FC89ACA4681F3B4C17994C108
C8D59BD9FA80E67E567F4FAFA1C20E9D74B70A59507DE1CFA8ACA54E4CCDF9D7
BA4C870A65C425010AEDB5516D3B9E303EDC2B87E72A0FA0308B8C2697F107A9
FF3461E5A616142CF879DFD78EDCEC6652101A123980F9ED2AADCDF02555731A
C2519AE757D032504C0380928A8870A856D40DAF0339E47952641FCC7AF10B35
E7575B199E6A7BA8AB5DD1DC3A6264E104E76DDF031932ACEF4115F0352FA9BB
C916F6FEA6CD9159BED9FEAEA732818FD85B1C645BBF40FAF6D444FE166FAF5A
C88B783103172BD1F7641E6274E0A09EA1D17FD7E24EF1576E7DC69D30B8F24D
88C07DA74D8CBDC82A51AE32A4A51993F6698578920B4C10A07B6A48FCC93444
F62E875A85EACFBDF09C7A7E4189E3763DA4BE34F01CFD70281B32E20FD18FE4
AE1463A66326BBC2A63590AB5FC3D4FCE2D6094F7740FAE2B398CD0BECF8AB47
A1F05811BDD717C510149CD213058F7F26652AEED6594895E813BEEAB1A7DD59
0BFAFC048AD72C202DB13D3268D9371AF3B2D4ED58BE041CC8B61C921D2BAE24
07645DCB57477147154FB84F364E06CA025E9DBDC82A20D871D6AFFF2580D313
82E8847E87C7CFBEA776ADD3F2315F34850FA45BCA28622E0D532EBDC14DAEA6
6002AA030334BF2B53B17C0226BF557763ECC003BE8A1A27E47E41F3DC3E0C1D
C58BFCF2FD7644453F4C071CB0653BAD62C785E47890773ABEAFC79597268ED5
6723A9E164C7A76E7E26F87397BF925DF2557FB62A38F28A86E918D16F361125
632EEE21EEC41F18A8027BD5AA1C0A54830C0B9405F63B07460EFD14E4C803B1
597CE446AA8F3FDA85341BC0BA6CC248D0C49327A760153C526DDBEACDA28F45
42963E932CB5A233C1E68CFC3B69E3909DD5398F37FCD246466A1E73EBA097F6
E8D10DE7B3278FA3619E3D729125DEBFC5716C7F0176501813D3735EA971AA0C
7FB63EF71641A31FA84DF25C99BE7492347FFBC7738ADC5498AB54D0CECD2B67
1F6E322DE515EF7D53C95641EDA35CB5AC1802219CE8E00AC76A780EFFBB86BD
D5F26CAC4070CE7143C79F3A0C4FD5DBBCE3AF95639E356629D0F88F224AFE99
C4CE4A6A8AF6674426CEAE9BAF187244C8E2C33EA2B27FAD708BDF19B66A2916
3755D5337ECFCA16AB8136CD6AF2F0FB658EFA5A572E9B3ABF4691E84CF21FA8
DCD67FF3332BFCAEEDA710EF199E0B952D8E9350505EA9AD0F9FDC54464268AD
02E796E7662B96096DA9C77D7694A8EE21D2F144072666A498CF6AB1C5F19581
52D727FC2091E166389965DFB340D14CBB163197E3FB40BA2715648B76BF3B70
40F637FC3E77B8411E9F6AC65EE9C066C4902AC32B41E3D4648B70E214AB0120
DB1898EF4BF80789D37C36097F8C0DE9402F2D2A0B6D36E458D450604A86D132
4AE3C676008BF88B9A4495D2062DA1D85EA151A72314A27D590547D912FFB8CA
E594FCB71FD5C140F78207B872B4F176EF6499E7A351FE9F02FAC606AAA48A86
79C45CF069648F34FFCD5FE37DBE923245F9196DB03811E2EA59326D625F47F5
C3602656D01E0BEB6F62D41DE5AE158B7785061C0102DA592B6CC843C3A3F565
EB8EB6B4FF8220B7E93E92E2360D49BA2BEDD517A0682AC1C2A6066F620040BA
23CEACEE520EA3154800AA5A36555BA9C0E6B09AD09BD9E39BD283521B1AF170
65CF1B5C0A74B4764303F0DA0DD006C24B9674071EC758CE93E184E3F083A516
9269C8416964F409CB09E3C78E3EC3CCB4C0B932278FBB01F7A7441BA7BF3AE1
273BEDF54130BBF883D4543CA130D221C64D9FE0AA97F0567815D3E7D6806545
486D5F83046E0BA47D92C93F3AAF798C57758BE298596B26F22AA216C5ECC68F
97967C5A2C4B41D49E4C04BA0253976ADDF4E1ED470162D3FF75DDEFB74D97C1
8D1D6BF96D555FF53B4E2DD36C9BE92D18879BDD6EF00701CF48783049D7A01B
3BADF090D7DB6B85CFAC825371730A11A8B53FAD769F60C9D2D5B3154EDC67D6
A3068252899F91102FBD5E0BB66BC5DB63C278FBC87F1FBCC6322CF44D2C8D19
3C18583ABAB705AE0690DB9B0FAE551094495E14672AD16EF3D70478A1A775AF
22E5C897778E700010F6749F3C4F7F46C54E38616EB834689E7ED4111F164A48
B03C5B802B1EA838F94D2B0F513BA60945A03C52AEEC9AD5C8F3C7ED4FF0F802
64B6D3DF4ADDC28E7C28DDC080D2D7ECDD4465D80770F7FF5485CA0F75659CF2
13F3D16275FC418E90EE7BFE8BBF0AE52DC0F92C1A95EE14894C259948768BD3
DF7A6BB6186B778FE90E0997313570F5EFD8D0B1F79DBE83B6B783D4FD2625A2
BD8C3220FC33EAA2112423FEFC2506FD81EE88F0ED02718423DB7C912FDB2664
3A0ECB30BCDC932323B37F4F05F439BDFBAEA53A5AA15A5DC5F5489CA4BFBCDD
3FCDD2E19EC27EF63BAAC814EAF6F036F96A504CBA43389FF441F7F99B4EC8CC
76E20588E960FBB5CCE383DF15A52961C4CC564062F11D7B14094CC33524C442
094671105DFA58305BFB1B22DBDB17522E1163C993B29A7DFA54148E8B66A697
401D857A10526887CE1788B33468150AA330647519699EDC997E1A020949B9A7
C69286FECE50B4B4FA294923578542D025A8B6DE1BE42190ECF34D7B90A82EA5
4054072154F73FABFA8D1C25C153D8B76CE2274A174E5F8A151D9B6A12706F64
D4C400A68E32994BDEADB42628B7A59A362B11C1631C3806017F679E3B0AAF79
4368EBDC79D54549659B5E34C661DE8E15E497C98E5234893E2BE86300DBB824
B7547B98BCDE9CE4215849A942F5DB3FBB1231DE6D2CF2DB8576B0F1EC8DDF4B
8F2049E1965E0564ADC80CC58F4DC0C86AA5EE7DEF9A9D5845920175D1980554
3E7AE8AA7999605A775DA2AE20F64CDE71648308D92515A2DF80B3441527C8A0
2960E43907356C4837B9C0361CF18BB208505438142BBFBE1D6C1E398195FABA
4D1E8304466B18A01F09EB93FCF4BF883FB59DA956650EB11505364977C9C35C
B362FF8F28ED7917AD968E408A7C44CBE1153668839E516BF300C1E5C4866846
853014358836663F583C0D70536D604E9681C6ABE72227467F979B8436B69AF4
6B338D45A7040498346C2FCB3ACD1F990B4C2FE90BB4F31DDB49E938B440649F
84A1844DAE7E48DAA2DC056592CBFE9C2BE18E2441B02F1E94BB25AFF5FBAB14
63EB8DE128915C6894F754DC60DFC04791B912281592A5080B2F3784A4CC2B6E
7910F996297033B239B8187CD2F07FC30AA40DD5BF3BD04847769A27BC58A606
22695A5AD42CBB9510088DBD1AE35601F4A94B11A826511FAF2BA7E61D926EFF
0274037B773ABD9758BB90F4CDC471DE76659B8E19A02AE0FD41499E3FFB15D7
716D071D816417677697757B1E8A855F6EB3CA41044D9844621F10A00969982B
E0FFF16C91C04E4A5FF649B2793CCDFBC10EEFAB046D866BFF849E00BE411590
CFF2453AD11B09D0F3403E20CCFD967DDBB598E9D1A629F3A9460BD5EAC7D57E
BBF4996E22139BA3633930FDD05F2BBCB451CB193A0358C190CA0603D910B6C4
FD2105F7A21CCB5458F7B609246C4D27E0F1A6583CC1F6D4C1D2E5560F41EBDA
6D6AA27AFFECEBAFD6A57DA3AE4A0D58AB9285E8204BBA78DEE6E0D14559C546
49E7CE4C574ABF122837C0FE0EE4BE685EEBB1763D753E9C4AA089681E2DCC86
67DD507DB489C4D272D9EE6E0BC730491E33BF745ABFB5D860BACD08EC5016BD
E66E919E89B15680D51F02938F48E4A1760DAADACB3AFA405499EAA5AA98B091
AECE23FB0AEA2948B0A006AB0F702505B540A019B7869A83CBEE8A6FC1BFB385
459E1D65904BC1969F474CBA019060FB9AC7A6B676CE06B6D4F99AC8090DFBCC
DC7EDA4DE481CAF2F1F99FE952801B9FE2CAB3D54CE7D5156BD188DA554AD35D
C9416C81A5D537B3A0703ED767179AAF500D14ECE0893C75705BE10A05743674
839A6947B2A7B43FDF90E84DAC0BA042E773C146FBBE925C0E8763021B266E70
665300847E9E278BE0F19DC93639D2046CCB1A3DE33FB2EA902C57AFD432CD9B
EFAAC93A719B18FA6729D190CD8C2A429A51EE9EA75CC86C58D73BEDF751C846
FDE8ED970D33A9DD3553EE1386FC33236071A4C5F6B505A7E9D28DCAAD720200
C0B76C081D3A21AD8AF75D85F0E075C4CBC8EC0A76FC2B9D14CC18ACED0AD39C
4B056361D179F6773CC9E06BAA66AAC31BA3262719E34FCB2133BDB024C1EDC8
2700A42D31AB168E6997EA47646EC354178BFE1C3CD51F82E1CAD9387B6EBADE
B8FF0D7EF1542D202C5AFA6ECB0D6E8E49E4F0CD02359BD63F8E7AAF0EA12FE3
7ED352F7C6AD722FC00B9123E1D1441B93E618916AC8EB6BC739AE50819C1164
4808D5FEE04F2C799C030F249079C18901F2FBC5B2856A319A96219CE50B8326
92B16760D4B20DC0788EF7619967DF5E764AD7AB5DE8AFC9AC5F2E7EA584333E
CDA7D89235F62FF32C60DB61662CC82EA1D9176177AA6731D4A40BD32AD80165
4442E99C6EC2E81CBB7D0ECDD9C6245B18E54D0E5CED771D2C6D5F64A5B25CA2
8369C5205046522730B88B19080414264674C509A0BA129B1C4FDE5188EBAE54
4B111ABEC649E60E2826C5ED51C3B3640DD65CFDDD2000FCFCDC71B550E9C432
ABF626CEBE3E5B241F1AC4AD3840B8D92228369EF1B9B924C258D8F76F13D4B2
074D494C8C150393879052CE77CB54A2515F37E1E19437423672A26BE8C2814A
6432ECDA4C40F4ECE63A5357CEA3CC7F40B7CC0D7AF6BA10D3513E5522745DBA
3DAAD4802D04FBDCA05E564FB905F256A42F7C31A816940D0BA4716FBEFCCDA7
DAF5EDB8BA1A80C4525507D25DE44564D70949BEC091E754494A95222C4F4974
06C9A98683AEC26E35037A9F39C5EAB93B7C4D9D5EFDB2D46140C7E5AE546168
81917C342E54FA5D76EF48B3142CB3ED64B0BE771EE880A97A2D1797C5F95DC3
CF3D0956A713DC8870FB3A96CC3E36031312DFD8332E12A748E28DD26E0EC1C9
81E7D1394DE33BBD03523BEE342F4838BD0D142687CD93D12C6E1FCEC43C6001
48E37A9F0DCAE4EF9D06DCFD16F5C8834C3A64646E50AEC3A009A8E6EB72AD12
44DC7EC9B66ACEF323B13E4090845363AD2CF401BA7EE6EEF35EA08D80098441
CA1C4F1CC3225CBAFFAE1568D0CFC578016614CCBED7AF47448C6F91D470EF92
4A46E124A1387F68D7A6270AA07722559464C5EE0AFF4B6D993197015D1961C5
A74133E54BED318588D29876998D8203024956C0A871EC924AC0C5A46D67A74C
A107152CA59B23AD0808DA3A4B814F5F4064B77E55BD9AEF9E3747A506A73A30
4CCAE810AD7BE354F43092ADFB651E0784654CE3FC7A9FF027D644E1944D3DC2
8A3AE91D572B78E1279C2AAF6B672754850B70026D046B4FCFBBE12758F8E507
2326F9DD9AF3D929D1CBD7B7670A6F6AE8DD3BCFCFA1B4FCBFAA75CE29D78DB7
24D76A68063F9ADE8917CF10FF29108BC827B0E2800C88163E372F168CC00B35
F03B87108C2A682CD530191B17E059D82525EB37D995EA445E8A70CA2ADECDB0
25AE5597B73FEBDCB03A3951BDAF37A74FA710F79E75FBF424B8BC4C32B122C3
8DC8A3450EB5DA7EEFEBB227E11BC343A7258E05244F6A432AC6B26E8A271098
BBF9731612386A521F1E6E5015C9F425C048AEC16C3A6072DF6AF854F64ED8D5
D6AD12D511C418A96209FB9E7F8F03EC55288F32C1B85E732BE6409075C84E13
D6FD51F21C435BCE72DE6EECE85F0236A3445226B570C35E3981C83544436FCE
73EADFA5B709690683672A312D0BC426966A66A29A0FB9449D76E28AD213FAD1
FFE35F24135CB3515902ACC40AE029135D4844E775F2F41FF6FC28C4CF2F6F23
56AF715EB5F1A1B135B5E5B32F86E1710D4D02008F4835BEDE3B470A2AB9C662
BC07E57005E79443BBC98786A5CED1359DF98797A6F8EA42D2D68A25C6E99957
89D6017B3A6EBDDBFF671C42FDDC1D1010E14C6192C21A5305ACAF2CF432B90D
A34416FC9C805AC90AD6CBAC3F6F339B03ACCEB5D73524C93ABCCF6096190C5E
EAADF6A4B8043C58FFF56FD84F2C80F11D011207AE6BBAB7AF321D65ED8FD406
E35F6A1483E5D2E712566E3245F6A736E7D4907946B2C100D42C24C646474480
22E08E702E7034065BE5F841AC1F60D78689BAC4DC6DC96A2351AEF133D0E3E6
543AECE9BFCBF4319BB84FBBBF4491756C3F513E9FF6EA102C82D74FB5FADF50
B7985B24BB4AE84027F89368CC5D562865A38BAACE766FA61731317BC8E3FEC0
ADF40C4FABB79614818F449EC75CA900ABB51A058888385C5C8D8A8C59753724
B6543A9792F734039B7C3BD8C7A4FCDB3BA5465008B54DCE78B346FED51329FA
973E4A0C1972E13FD3FA261901E45276BBCD0756E12855D3DAD6F072B5EAD53F
FCFB3704C7468C7415F26555C82FD1333E263D75BA6DBAB176AB733B0FB7803A
6BF70C74D8EFEF0C01F462662D4E14700119BB6A7C51D809B53C8DD83EC9D854
6F62C1B4AFEF19C517B3BA30BE17DC757A832D33A128121009CB08691F4330C8
6CCE8E00A2C2F8985BA70B38CB0A58DD7A50C8AB31A2D5DF6415EBBF855E08F4
434D4CEA016FF2BD4BD9C85F2711751532088425E52A5D1FAFF6D30582C2BD46
990235B6B88CBA6600F4411BF6D6A51450D6CD3AE9CB5C4D9C048017B5DBD962
7AD550623A6992A07E32159803052B0071CDE21A74DD00A8415D70BD546375EF
80A5DB882F1DF4EA16E5E99B8A6FFD5A1E780B8EE30883B14047C2CF514D2D5F
378EE8766BE6EB4CD521C8520AC2EE3F33A25C54C66D6A1957E93A7CA01EC011
268FDA9439294FB6ACA1E5959A563B1A6574AB790CF302B1765CD827F6EA9762
826BDAFDCA2445E72F14DFCA48B06CBEEFCBEE4645D053E3CEA8461C8A9D1D78
06C8CECEB79F8163C8D73BA20046291976966720A6DD79DD2D47D6E7E024D933
FFBDA2C496DD755CFC1FDDCB76DAC99871DD135F74081E4F454073C275BCE55D
D9868F193D14924559951FA40C9137127D268D62D7E06B3684DFA258EBD8D18A
BCD6FB7D573342CEB72CBFC983B8A1CCCC3744B2F602B27C135722A94F46694F
34538FBC7471DC4DE503ACF1F407EDE9AC02D261A81D4D87E401ECCBF6DF45A6
93D080AFF89C877143782B11D03B4F020369A59F758A4FF75B5F43FC595EA781
6B995745C66B5F3CEAF0B8A27EC4A175E6DC66C07479BB7DFB46DAA01D6B3275
C2101D596C82E365FC7E38A99D7C3E00EACC1D8AFA5D6D8E208AF20AEA544764
D6E64650E5E37DFDF36D7CFA638FB94D87CC95BBFBDB0720AE5BC165F7200C6A
CE8CE1EEC16E605369B15EB5E93BB8F296B8180472307047AEF17484505DAB46
A4E12044B764EF7B01396250BE932A97BC3D7E7D8963CCA791151BC8CC2E2633
D517BAFA95F5B8237631A627B6A0DF1CECB688D6B591FA625EB75FE7433E16AF
92B1C5758E49E8EBCA26BAD28156533D894AAE0E7A28C318FAEBB4E3BBB64F97
A3006EE225BAEEAF988697213181603FC0911E77B9BF9DA5B4D92791238AA390
7927F986736389BFD576826B14E27F51D26C141D22423247F7A36CBFA870D8A2
B4A4CB5EA4D02651B7F56C7DC846DF4E2E2D9DB04409FA76B1B79D2C2F32B1E1
B756F601DD70446F42C7ACE55771F0905735D75A6FF69599952274A2904C4FB2
B543877DA81401591951E7F18D39DB9F6C6A9DC1EF698B93140BFBD5A23ABCA0
C6B6DC18FFBD418F157E22997E594D67E5C535E483530A6339446241AD9908FA
760E5C87B59061548233A0158B731B4FE48D05FFAA918D9EFCDEF90BEC49473A
F406250E82F6E338A356043BDD00DB1CC8A620569373627D0BB49D55B74D0904
16C993ABE0CA2E73D0A4784E38E074CA1A62F87656FE30A5D67FC1322BE0A8D8
8019376B3F879A1E9D75CBA999789B039DB2DE617AEEAE981A2A694413094458
FB157B697D74BD3346A7690A4FCEA3A75FD8EDF6FBD6BA2FE421
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 89 /Y put
dup 95 /dotaccent put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 127 /dieresis put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70D89F53B1D72088642CD07D1DC4C7263A7EC
9785A2EBF8CA24D40E2C60CAF478FAFBEA8A27A55CE0320FE47E2512D88D1244
95CBCA87983B8795DBE8C15ECA68CDDBDEB167512E91930A7FB226994EE4487A
D1E69C7E7908AAA5D45BE3B0D1072BF1F36C6368AF31FC583EC20E6634FA5777
5ACA6512C5114593C89A9FA5772BD7C4C2FA987C6CF164C2564BD1502C3042FC
860D2A57D5DD11848588A0264C6A7AF607D175EBC791022DED8909929C00B48C
2CF4EC05B43963F1DD6EAAA0506953CF028F59D81B51256DFEE6967960E4D051
03EA65DA9A2CD6C3FCDF0035EEA5E1DDED3914331792901E33FAA564DD27DEB6
C3C1F3E5D6BFB2FD09F7CF7CA34DD96B23D1CCB82A4941404FB4F247E8CE3302
65D8E7EB5B27A24256A5F3210287BE3902AD16F5458B750A7C0B3985DEED5A0D
C238C3DACFCF77A57A20AF3A78C3558CD41BB20473514794714D6489821700E1
D255081FD1D1A34F576A44DBB85A11469AE3FC74E496B34CF76178C6984DD267
3C18BEF93AE613ABFBEAA382ABBF59E7E01EB6276C48DA16E82637FB4895026B
5A00D40F813095C5B91657AE035E3E2CBEB6CEE72E183598D8EAC164B8FA0236
513F665C79641B965B37302F17AD6190AC0AC41D63C6E64BF8530C7B29C7F611
8632010C0DB859D28129091323E27878D5889AD7C3E50DD1A9B9F8BD06910798
110C9CE758C0F485E2F9985510A0AE40C6AB8D990498CAAE562E91C9DEA51985
934EBCD050BE5E13E0E907363571EFBA35681C651B6DE1EF0DF9DBA44F2D5BA7
276D7BC15ABC6A6EDD6DCF08E743D018703F8151968DAF293126631DDE4C9F3E
D866F9B0F65E50E6F51CCB4863BDF80C00843726CBBC8DD105CAA851980E98F6
CF770A3891966FF21911CCF6090E81CC9AD8B9915044AE579B85A1139CB5F123
2D38B8D346CBFEB6C71F0420A81439C71BE6E799809260AD48EDB51155EE8DEA
A5D8BF97D47EBE17835B129DCE119A552B4F2B9552C806812CC3A5F57E694342
9CDA359710475B910A7CD5C831C5B851BFE7A61126B8F14D6D66DCC05BE1D6F2
1292C34A01C4B59870C299062558E82F9E48725ED77AAABB1C0D2EB87A1081DC
B92766073D0058EFDF3F28F4ACB82DB4F7A554310DA9EF27CCD56C66532C89A6
DE5E136CC89F5D9B3479346186EBB314EF23B02FF74972B068EC9DA6BE008C59
2ED940F00254F46B63F201C25F0F62530439DE5ED5361FB4688799C8E339BCE5
D84E7C5C96BDE7A7BC8C75F96C405752D4A8D6D8E48702AFECC4B3EEABE5A8D0
D41FB5560851FEB13300783A9075C65E2E035546B34E2D233B3A2AE1C95AF2BA
343C307B5CFAF79A5701EF5A3FDA1DAC8F01EFD3C62508742762A6DB99585C44
D149E26279D5BB971BAB5F5B21CC7932C851C5EBC04EDF2F213D3A42F697692E
3C2AD7558DC1F39B6C1057D9618705BE654D5F0CA43614DF752C61C1ADB9D7F9
BB6168C183D13103D97E06C1BDCF728B5E1057BBC886E31864401267B9FA78C3
0F4F5DE2422A6CBD79EC8069F8B3C763739CDB96CA944B9E0757898DC1768332
DA5D850DC28EFBC38031F65CB1945FA3D21EC214FD469E9A871F9A3DB3E8E972
34B7417BD48CCB6DDB44237F7A91CD19E7F468AA3A71A9E0D7E893A68EE30A95
A2C8BA0314A6816D37C10526F6FB6DB58742D86EB4270C44665888CFB6840649
FD9C62CC41C55F51F2C156B5EDB6200034954AA9BE6D2AC69A62107CF9A098F0
9BBC511DE7DB5115D16064822292D1E924D1F80744B7AE70CCD4CAC76E6E2F84
EAC4664306267AA1E0E5A6B71FD4100B86DF7B853C6F15ED5BFF5504DED6A05C
0D9A0773ACB1B4E63BE8537F70F734EB194BABDEEB19F78A0347CAE5433D0EBD
ACF2C3AB2304B2803799BF64682D0377D9660BED3E78B7FF41F236781E6751C8
7443A148665115B55B8A2D2126664B3463318156AC467B80A12213E0004A6857
8B97C2C054BAFA527B594ECCB08C527D23CFC7160D47C5D38DBF87385EB1DD67
323614A3B8D5B081E0D7B7F1A96BDDF5588631109D8B0B52C23267E56B333A0F
7E9AFB3E1419EDDDF9DA17D264F431EF93C726EC6B44EB76EA929274ECA1CFBE
283E152D70C2A525F7942C90774DF99977F47846DD23EDC415052D7F4F24852E
9FDF73C7E30EE38C624FFEDF886486004A89D3B9DA87FB611811905A2B5F2F8D
2479417815DA9609582E1400FAAD026247446DC46D29F4EC573932B31F0AB5F2
C3A05D3699F85D7616BE49C5AF43F4EC19D387D38B91513B9380F537E3DB84B9
D323451C8B2E081D04A7E33802B7C219342475096E19EF0AD2BD5900EC7A4B7F
484A55FFA55E183143F1B894A003EDB04F8F5B37251D1819CCCFBBF04832658D
EF0DD213360F66E4B5C7DD542B12E2BAA9AA3CBBCD7792DBC2FAC6F6D64DA0C2
83F55D57CB3010BAEC6C6A4987B1C2E67C4D664D10903D37CB442FEA2432EE76
71166617D045F5F181DF77156B35FC2C7867A95885F677455A98281323C7EB5A
6AD2838896C8E4174C499A0402531DA51070580BBCB8DFB416F3E506A4BC7878
7A5714501B6DD457452EADAECACB7AA71671520FCD2EBE440D6F1F1CFD08E4D6
CB2F5F3D4776CB8C0C126B0B40598152F26A10C03BC58F551A7D12B9DACC8315
1774F87A2AA4C9AA302A2E68B667EFD528158167C6BA509BEDFEE5391B1839BD
183FF0C39B68D9A5A41A98964C8AD318B7078D4F5797EB0CF975D935859C9377
5573A34FCFB0520ED32EA81CF9236CB8573B1B323574A07EF6ABC9D20845936F
C860C80B2E3765EB04CA5B55B9D8808E59F4244C04F400508309AA8655819967
C7CEA6C19254EEC91CAF977B23CA39DFA682961C0A1B5392D0119E621CDFEBE4
BCB76F3FDF58F68061B37DBA1716E23B229A3B6A23F2E7C25CA00C5D7D542071
B778CC5A3952E4F140E567B21B86B77B4E25591D874D96538DA28BBB120565E4
B3649200FC5C77003DBFCAE5B292C0C07802305A41129C93529401E08D12664E
23C2A67686BA947EA453D8A3BA4388A938211D0BE60E3242E3C31FB2B4DB74E3
74DD38CCB11032F69977A00146D424A6D4C222B2F41A5B13A6C562DE633B7CE5
39461489FC7640317E93A0DC9C943AB82718470410A6034EC847C87B531DCF13
92197681E5FF9DF41918F6807C5CDD1D31E8A2A49A9C4B255B5A2BE59B48F5D8
B53CF14CEDB2E03C8E11D5F42B5A285EA655B3E26CF7564CFAC83846AC44FFEF
D6E63B48F47FC48388FAAFBADA1D1A1A6C6DFD8FF9BD7E55A5E73819481CB871
9E8D01C88731855D0871A90ED39734DBE8D45ACB83C5C446AD7AD4B729CC672D
F154ADF03F00AB67688D1F27522A090FC0B67D919B51D050771796B95D5C89EB
DED3C390CD24166ED9B62D1397E4DEC56013917652F23283A8EEB9D46F3DC225
72972457CCB9C070ADE19D6DF7B6A5226C6F5F6CF2B8FEE167F7D3CBBBF86824
950377A4C05D91F0FB72DB06EE865D2E8EBA7C9F12BD6981B7A5CFEAFA21AE6C
39FD533CF34EC0367444E1293B2A53AF462B06C6A2BADF39219A5847B468C194
8C2E32BF321612BC140006B032E225AFE3975F59355FCFF04F1C2095E38FFD02
8C41CEBA2295B17460D8372E34B9BD0848EACFC59A98513D28C579913BE20149
CDE44AD89022962CBE8D7F347C13C82DA93AB560002549B12EB9C71CD02E1E27
CE44DCF2556325F1029A54691519C52277DA990FC58E46BBDA0AC871A4C80860
546FD91F98E4AC84AFAAF0B8C7F9D11DC3B29A853B4657FAE63FD5D84C529D22
7301E94E6FCD4A8EE0F8D41271149DF7322627159A3405877392360F78DEAFA8
192804D5CE88F42A874B42A0EA447D1BA97423165F26B053CDB7A22A4B5A9BC4
6F53DB85096B9169ABCCA94714048ACB809AB6394DE2F38EB7E39BCD8300645A
0928568F290A4D3D1ADACB26AE78ACA60EB48E60F85040D7A751DCDFD4F55499
0F4946C3E4D063F8764331EC90CEEE28EA85B42F2424377CA850845A978069B6
D1E54237B49AF9F6D39748FBF36F5370AC34C36F425CBDC6B472FFF58535EA2C
CDB5FA04033B73A139416FBB438E6250F31FE9DC9CC57680B26CA5C4E4868CFA
333CD2984037DCB298D9249088EFB263CB28DEAA82A4E7CCE852AF48E97409BC
3C0DB9BC4C1B5B39DC7B8C89F425439E2D2F59091D16FB9B24A4E119BCA3100F
F039F3F3A18B5DAA68993A4094F427585EED6041FF6FA956CC814FBD753A6337
815A0B6817CCDCE7DDB3669397E8B7BCD3CD38652ADD5A3D7CF0F8DAFF07618B
0CE3AF101A8716A14258862A5BDEA3CEC771986C2C606DD2512DF346CC70CE09
04CC517D8CABB817E95BA1B88F0DE7653EE5AE3F02239FC7DB081F7D11C28070
EC894589BA0B749BC7E41B4FC8E0FFFFEC4212C17CB1EC34B99568AF245CC11F
6C049215B09A0345D8F22710986AC8CC3B172103CAFA5AF8736ACB073EAE08CB
1BD47B3CF0C8965440821D42377101AA395F4D73B8AC699F2F80D532395FD31F
DC36247C8C5882116C689030D0415D6462E5891887444E8799D62C888C3C18ED
7852E10E9951477F29604FA2C8C9E709357FE18ADCB558898DA486A602CC4B58
3C740BA29EF82E8C4C7A21CAEBF64AD57DAE2AEE151B5BC8F7B9BC60AB9E7807
CA8C48BA295F91E1C35321918C8400707EB1D856EE723F7AC77BF047D7E7AA10
3E8CC12EE391AF464A830EC7C7A014F39373EFB45B24B611D991C4846FE73B72
49B653B720C315D8A24D9DAC581DC1F040BAF2EEFB0FBAB965487FD05C1F4BA9
F9FBFDE4365669265ABFD986E64F3828AA6636EA96A42C66375553CB06E590D8
524146E8A8AC7133724EB7136912DD0AB27B11C59A6360FA833B049F42FC699C
408E924E0FE00A58842541589E88778B2973AA4380D2A9C7373F52993F9FEFB8
D4E075D2C189CB1AC1CE9ABB963ABD5E0271F4F615D10EA8A8F7CFF79023717B
3988422AA451C71EFC5224006EE36FAF7D718C2BBC0EF20233A9307B11C989F2
A637BD936BC17B82AC73B077800C9B3C0A7DA88955604EE42E683D315211A898
7BE478D814CFAD601CEF400BB66CBD81157173739F0E132738D983E334E66A34
0441F25EFA6B2FE84FCFD3B54931119EAF86D84D7477B102EFDF62D4A2AB5253
3AB6C46C84D30571F948225DE8A5D94015098F56F6C5CB554F6EB8DCBF8D3F22
FF06C6F186613ED67F154A7DF9C16485D8703283E03A61CC8DA954D2E4CE0BF3
C96E55683110EC8CA971937907193DE39A8964224E37F18CF407E5B7B54ED91D
A06FE3E4FD770BD2ADEAFAB9B93B3BA0D78BECBFFBE4478DF8C05D999DB7D0F7
27E951546D9068B326B6AA6C5098AB8D0C8E5A66B6679567DF503AACDFE89268
F7FF17B2497DA4440E22AB3E61E97B68BB7E13C32689BD9BE7F639C8B27C1CDF
ED60149D9C7CCB233231E26C06E87D4A4F6BBE8D3AECB44249AC32205B9D7380
AF132DD9077BDD539609B3BC194C7854C544111807EEB3B386FFF56C10528E1B
0FBC5FC9DD95FEF17651F2B5D3EF02AAD922B00ADE5FF67705B0A58106A145B9
5660939C11928E42594853679657F880874999E9C0CD5327E7128AD0AB827D8D
69ECEFD656ED94A8DB8A58B7ED3EE42458BFF881F42781030F48E43708FBA10C
BC2D0893CD14A94A222943B520B0C6D21A9621D5AB1133875987DE8919315FB0
E1E0739A829E760494BBF70003708EF6AB40B90DF321E00490E57279D764AEDA
AC1E3AFD483143BF88B9D600A938667847464A8AFBCEC11644129A690F8E8F78
FBB1437DD2D93B4A9E5D6405A646D7D60ACA7ED9FB6F9C0D6E997C38DB5D11CB
0126F5B8671ECE4079CCF5CFB023E6B55396B641A48DE4DF2FD4D5860B6F10B2
C12110929DB817656F453B71D033B50450F34E860C9ACD2A89BEA57647252FB5
67B4C56D52E1CECFCDE6F794630D674AC5510E1A82DA1F39D2571E3D995E3920
F111B2F9ED091DBC654BA3844EEF2A04942F65A3F546F2836727575C9FDAD3A7
5997AB192B0C2AF14FA1B4F357639246A55C059EEAFE3D065FCF1EA75C7B1C53
32DCCAC7CE97EFA0FF49F87198F5FED08F0FE1EB08C5FF5396EAD30B7377D188
237D1D40903A4EA16F07870E318D16DADBD6E050AD4B8E5B523DB37108145A8F
8A39FFEDD17B450DD83CA98AB310D24411A8A88DF7106FFC8AB52716AD34903A
3BCE2E712BD9D7FFA055F796D7B479A1F8C8AD3BDD0ECDF456A7AD3DD48B7A98
447A56BB528D6F1608ABD57E5A6E9941A9D64DF48AE00C30F4E871045DC79EFE
A6C93A892AADEC14CCA8F8FE2BD12381085A5B9FA2758F6284604C145EC1D4C2
69708A5091602C5890BBC16B870BF82D1CE9088BF6CA50D7F03C339ECF3B33BF
CFBBB6E768D90FCC2D6B8A50CABD2F780F95D95A64FF0CD8E752C9C3A3679936
8B286EE339A08AD7F1F0458A324A7781E3858D2FD803C698DDB02FB754BE4ACD
610F5168D3189061A61EB8129447887EBEEB1DA857F4AD361B89F4512E789C80
BEDC4488E0D03DC8ACECD03F9065616C721D055CB81BEDC785BC7F39546F933D
6F280DFE73BAA39F546E5EC721492AE7C3162A506C0860BFB7F795A333450191
448915451F7D27002A2EDE18C7BB606D34A1C88BFE130E5D4771B5EE1B5DDECD
7AA762E64FC0AA67F29FC12E4BD8CACA5F0DCD4EDF84D868F74B73B434E83705
C2045985F1ED3B287FF3244E5DA74383ED1B72B5F68CA28D0FAEB34AC42BEF38
7A1CF7BB2538BC447437D39D902CD38935612CD5D358854750D4CA6F538C4A05
B46131B18A5F3F003964E6B54369FD0D4B3B88633B72943933F6E8F9FFE22655
E86DB1B073CF86B8C02A53A2C6DBA3CE34247587B5B9B36B621B28C041A9A1DA
58A8E56F28040C51E463D67424806A9025BB0683E817104EF104CB7D72037C93
D7D14F0F337E079EDD686E79A6CEB98AFD919758D8B5597B8507695EE77C306D
E8576659FED4642862D97415F785AE0D619841A8F83702EF2E379A95DFE280B5
8253A6477724DA83253FB100638D9172381A5309BD3792DFEE6C6A684A052D6F
7DB100632A4C173FF23A99AE133D44C6C63664FFDF84AC77FA52522F156279DD
41B89F90B697CE71EA8DAE74443E3B368E99590F811788FD0E787968441AE906
0A9450DDE44C094F5A1AFE53A37487E7E68651B3AAC77E9D2CFC272B6A8B7180
3AEA5F1BA2101061E200DFAAF5508D8080EB49FCD079F11EAAA839DC4B5159CE
51A250249DB375BCF6B1162A3B17B10874E65CF994543F87A92D1B77F82EE8DA
83D572978437C876A59E94323CF765E04BE85EB803C4343FACA00D31F24DF172
01E0CBDF3CBF805D0FC49B4B2F6E65B0F6368C1EF67B5272AF2824153B119517
4BCD9447C809A3D531B964C88203219D9CBED5BB6B958E31C25B37C6629693B0
D1863225F92B0001E7A0EBF335DEED483E47B0FEF23532742267743A9B277AE9
C80D9D473DCAB51E28854F44CAD18D83EF129AE29E5699C49D4E870E39286272
284D61F12F1ADF59568AC887073BEA0AF6617CBB8819D12F201D150856AC1307
F5684F219CF675AFD9A65FAF23F4A72CDB34105F89FD2D3EA91C7DC4D29F8C3E
06F6E50CD5E02F03AC1427AFFDF067FA437189690F60D14565ACBC2190869FCD
862B6F84E33849CA03CD537E550C4410C87CD848AEC760326BC27D3A209D3F94
271B7506508970B936995DBDD0B6A7CA3E78958ECFA8137CA9DCF150F28AD83A
E3A019CDD436DC5C79AB7E731CD44F328FF4E4ACC96702FF3813EEC828AEA32A
CCD8CEB4409FE3A897E8C31465534668F88B181944D139A1E9EE41C015440CA5
F8E524A0A9923F6D875AF45202B955B89A711C91EE783AF1F3F9DA541DE45BAA
B4D1872489A14B50BE5D62EE299427C4753794AE7F5E94725F18EC1A96382F3C
1C784E30631846F3B11A6A235020F1704636F6C9574A4B5BB6DA98F6E44DBD27
C1782E1AC2AB0DB4F16F658D8AD2D97B15BC6C0D8544F50AC5C5872358911D97
F2FEDF91C62357D41B51D9FFD4A59C53A9ED52D8CF124EAB974A51470B7EC40D
A7D32530622048219B29A7F815DAB50B4747A93BC8CAA1019D0012DDB9600E27
3DD0E19FD6CA3356A4CCE6DF159AB2A59337CE4ADFAFBD5F0C5BC069A7E30560
0DD8097D52262A1B193743ADB317E6010709D69109B8CC7E5C9B7F42AAD269F8
2FFDF1E0020A85A5D6B488A1EE18A186AB756DBB2584337A30DF2B979D8EBFF8
E052EA890FA2756D924A5F236D7DA63C8E5F8B0B9890262381EA1A5985486468
3D5545AF33667BCEC7C6CA77370BA3C9796E806D4E3DC0904B6CE96FB0BE0881
5FC6115C191042E1389C98C862B4B68DDD2BF5711E42645AB0E383A2ABCD9A97
E26F468D6270C5A7B1578A45830FB3F9F38DD3C3E332327321591454AD586B11
CD62E98D4BA39D8FD5E685A13447127AFF97E6E48839E6EE15B39E514082742D
77517CD830121ACB9DE4279A9EA6B596FA9116F2C8622792554F2CEFCCB8355F
348CDEF1FC3F63337F251FC8E5B21B0BF337E2E3A14F18C49714102277871976
346068A748CCA1F657A7BA46603999BFCABE02F3595E361C56D16A1D22BFAE2B
4BCB47CBCEE4963E093B06A8D096CDF34D3863E7B0EB169F7B526BAAC6DFB962
90FEFB5E7D3E9361267C072C3CD1B7B2134B84002DB21FF8062ED1C9D2334E29
F0F61593BE953D6C81413585A31F44656432DC1B5CD498BBC5D5AD78DBFA3CF2
BCE57079D89CF53310A334EE5C8FBCDB25F70BF1BEE7B1F3996A694E3F054603
35B49CA71C124E4BDE43B83553C6FE0181D333EBB8D40C6E158AF338817FA247
60E803C49BC901881274DD4546756FF8D722E833CCC8FA4232EDF1889B6D7765
2CAB550D038BE83BD644FE171DCE268B0641704C02006244883452151E951C3F
088E74A8517DAE9FE08CA8518B24BE95E691FD26A2C34C54F0AC51EE78623AFF
63B8AC5C8EB9867EE71D50DB17BE8AD2EE88537B3120E11E809375675802782F
5C3E1D75259B6E7A07383564549565708B09ABE5BD5DCBFDF6D42D124884D23D
7786BE08FEF91894E0BE7D892A60A842A09B20DF0F661F4973B0210E87BF2946
DCA6196F4F09C36DEA5B25D3AC748C27BB73F9F89AB5932B7F754D2DFD292503
E336CF151B90D21A9DF4CD6FF1CFF1A5E73C5854A853C137E7953CA496269053
2722C60039370D43398C89F23BD210E4170156AB2B5BF029D68239BA9C168AF8
41A3443F6000A3A7D4B50A0C4FD049F28B82F4C2D780BF1B076CE5673B44D11F
16AA33F08A3835E27B2542588885B1222B9C4721113918AD73781E00DDF1C596
DC8884C25DF3C2B8207E9B25101057C36D7B85E48BE576D9C8DCF9CE27618BE2
0B3B6FD169EBC711C991C331BD1883B40B02E25932320D747CD0E11874DE8584
49EBEA353983CA4C6969CE42C1BB80A66050AAE35CBA7EDC73FE11F76D65200A
3D83EB49939A5922813BFC79A73FC53520B8A9151A2FFFDB880385A86AFA051A
1DB1682B40A3A92F95C137FD0A152CE185FDED2E455D7A7CE8D108BE64BEDD92
448C943EEE221B3EF1A46C4E4957FAD9F4DFE0D55233BBB82F47F1B4921317FB
09D6D996B55649B15D77868A8688AE55FDA40BD9D3B824DE08470189939366CB
E5EF0DF0F46566669D7620924A965C11DEC9681B770CD63EBD6B82B56533465A
11523C1930626A58E1002BED782C122EBC9D03FD820650E0A90696AAE8DFD05F
7C2417326CBF3301F31B98BA81ABABEE7B76FD8C5C3183D75825B06D5ABF23EF
1CF8AEA7ED0C71CDC0D5553696B4B97BC65CD60012A49060906056998BD756AA
9A825E9A8CA2283AF8A3F6B12AC87B5037CB88906A91A23224EE3136D50EB657
5B866D28F8E732D208E5488E3E020222BC27775FA70C7C7B056F9952D267970A
1A5ECA3C0DCA11D65B35801FA98396FBFAE54C9FCDABF5E2291D5C04D15F2175
C1B09617011169B6C1D4F36CE508131728FB6345D063AFBD3C2EACF27208AA88
12EDF253B71EF521542697ECEC952CA05952196B82563C1CBE4709DC737FB767
5C1B619B2D2E3254C5CF9CF301161C4CF5418E6F925FA0CB3E89CFB45C521965
44F2D9DE99EF6600A068510B49D23D6A371A7C0A03C8AD6E6DD4E2206B493C6B
77905B51692C387D2EF7190EC1D263B98692F98A67875EC81796D9D282DBB600
935FD68A2074EA2106936E3FC9A1B2EE3232337C947D2CC5D3A90F101007C2EC
8F4DF25C51D18C76EF757FB0D8D570D769201DDFCF60ACB423DD21404D4B3D4A
C330E435BA01E94628AF9CBD72AC489AF39CA92374EEA1DFD07732625807D171
75B3AA8E2396F57D01EDEE7B844C5815FA7224B80C783331DA4F556E02A91B9C
2809679D59D5D5E4F035784B88F077D9BEBDB85D48A454BCDBAC1D919CF0DEB7
0A0518371912A25EB92D16C180D453258EB795F748EA5047F3C346055C6C9E4F
D0D9A9CFB35C56142B65243D05F366A732D2F61861590DA2F1A1D431347DBC62
B27B43919D8FC1DF694E76602A71BE60F0F47980C314AC7E135301208E3E768C
6EE80BAAA62FBCAC60B35028544418A3CE51B7B6FE2D931AC77A50B43525328A
2938C3432974FDAEF5710905BF4FAB53C3EFC11FC8F1A4A2144399537CBFDF2C
EB92485F31E05928E5D825C3BDF5F735657F0E25D0B8136F6D80F337C5C87AC1
6C4A7DD37308F62201DB530E5F627D5E26224452216A8E5F7E3A36AF15ACBEC2
539A6E60AB2691C81A81E37AF38768D0259A2D73E229648C81D73521B79A593F
D4C3017895B529C6010E08FC486A2DC26A65F79EDA148FAF935F1AE92EF367DC
51352E0AF1DF5EA748C79672CA844DD917799806E31C60EE0F966966935ED3C5
F3547E4736F9BE62BD3476850417BBC91124483F49CB635EA8568C2A745FC10C
37B76CFC9818E369C20A217D7919193E4D8A5CC7F0434E9CF49C70310544BB94
4EF236A43B3A23D1F90EAC87802B99D9CACE7A12B8C47BA35B8E19688E347FA8
F6616971822B94808B666E17F1D060297365C3727EF460B077A8DE5C3ACD0641
63637943C5AF83BBBAC19C90F486067BF795C2D692E3278E613167D5D527F154
AEF985171BBF3EBA86B0A168A6C6810146D542F11268330B58FC51A788B80750
8B7BE08E3AFE79AF7A046AC4BDAA850068D47F80FEAADF61A3E574388832FCD4
E1DF5EBA5972843B10F227278E84D56A9D29B0E6F0011FF6FE8D32EA356B2A7F
1B346F8835D0D560E5C2AB63C72198A0D61259FD381681BA3EF88E9FAD5E1456
19051E90B188290F76BFFA2B9A1FBBAB17A2CF4F9144FF729B6A280215AC5FD0
EB74347C2DDAB73ED1C56DCDA99224BC69E4EAFFCA0134E3CC06E85A23C6AF81
F36CD9966923D0A21D850A2F10DBE346BF2C3899D644734CCE40FD587A8676FD
507BB55271840F57D41B3ADB3A05CE7495CF37E19AAED47B12697BCCFF33C920
D824C3A24190D0D5D72EFBBCD3563E92432C26DCD22BC7F7984C076A2AA8738A
804E74A900531BAC237CC7A78F76D9E86EDF7ABC1A9C4D28881637F02E20085F
5C78AAD8BCFDBCFF533D0057629BDD6650ABD4D2E0627C950DFA425D345BED59
2ADF3933BF6606D02EC406D8E16C3287F5F80A08F41E6ABA873F0407E24EBD70
AF957AE9677E182A55C6D4F8276AA0E6A4537CB89BE25DCAFCE05638146F0040
ABED311BD629577137ACA7A41D59F7A3D49CB1B43D8D8083B1661B08D65224EA
77048A610D17EFC8EEE011F716EE9C142A21CB91412E8D26273CCD251E740FD8
D3F1269F8A17C97A454FA1CECAC9C4DDFD57F381338F88997BEF158822C32CD9
A82C23E507FD6EDBBB3EBFEA236629B5948B00D1B238C72F25390F3A1D912430
5B45B1B8FFDE2AB51A84AD9ED68B3471DF50945CF55BF778E227E103D940DC05
D3B46F7AF29BF1083A9D796905A9BC89FCD2E188C87F43A6ED21755468B5286B
D33B5B9DFF605280AE9FBAACD4CBDA4FD3D2693E8C68B7853E57352DC937786A
B5253D757B5631ED56247BEE7A755E39DD2A40C082D12D9A5E73A77CA03E032F
B6C5BAF89911F31D01DCF3BF0D8380B8C1E064B17C60B5E30C0C71C55D885E94
11DA7DE48A3DAE77374D0862D7837D5C61442D7AE3F88DC05BFC1EE8F230DE2B
F61656287C29973703F14F8D425A991BFCCD08BA7105BA3F13D82B6C803699E0
3E53832DBBD593C7757D9BCA80CA43739311912C832A9720124405583317EE41
3BE6D30E65ECC779B4D4C34A38570F9E089148D28CE4627527697AE4DF407494
4CE7DE3BE606CA3BD632D77434E280E61536B1156CE0D5DB5CF9845398F86FB7
76B79D1923604C1C63D0F3E054EB8EE4EA93A797C56517D66D8977C6351D50F5
AF719AC8669CF8D56C197DF489579B08B497681A4F9434597F4626A69C1B4F35
B774F7DF0318A323839594BD9B58E6211D94B1F48BCD61D9F30727C19DF9D90C
905230B884896308D38F1DC935AA21B98943902F28EF6AACCD176DC42263DD3C
7FDD5BB072E876DBD746A13AD736AA92E30AC73EDD2A580C81B24E8957B9EB32
BA93AFAC34D8AE4271C13490BBA0218A2971822E781294C3755B54FB635A54DB
B98236581E6192B32E3427648E370863E7FBE7527A78ACEA0032103FCECEA058
235AF3627CAFAFD0F887792BEBFBC03CFA1F59485D24EF751B71D9DF7B7559CD
10D8F57B21ACAAB50CA36D08CF192B238FABBD25333D304EACD69F990F975611
79C2C0F02C9A78D1D0AE3E4601B22F675E0F303FD1AAB299C4539078DE79114C
E7644E4793817324FFB5A09EC7E978D8FC99A3C94AECCEB87522F70DF3BDCB10
4EF66548ADE13654ECEB68E89AB4F6B3719840506FA54019B7DB90011D912487
F473ECE4936036066EE1E78128AF6505F19C3F3211C7FC8F15B2AFABE69FF4B9
B27567546FB1544E7C711EBDC671DCDB7DDCC673278A23643CA677C30F2D2F7A
DB0C43DAA1DECA4E8BCCFB7F8932A916CE870207EAD687A260DCBA52DC30153D
D21A81DEC01816D3196C95C8356263658B8E682DFDD77AB8DB460B38B7B7D54B
21F2E38920487261EDCC75123A752E5784E998E6E68B09DAE454D082A5671BF5
E75AFC1E1F0FD4A68A9B53554386317E9192585A677FB7D0A00CD8BBABA17B13
7997B36FDEAF2A75E2CFC55B5547615812D66E271191DE74342FD324B513DB69
9FC42D8E671F8BD201C54452F17B456FA094C6176BF90BB8ADD8D7A778D56BBD
FE4061E6D3DEFA9A5F201BB34533FDEB6E47C608BC3A2C54435DF39362CABAB3
525CC4D9EF43A625741F9129C3A100FE529F54F57C9ABF5DE4E244DF0F1BC5ED
F27CC589378A3A9255CA6A51A863F03E5CF2ED9278AC4E6674D4F6AB22EE9070
82AD16C1ED24040E19B19DCFBAC994A71C86B7DF75A4643A76C712DB06E2137E
E8A1C9559ADA3D693D3B4FB87138F13EF6FDE634CC6C199994EC540C3DD3D1FB
5C32BF177496D2DFB170E5DF2FD2E473AA7490F2D967C9312A8D3EDCE671CC80
8CE0D4CD9BBA010E7DF879FA4B0ACF6DA5F0388165D6F011C2888F7056A79E25
470FE752E1665C4B7626C6EA729946366AA4586A7464F6B4112BD946A6ECD401
6A12CAE646BF3824EB68D63BC2932AF5BB1BC254C714DE95724CF75502682DD2
159BF151145AE1C229B2F30F2A3274AFF2741C9C2ABF3DF4641BA16234A2595B
8370D2D441299C283A068B467767825BC4EA62DE3E852C681150657A3D9C53F7
5B92FF20B4C7E49A11F789B492B95F1F9B3A55A419D93E654D6A12CD213AB568
87D651A8237A953E86F2029B0BE0D13F1C4382B05C24D384B9E880A38300F0E9
9A715E526B8E12F49479FFED2C971515FC1AF7DA91E5BB66E93490C7ED6E46D8
5936C18DE26C6CBABA9DAAE9ACBE58FDC7DEA53AECF5BF1F285F0A444095A300
AAE56E5D14B76E8C85DF13EF74FADED33635EA69A987194214A64BFA5590F6DE
E7441DD16F301A82FA079F53414F4E56238A497386CB69C9E177E6CF8FC316C2
F102166A22278B2F5149117245D3F93F07FD819027DCEEE2B6F30807B63785C6
A210A2681BE0218448DF8F68809F2B8B9B0A967C9C7E97756B61DD3266C13E46
7FFB8F866CF2F00FD5870D9BF9CC00611C702F36B873D916BAFBDD7E93CC9009
1064349A1F8E7EB93088C626B02FB01E6C0BC8C78141DAAC0E16B7715F8AB192
5D52093C945160AFCBD8D7178CAA77263D3DFE28AC43FD186BC76B61679447AB
C010B00A232880E07F81393B8DDD7676FB18F9D4AB10448CAF98B445DDFF1D30
2A40A3D325E00F912E589B3A26AA781CE8FF19B5337E231786B0C527BCB3B996
BC614E3A67620EC04537B59F037F3C9E20F65AC806F2B67B2C4DD05C63E47638
BEB74EDD45C590FB664D4066E50319DD285C8D551C4D0ED59B5E13072873F1FD
50B18A657520305C37B67EC2338B31E37F4A8F2C0840E0D0DE9D7A7B7B5B119C
D801D649FD48EEC0AC0DA619CA6B882C0031B4540A7C1287976526D711A51FD8
DA30DAC20F3E21939B01DDC1CAE9E473DB676D4966FE81EDF72E7C6A51B250A6
5BB9C17D985C2EF05B9379B7831CA44BCCDEFFB21FB607F84419FC136BC449C5
7AE4DDF864D61274FEA66518D849BD171DEBBA3AB48238E92C88E42251499C18
B3DC7DBA371ABFDD674892B4BAEBE7758B2C02E663E4B406F09F28946A2F4A85
8348E4AC4BC6E3120BF737CDEDD029DD6655C2BD84A84BEC5021680601B1FFEF
709F563798F7C8591548F2C8ACB12E51B5E66B7C654FDB40132121067440C27A
940AAB0523B9A9340E740C367F21BDD0D8FDCB41FAC12CF4BA6AD2DE5E8C9C15
50061B603688E29AF07F3C96488EF7263F1641FE7A05D312462CA53714077168
23CF3EBD9A293368063368EF85954D10C819141441A157F0F27F11F8CDFE7D33
0ACED6CCF0FF6E63AC91A669B63DB4AE668A09BA86172A82D265E7B76605C26B
87DD1E1A2684029B17B747F9D14615D148D865BB869881EFB43A2C30B86667C6
7BB4F2CAB54E7269964DD2FAF4097A7114BFB9B40D539093CF31769F5BB169BC
83259AA125167DDD3AC076EA1012BC73B1E92A33A54D406507B6D9A4C530864B
9FE24A017A0E874E9C2FF0C6130EEAE3F9003D2EC890DD4253FC7E1A155FCC39
B86D383F2D5840EB283BF4D1A2A8A618941EFBA517BE7A3D3754510D7C849752
D86915F5CFA37A7DDAC8CCAA008959EB7B12CDC3159A4A3E458278CDDF90F3EB
193828F01CD53E8E247CA5D0E1F69B683D41EA56C16F6C0ACEDC878A0706A026
A15924D813EBE32E920269516A3FEDF96CB799F813DD42E9C49FF43F887446CE
75391722B3520BF8C45B1618E70A4225AA9C19E429DB6D917218720F23E2936B
5200D761FD461D7E596A17E7C7B7948B6D67422EA4E1E636CCB485BB0FE2F5A4
3D5312F0DF05310C05270543DFD7EF690838D9510409D57D36AD045A50EBD9E3
02E412096A4BEB3C7327EC4D5A77A976A5EE21ED0F0A36C01077ED323D321C38
DC6D9C099BBBC6F4B8F8E28E617B71EE81E89946DA1C27D42E8CBDF767B7A7F5
79E86798408B5A00F92EC4413EDB5E8460DB3516DCF2684936C13D1F6F1A7141
B4313573683F47888604E36546EFD883D8B070AB58DC802A90FDE5DB3A510034
48DC80CBEA24CC8EAB4CA2DAA383DBE0AE45D55354DD41AD186300418B4681EA
0AA2B69DC718F307E80B2988F712E6F81A26832F6A7E249CC1A7CCE86C299381
A209DDE61468A6BFD3B469F179D820226457BE1E1AE5E75247590A24C917EB94
44C771352DF3623BF611996B3F96F9979D4A28486BAD932AD56B5130813EE8CB
4F63F5D083D7AC0D1A18C4A8B2D7201E83057822F5DE2FE2D48727F0EA1F2AC1
A1DED2F5552DC33F6ADF7A4C22F6E64F83E7012F7F5B1BC6D55150925A3C5D90
CDFD6383A5D3A9F15F41267CE7884366427445CF7F8C05B86D0BB7EF9E42D415
0F86D76E4EA586901469F5DE55D0282A0FA6B43973B8DAF1409EA40CF5E027F3
E8A5F41BC3E85A1F76CF4D23FBBE8D16F7A8D79A182523DFCBF1129C61965563
FEC4E79D2BF28AB58F93F4F1E83D0BBFC04089E6F212D8899ED859AA7F744121
8B57F750453FDCC8A2D84220BB0F96456FA7E3AA61A4C9C94463110B2DAFDCDD
0038BCC1E802527A6B8EA26D3CA7A750F728F13D2182685C49738760033A69C5
38F32FE354ADA0AB3244CA0D870D39E1B73CFA933F851C1D687F9E04FD5DEA0F
B07B660ECDFA378A5DFBE47901B5E896C2D03B22978D8995FF9464898340500C
8B63EADEB3015B401A7616D6638A5AD80900C01F1CBC7FB496358B210E61C2AD
02748478F0F145693986455BCD22CE18243161D75CCBA58F0B0AA052B5D7CD78
50DE2C38ED5ADACACFCF58FC71C74CAEE49F2B86B9AC1489677E31A76F799F6A
D5E19F1DDCB89BF769F25EC566676421877066A7A5B9EBD1AFECBD4E815EE7E5
19052DA0574B648A178C1321165BB315C6B4E1230558306CE228A263DA411F96
F51B5C1F6EF63362C10F1113E015286D8277DE2E53EDC72BBCF4C7FFEC52855D
57612A5594DABC03785429451A026845128557EA03A592DD77CDBC22A06F07EE
E9CA72854127E79316B3995B9450F6F2D48DA9BDD89867E285CAA1A8EBF57D2C
24B1C6E3A5929EFAC1BB36F29810D8DE9D60CFC93C52E1503EF8E8C3D1063BC8
3094C31CFB8D06D7773A17E5608E4127FE06F530930D25ED16B7AF57C7FF8D04
BEA74B72448F9776BAD6F69D36681AA6A43DC08D6CD0E809DA65E3A14B60BB6B
608B62D7F35EEAB77B4CD23D4984D0F3DB4CE745D1E40B5C46638BE59331A0EC
7A797ED88189C0A329C2BD3E7FA58AD932C67FD76E0AFCFF93729595AC300131
DE43533D11172DAA60E20B2EA634B773ACBDCDFEFC8B7BD2EA42BCE7687E2802
193A41EB21EFC2DA2F584DCC3F88DD0E52EBF12C059D041738869179A837081B
6AE3522A6D5C4F2BF4D9E45E01BBDFD09C626A63DBD146C3FE426AEA1F687B77
E28A2FB75BE6DF959DA69FCEF03D97ACB215BB3BC938C0810490A25A2E4199E0
3742685F0F2FFD0EA0FAF13C448C09073A73F51FE83B9E6F4C56446E3EC27A64
0E0F498479B274D1A66F16B652D48F238813E0B4EF8339BE262F4EBDC47A3590
57565D52E6A6F612F22FEFA80B6DAE86C5CBAFD7D189EF9F22050924D05C3AE9
A730D13FBF045B0C1C8DBCF94C83C28982B748A932206ECB57A59E0A9D3A00B0
9AE0AFB13F78A1C433F7EF7108C1CD3873D1CB52B28D3D28F31393ABF8A19C36
00CE7287D5F37F2282CF309505712E1F4D384264031FA1D7968B68A7BC2A77EC
D18A9FA6C1B5DFB5FE5D2292CB3159C0F2C60BCD480A1CE8C562766771E80C0F
C041AC5CD94C4DF904BF1DD7A94A678D6C96EB92530A9C346F9FC3C44F196192
79170C0DC92203EA8CF59AEA14DB6DE64978B2585D5F3A8BCCD1F87BDAD02089
9F50743614B11E7D0308F0116767040FEC3E0672F14C31CB5FC223C8D7D7C645
E7B09B8206FA90D1F744DB0419C21909247201A35865CC71EF918C0C7A0D9138
C1404A4638F3D9A1CFE3A01AED58BBFF0C9A80292E912B0716BF1FB9AED0B4B4
B6927853159D8B906C82EC8CFCAB71CD16117957A4BDA523E8F03787F9168CB9
66D1B055FB29C00354FA27A0D30BDE220E7885D72479C162DF03D46AFD7A8AF7
ED4358B8A338D4EA10D2F62D163B16A5280B9558F729E4CF0BFEBC7E25F17D2D
FBF2174E49128C7C54FF24DE2D49AF5FF768CDA17C87C16FDF14B06F07ED8EF8
3E68EED223D50FCAC9249D368641AE9A6E6D2F871805E595B0EEE82EE83E9382
4D2915729C3FEC8F0F30D59ED8BB229ACFBAF8F42FEE1A05D9C75663AE42C57B
BACB40F097F222F006FBB2609905903EB2215D33424A1AB34E8CDF4D6708E934
4023970FA3091B70BDA79D54CC13CC9DC65317C309AF8138F5D84AFE9EEF5D71
49CF14326C7080669DACADF8BEAE610B686D209E0CD89A02494463EF594B7F13
C5EDE21AD819C749D7F1E195DC6E9210154B302A8E928C842BF762A81DB18CFE
E3D1B0BEAC26D8CB7B499417239B209AB9808E8E3A831A2B62C5D5985CD65324
2675EB41E781BA25D39A879DDF076A9BFDCB0433CFC7BA1B1DA01CA73A0559FD
4A2560B0FC497D32ECDA29A998A13FA4F66C6EBFAF22607394DCB8474758065D
049A90B2734B4250154476DCD0C62022BF560B76B7D1CFF0EADED7BE1D851C6E
65AF1272E18B4595ACE0BB0A4CF29E2F7ED496EF32985D2F47D3A4A086D9247B
B20E98FA52668974FC0D73BF88C32EE1E82A6584CCBEA88BD391D2F5D1022A91
C25830DEB554FD45C6C28A994F06CAD40FDCEE6FF2E6D14D18F72E829C33DFA1
7F41E902F13CCC8FFA5F52FBB8E2657947658D0D8B193E9C0B0827BA8A5D4279
A8E1897DA44E7B058DCB2B7E8DCBFE35B25FC04F91F424BA94065EE52F58BF46
BF9D271E469D40AB5659C188E8419F6AC77A747DB3E7427AD71039C0FDDF3805
C205A95606424D82CC4DA558F35070D18F962891142B834FCB9582E9E04E350B
DF7C2DED1A604DE1BEBC291CFA23F4A30ACA1B70E0721A1673A6D54B2DC559F6
F2AE4A1089F7F5BBB24BE99C35A1FA091E55022107A3976AEAE1A71AD36A1E14
22A7C031CB1F3EC751FFCDF6364B8529DF491CD4543BC4C1EB555F0B42540497
B277C692DEF2B34428A1727AFF6C9C8DB99426242B5995382B62ACB18F396C2C
A689BEB9186058BA67901022BABE64A48BD5CC78885544D097A400F4AA86FE76
1982EAA6D7AB920F97561179C2C0F076DD222499536D3ECE7187FCAEECB9B386
50B468579CC16BDACD8367C706CE800F106A9F9FD6BA4618A59CAB3C5A6469A1
A8D4450B4542440CB6AA93D0813A02AEB5A5E3CCF10323A4107167E734A03DAC
27106D34A890A0310E59BCCE55CFD1D123070BCA960284E55AB3294CC03CAED5
538EFF1FA2C4FB413E7E62BB18287722C3ABAE1EB35362106CAD195042F7687C
48FA7AC9BC26D938608280F095
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/UniqueID 5000829 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 80 /P put
dup 99 /c put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F9803741E49217603F45AF366220D299DE85A0508D0717C6B
F11163BD8F0621055AF19529FA17706C1C0CE6A08C84FF50D42FE47F91FBB7C0
75B515E12AB563DF30F06E69DE564553A2A0EBCC7E875A649656DE0C986ACDB8
60B1B84DB9BCEECCD83F382E45211576133DBBDA5CC4582CC3218E63D9A9F8C8
1F1A4ECF1D881CD77FFAF275CFB0D96F60F6ED768BD87C1806BB162028CF9D79
ED3F21E23B4554E19407D4A864472E90A42B6F41EAFB6A2DD46609E9A78487CB
C560C89F0C83AF7745D914324C6B643803A47CDBA682D9039A73301D8EBE7FAC
67B4BD470C85AE4C6C9A353EBE7FAE21C318987F8E7B756F708B61A940FBFCD2
6D87F92730C0E4302EAABF4EC427633D901C38728C7192AA9B07FE46FA963C9E
FD94B5719D301A3F0A68D25342DE4962DE6D2C0CDFC0FE93F2F482B39C51D812
8E7832D473B7ADBF480B9DB0E9D6A727506D57A99C89C296263883DFA91DBBED
CBA6B2F0BAC298957E41F2CF3680751550E9C319002AEB0C4CEA6562C59C5C28
F89C02B71704480AD1BC6A8B805EA0F7C43B2BA2F7675B88207FD7A985A0CB6D
F4CDCC130F1111B02F82909D37F3D23077A1BF1416FEBACDD278E84A871C57F2
A1C1BB673EC38B1500CA5290476C25D62499DD2F435B0412692F9626B16B1BB1
AF7E6591C30D36814C9F9543A547663C09B7069A37E67C0D8ACCA14E17B58748
E3246D5A0110A5F700C0BD767CDB2C75999FC384314FF4D2A3FAF4BCAD61AAE3
B90DABF9577B5418718223335587A2051E37C53B9852D9206C76C253F16FF093
BB87F0F51AD543A3B1337EE04E3E50BD8C31017D52560024AE167613CF6C1CFB
E6336291F769673CD799DED242C5A802257589D8D5B4A8269D476F3EA517BF3B
DC6AC3160ADDD531D9A161C2CDFCC44C9C0B180866C08603B61F93C98F0600E8
CBC19A8E6572AD8B50632311F1BA197EC9C039B309EA8AD9666E5450BF54A18E
6021DC68F2FB62125B576B3A3A0183AC26E83A74C7B90BE74A2F2527093263D0
EAF9C69AE053F2C2B8E01CC30A41662946623F569D5B05D047C8D839D6D41171
C35B471F1DF3A71697AD7B508AD7D9710F0FEAEF05C8BCFA07FDA9F112A4DA51
545E02E7B7CE273154793FE1CF599240DC86F471A0C16C5B7EBFEFDD6ECAC896
54DCDA6B1240BDE40F8C8A5A95E679A283BF25B336D1B771F40DB286224465C5
290FB79C6636521A91BB942FF755C0DA032A917CBB4EFAEDABB558F07FE0EAD8
9E3E409E6A46D9B8140057A576BD91E189F2A3396C8C0B0AA6957FE6F4F6696D
CBD366CA68616529898F500E32986AB7AC0C43BBEAB94107E08DF42E6FFF3686
6EA1E056074D3D4252A004EA0454951BC25DFB89D25100F231B977B226A31479
DC7D29F4624BB4EA066C56E97A103C2527FEEE3AF156C5AB5EEF0ABF97F8856A
E9BAA4556DF67C6AA7E401D50A2A143C44279EDC072D2EA1F872171718F3597E
07AF0803E77ED2B190C00E43EBD1E81973D8DE209BB6CBCCFEE31785DB73C5F9
611D8527F74D1BBACF30BFC5321A721767308C4534B4F1884B6DF29D8F68C2D5
677D02C7FBDEE06C88192170E13E8E8B4FA0938D98B03B4F009E3CD6A714521F
6364D378BCCB0002A201FB1077178E2E32A3C6D7F42B90A5287380C67146CEFF
2098F0158770A762E4564C2868356234502777D370857AD6D1DBF099B613E417
144BA6DB679AA7DDB331E9DF052F59D12FBDA29B4DEBCEED1D02D8C263AA7121
5D751082DE55BCD40F0CFBED503E00BC656FF257BFB765C8A3A8F2CA292A330E
BDC8D364DAAEC26D0E60BFB03363DFA86D9008EAC30A9EC8F1B72428FD86491E
CA7ED0239DC15323E924FFE9E6656ADCE3901A99B8BEBBBD016B8B73843732B0
5E4666DB96431B5A92BBDD6C974A050D895DDFD648C71F40EFE97235BEC17BBF
08FAC8065488E3683480946725791FD0188742543244C9CE7A85C3FF76881831
7AA0421441A9EDE7DEA35EFA3ED621776730A87AE1F7ED1B308BFA7F0AB19D86
57B6BE4FCECB37C5E3815BAD566306FEA62F6338BAD5C8D30F9AFC7D642C870E
25D5DA691E807A98A38FC7BBFE94F12E18EB7A954978F6EAF2AA24715FF2215F
57FBABF7BADE027199F2830C309828A51ABD307E27C604E765A520A6AD0FF66F
21F1C132BECFD2E7B07D51AEEF113AEFE3F26C8A5B3BA1C99734D35111A4A07F
1B24A7928A8A06AFE3761537138663986B8D027FEC29E914C79A2F10F036406B
26E5EA5F9EF3A5925C210CEAD2837F89EC207544066BA8506E7DAB11B55D327D
CF8AA8FF94B202EA9D045FB939A81663CF63635F13BA0F718866ED3A7ACE054E
B5C8DBF4421EE2AD5CF6FD725B5A1D267BA4739388A5D634B1C690D3BDAC625F
040230610A3A1B7175DAD4590BCD51801F9B19BDA0CF416C1FBBDA78E9CC7234
630FF46841EB07F6ABCA4D617111966B7793E218E60C99D70A93BB98825A4773
C4A02E4F7803CF4A0CCF6E3CE3C0886F06F4AEA1076C3E19E6C9359127C8753A
66E3A52D43E00C17A86EBF20CB26CAD7DB10BB6EBC852B580452D24770D65758
CD59B4CB341EC2C895C21588156A81719781194C52072E28BE4AFC64E47B5688
53D0A6A60157C191A39BA398B920B5A790A18C55370B5558C8A9D6E59E5CEFE4
E367D820F4E498EDD8E121C230DA6902E1A17FF77D203516DF45EC3685BBFD78
1FDF3780DEC92142BEB872105C0EF18CB57B8DAF6B02431DB96B31A7963868D8
A6001A86B2E311B20F37F34061143365D343BAB62AC684BA8AA09E97D87225DE
BE33E4D1ED96206FB64F2D7209187C164F0DE40A1042AC954AEAEAB344A50E0A
6D31DE143255431A3DB933844A8AFC99172FAF361C971605A5AAB2227DD4533D
8CEFEC8AC7726B49CB40AD2005A8BD730096AC75261A77144EEC226231BDB6E6
960D963F2D23671F098E65847BC7DD8DD84E7C68701FA4227AEA02495B37A323
8C8231CBFE5604B0CFF370AEB5E515B1DD98B42E8B365C0462ECB5E131662F2F
9B23ECCDD9940B59A5872AF4B985B1686BD937F7A01A1D4055C68E87D70FA7C0
17A1DA48728F0A002E1C801DFA41200A4CF20F1E31501B2081F21A64B3A9CA8B
0FFEB845B8A3AAD37DC51640DE36356A849105A2783BC8AEB46CD8EF82581B53
06F5A2430FAFBBB129A4D3769474240B8DA8ECA1303469DB0D92D4DB2D21179D
540C9ADE8E736C629B8A2B4C8E219259204D1D6B6459F7766DE5FB5824A49DBF
0647A4DC48A59DF722DD9FC01275C4FA2FFB088C39E28A58891B26D5C8437075
5357FDFD9D996C0844CE535FE171321A32DCCC8E6018219A94FE4FACBF706FDD
7B04CA7688BD00BA580E4D4B1F788B942390B95995C3D809DE60CD6A965BE0FE
8F5DD065117FAE37E1D4F676BF21B64D0594523AE92798F5B85C41364D7DCED8
9E8FF4AE15512ADAF27AA831CEF124F4A7876CD14BCC67250EDC7A18EB30626C
A77F9F19EDDB81E2937F8CB7C9BC998065FE68827F2E0A5E8A3795B8C02A0D03
CE2D2E0612FCAB062E0E9CF29AB52A4F2ADF85EBEF14B98BC933BE41091A84A5
FC9053A3EFFB54AFFAC6E44D01B6FF170F337EF664E1646F7A1C85B7E8B800F8
A4E29EBA4B9D926F10F00E389E47B411DF25E6EF8F870A9D19E95D809C38E672
9985BD77AF5C18A24C40452D315FDB6D6C34ED0035A9076FE75C295F80F9B936
23DFE1520C0340AA882FCCA96A60
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/UniqueID 5000795 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 70 /F put
dup 76 /L put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D725429E8F3720CF938AE3E26DB65BC4
A5CAD7A87B20C9EB519EC1B7B28BB51CE82D5A1DF1205617AE8600539547BF19
7E4AD1B2E7313B5274F487A92E7BD75CD49C8BDC00DD607925C12219B6D3E220
302E3F937E8EEFDBE3AE37BD9B50AF03B9BCD0EBE4ED3CEC6746376E27FC0A59
F9752A1698C7BE54C9D5CDC275528E7190584BE03D62CF199EF8A4E3B851BFB0
EC9F2E82EA6DFE81E4B62D9B1DCDF129701DAF340BC17D99EA6EABF1D7F10C82
8E3782D26537AEA07AC5E55C07B26A3D5BE4529613771C262581D525C2484AF6
DBB6392B615647B8523C70321C91DA2EF7558D924D2588667C787658A5DDA538
DD3A25FE61C6D0F3B000923394E80C91794AFB0CEA4E9416AD79CEDAD080C10A
39FD47B522DB53E914A3EB03FF6755E4E5318149167CCD8AE2B826B3F8023182
7DCE2907D65DA028C3D79D17017BD37012AA0BFD54E9B99F3A933A2E0F75245D
21C894085D8406A0FF9C0F61C20BB30904838FB662DC90466802ACD99405ABFF
761FF13AE84D40EF7D517B156DC6BA63302A170B8E0A8BA2AFABDD6F23C5932C
6D3D08B5F998D89487D83DC5AA3AB077AEDD365A75BCD2891F32483CEA99B5DE
46260D36F9BD60CB811C6BC9672D5B8523E9A9EF05151519D705AD26F39B6BC2
CABD7B0DB00EB9D85CE105DF2E8E002F2097E4B37A6AE21AA7D915074F4EA139
5F6FA80801AA2CBFB8AF9931FCCBD35FF24EC7181D1BBB04AA3DBDCE66C15E25
F67ACF97A566423EF622749147E4DCDE669AFF1099E3D76DF22D1611686072C6
51ABA60AABCB07F8407F73368BCC11CF09CFAC3837ECE5C5BB68E440577495EC
37B93CD0E6529CC59E4DB9A4A347736CE4BDA203C572A9AF8F0B6EBA18807C1D
966837313AF35C7A5B1A348AF306041D4C7E47FC0555A422145452B2C58109CB
68A845F2A3DE2C0AC28FBC211E8F100BD23D79AA25E6871A78EDDD60E275FB04
3000E0E79FF355914FE9252473A208C09C0F63BA0F6379D858932433175D2395
A6AEDDB29070A265F19553A366BF9841D197C8AF0E6142AB19A0C17750457122
BAEA62D0E1E10B51DEDF9C5D573DAE81F77A1DDF22C01A3215F2D9306EAFB0E9
8149F9D898184C4689BCE127F76E18312C280C47CCF5F09C274BA23953C68AD6
EE533555C78C3514CF2FB460575762049F10D4EE98DA2379652E37D6B25B5B30
037009BE1707A1546494ADE421C3D470C38CC251A25E50598203F45E9419E09E
57D57202E9790E02B9B87995E40178F5CA0F2B57688ED852E0409275626F7F7A
8DC0F995615352A0A71F2C99E80B1995A0C1979C966C18C4A3E91E0A37916903
4C414586FD23FFB935F938DDF192B3EA34BE4B435B6850A2A3C02F5A89D02BBB
3B4CADDE0797B46895F4867B126B5C02976B461B24E7105980FCC675AF9B3C07
52ACCC6F4A44F57725FA6599607303BEAE368AB0A19D1320CC02B1701C1337FB
1D2261C0DEB49D5F37BA19FA0C0CF88ACB99C5DC01D4C33326B8E406A8C9A463
E80ADE6A1EC46D89C9000D4647E13682290E5932FDF97290F7613E4750CE05BC
3AC3C6AA3E9280505C55EC1A038AD2D5A46C5C13F53D83323AECF58F331F2422
37EC1610321307F3C0A84B6DB7CB098AD031A892F0B7AE56AC668B05D1778CEA
439E72A8325A96FCD61BA377DDFE28E4942D554CEEB1A4DEA44F5C241B085617
1FE291D9F3B2BAC8FBEDDD0693519868561F01C1C9A60482D3843BD5BABD31DB
A6BCD69D679A1832BC07B55BCF42FC8D58F371DD13875FBE3518B8FFB94C9750
82DB9D9E7F0F953150EFC44A02C182B5EA076495DEB2F3BCFF1776EBE527066C
8A11E09D970FE970273AA3038C0E613B6FF6A63B6EFFD5867B79C8CB47C7F0A9
BA87B1D68F2F6CE9B152D103A6FA64E1330FC5B07C26B66A7C69B48D61A20081
950F12C6E0078F24118553B559534C39E8CBF58D592854AC1B55BCF7F746B943
9D7F1091E0836C04D0CE9A2459C0B1A9AFA9C9DE4428D1C39ACD5C5F7352DC33
AA38079A0418F2A0484C9FFD6836EB592DBA69AA6B989F5325BCBF9E63E89964
F7000C25507C50B46DD979524AC67ADE19C364A7F9DF5529EB54D81BCED65F3E
4B2D0776D12EF154686AA01DCD7C9A971439C7845897805FAFB762F3EB03477E
AE8E197DB2A9028F3357DCE340968A271537AA4740E64C4113A8EA8CD327BEBD
A773EBC7113C8B471A8E5F8EBC5387F983B239A6495C9769C27425E806913036
6528C7EED10322C632D1696B7DCAD1DAEB4CBCDF36AFC84331EC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (thesis.dvi)
@start /Fa 152[34 4[30 26[55 45 3[53 66[{}5 66.4176 /CMMI8
rf /Fb 140[46 4[58 1[29 2[33 4[51 15[57 10[43 1[77 4[74
47[45 18[{}10 99.6264 /CMMI12 rf /Fc 139[52 53 55 1[75
67 75 1[37 2[37 75 67 1[61 2[75 65 10[102 1[94 75 5[128
6[85 18[67 67 67 2[37 45 45[{}23 119.552 /CMBX12 rf /Fd
240[50 14[77{}2 99.6264 /CMSY10 rf /Fe 134[59 1[81 59
62 44 44 46 59 62 56 62 93 31 59 1[31 62 56 34 51 62
50 62 54 11[86 78 62 84 1[77 84 88 106 67 2[42 1[88 70
74 86 81 1[85 15[56 3[37 10[58 19[93 2[65 11[{}44 99.6264
/CMBX12 rf /Ff 128[49 4[43 51 51 70 51 54 38 38 38 51
54 49 54 81 27 51 30 27 54 49 30 43 54 43 54 49 1[27
7[100 73 73 70 54 72 1[66 76 73 89 61 2[35 73 77 64 66
75 70 69 73 1[46 1[76 1[27 27 49 49 49 49 49 49 49 49
49 49 1[27 33 27 76 1[38 38 27 24[81 54 54 57 11[{}73
99.6264 /CMR12 rf /Fg 135[85 117 85 90 63 64 66 1[90
81 90 134 45 85 1[45 90 81 49 74 90 72 90 78 12[112 1[120
2[121 1[153 3[60 4[124 117 1[122 12[81 81 81 81 2[45
54 33[94 11[{}37 143.462 /CMBX12 rf /Fh 134[57 4[39 48
49 1[60 60 2[30 2[36 60 1[36 2[54 18[79 11[88 68[{}13
119.552 /CMTI12 rf /Fi 134[62 2[62 65 46 46 46 2[59 65
98 33 2[33 65 59 36 52 65 52 65 59 7[88 3[88 1[65 4[88
107 9[85 83 88 20[33 44[{}28 119.552 /CMR12 rf /Fj 138[73
6[73 4[36 1[66 1[58 73 2[66 20[83 5[86 70[{}9 143.462
/CMR17 rf /Fk 134[123 2[123 129 90 92 95 1[129 116 129
4[65 129 116 71 106 129 103 1[113 11[179 162 129 173
2[175 182 220 140 2[87 2[146 1[178 168 1[175 15[116 49[{}31
206.559 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 249 15 a Black Black Black
257 585 a
SDict begin [/Count 0/Dest (section*.2) cvn/Title (Contents) /OUT pdfmark
end
 257 585 a 257 585 a
SDict begin [/Count 0/Dest (section*.4) cvn/Title (List of Figures)
/OUT pdfmark end
 257 585 a 257 585 a
SDict begin [/Count 0/Dest (section*.4) cvn/Title (Nomenclature) /OUT
pdfmark end
 257
585 a 257 585 a
SDict begin [/Count 4/Dest (chapter.1) cvn/Title (1 INTRODUCTION) /OUT
pdfmark end
 257 585 a 257 585 a
SDict begin [/Count 0/Dest (section.1.1) cvn/Title (1.1 Rethink about Motor Control)
/OUT pdfmark end
 257 585 a 257 585
a
SDict begin [/Count 0/Dest (section.1.2) cvn/Title (1.2 A Different Motor Control Idea)
/OUT pdfmark end
 257 585 a 257 585 a
SDict begin [/Count 2/Dest (section.1.3) cvn/Title (1.3 llustrate principle ideas through simple examples)
/OUT pdfmark end
 257 585 a 257 585 a
SDict begin [/Count 0/Dest (subsection.1.3.1) cvn/Title (1.3.1 Ship Floating)
/OUT pdfmark end
 257 585 a 257
585 a
SDict begin [/Count 0/Dest (subsection.1.3.2) cvn/Title (1.3.2 The Mass-Spring Vibration)
/OUT pdfmark end
 257 585 a 257 585 a
SDict begin [/Count 0/Dest (section.1.4) cvn/Title (1.4 Overview of the Thesis)
/OUT pdfmark end
 257 585 a 257 585 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 257 585
a 257 585 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 257 585 a 257 585 a
SDict begin H.S end
 257 585 a 257 585 a
SDict begin 17.99446 H.A end
 257
585 a 257 585 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 257 585 a 257 585 a
SDict begin [ {Catalog} << /PageLabels<</Nums[0<</S/D>>1<</S/r>>4<</S/D>>]>>
>> /PUT pdfmark end
 257 585 a Black Black
588 729 a Fk(Adaptiv)-6 b(e)78 b(Motion)g(Syn)-6 b(thesis)1647
2295 y Fj(F)-11 b(angde)44 b(Liu)1438 2532 y Fi(NCCA,Media)37
b(Sc)m(ho)s(ol)1361 2769 y(Bournemouth)g(Univ)m(erit)m(y)1047
3545 y(A)i(thesis)f(submitted)g(for)g(the)g(degree)g(of)1434
3782 y Fh(Do)-6 b(ctor)42 b(of)f(Philosophy)1520 4035
y Fi(Y)-10 b(et)38 b(to)g(b)s(e)i(decided)p Black Black
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.i) cvn /DEST pdfmark end
 249 15 a Black Black Black Black
Black 1662 1189 a Fg(Abstract)p Black Black 501 1672
a Ff(Generating)41 b(natural-lo)s(oking)g(motions)g(for)g(virtual)h(c)m
(haracters)g(is)g(a)e(c)m(hal-)501 1821 y(lenging)27
b(researc)m(h)h(topic.)42 b(It)26 b(b)s(ecomes)i(ev)m(en)g(harder)e
(when)i(generating)e(adap-)501 1971 y(tiv)m(e)35 b(motions)f(in)m
(teracting)g(with)h(the)f(en)m(vironmen)m(t.)48 b(Curren)m(t)35
b(metho)s(ds)g(are)501 2120 y(tedious,)27 b(cost)d(long)g
(computational)g(time)h(and)f(fail)f(to)h(capture)h(natural)e(lo)s(ok-)
501 2270 y(ing)33 b(features.)501 2460 y(This)25 b(rep)s(ort)f(prop)s
(oses)h(an)f(e\016cien)m(t)h(metho)s(d)g(of)e(generating)h(natural-lo)s
(oking)501 2610 y(motion)31 b(based)g(up)s(on)f(a)g(new)i(motor)e(con)m
(trol)h(theory)-8 b(.)43 b(The)31 b(principal)g(idea)g(is)501
2759 y(motor)j(rep)s(ertoire)g(is)g(made)h(up)f(of)f(a)g(limited)i(n)m
(um)m(b)s(er)g(of)f(elemen)m(ts.)49 b(Motor)501 2909
y(con)m(trol)25 b(basically)h(connect)g(the)g(basic)f(motion)g
(primitiv)m(es)i(together)e(just)g(lik)m(e)501 3058 y(connecting)34
b(alphab)s(ets)f(in)m(to)g(sen)m(tences.)501 3249 y(Motion)51
b(Primitiv)m(es)j(are)d(iden)m(ti\014ed)i(b)m(y)f(the)f(qualitativ)m(e)
i(prop)s(erties,)j(for)501 3398 y(whic)m(h)33 b(w)m(e)e(use)h(the)g
(mathematical)f(to)s(ols)g(of)f(di\013eren)m(tial)i(top)s(ology)-8
b(.)42 b(Tw)m(eak-)501 3548 y(ing)34 b(of)f(the)h(motion)f(primitiv)m
(es)j(is)e(mo)s(del)g(as)g(Symmetry)h(Preserv)m(ed)h(T)-8
b(rans-)501 3697 y(formation,)32 b(for)g(whic)m(h)j(w)m(e)e(use)h(lie)f
(group)f(theory)-8 b(.)501 3888 y(Our)33 b(metho)s(d)g(can)g(generate)g
(adaptiv)m(e)g(natural)g(lo)s(oking)f(motion)h(with)g(v)m(ery)501
4037 y(little)g(computational)g(costs.)p Black Black
eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.ii) cvn /DEST pdfmark end
 455 15 a Black Black Black 257
1409 a Fk(Con)-6 b(ten)g(ts)257 1741 y
SDict begin H.S end
 257 1741 a 257
1741 a
SDict begin 17.99446 H.A end
 257 1741 a 257 1741 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.1) cvn /DEST pdfmark end
 257 1741 a 257 1741 a
SDict begin H.S end
 257
1741 a 257 1741 a
SDict begin 17.99446 H.A end
 257 1741 a 257 1741 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 257 1741 a 247
x Fe(Con)m(ten)m(ts)p 0 0 1 TeXcolorrgb 3620 1988 a
SDict begin H.S end
 3620
1988 a Fe(ii)3682 1988 y
SDict begin 17.99446 H.L end
 3682 1988 a 3682 1988 a
SDict begin [/Subtype /Link/Dest (section*.2) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3682
1988 a Black 257 2235 a Fe(List)38 b(of)g(Figures)p 0 0 1
TeXcolorrgb 3589 2235 a
SDict begin H.S end
 3589 2235 a Fe(iii)3682 2235
y
SDict begin 17.99446 H.L end
 3682 2235 a 3682 2235 a
SDict begin [/Subtype /Link/Dest (section*.4) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3682 2235 a Black 257 2482
a Fe(Nomenclature)p 0 0 1 TeXcolorrgb 3589 2482 a
SDict begin H.S end
 3589
2482 a Fe(iii)3682 2482 y
SDict begin 17.99446 H.L end
 3682 2482 a 3682 2482 a
SDict begin [/Subtype /Link/Dest (section*.4) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3682
2482 a Black 257 2729 a Fe(1)91 b(INTR)m(ODUCTION)p 0 0 1
TeXcolorrgb 3627 2729 a
SDict begin H.S end
 3627 2729 a Fe(1)3683 2729 y
SDict begin 17.99446 H.L end

3683 2729 a 3683 2729 a
SDict begin [/Subtype /Link/Dest (chapter.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 3683 2729 a Black 404 2878 a
Ff(1.1)99 b(Rethink)34 b(ab)s(out)e(Motor)g(Con)m(trol)77
b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb 3634 2878 a
SDict begin H.S end
 3634
2878 a Ff(2)3683 2878 y
SDict begin 17.99446 H.L end
 3683 2878 a 3683 2878 a
SDict begin [/Subtype /Link/Dest (section.1.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683
2878 a Black Black 404 3028 a Ff(1.2)99 b(A)33 b(Di\013eren)m(t)g
(Motor)f(Con)m(trol)h(Idea)81 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1
TeXcolorrgb 3634 3028 a
SDict begin H.S end
 3634 3028 a Ff(4)3683 3028 y
SDict begin 17.99446 H.L end

3683 3028 a 3683 3028 a
SDict begin [/Subtype /Link/Dest (section.1.2) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 3028 a Black Black 404 3177
a Ff(1.3)99 b(llustrate)33 b(principle)h(ideas)g(through)e(simple)i
(examples)103 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
Black 0 0 1 TeXcolorrgb 3634 3177 a
SDict begin H.S end
 3634 3177 a Ff(5)3683
3177 y
SDict begin 17.99446 H.L end
 3683 3177 a 3683 3177 a
SDict begin [/Subtype /Link/Dest (section.1.3) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 3177 a Black Black
628 3327 a Ff(1.3.1)111 b(Ship)33 b(Floating)71 b(.)50
b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb
3634 3327 a
SDict begin H.S end
 3634 3327 a Ff(5)3683 3327 y
SDict begin 17.99446 H.L end
 3683 3327 a
3683 3327 a
SDict begin [/Subtype /Link/Dest (subsection.1.3.1) cvn/H /I/Border
[0 0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 3327 a Black Black 628 3476 a Ff(1.3.2)111
b(The)34 b(Mass-Spring)f(Vibration)99 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1
TeXcolorrgb 3585 3476 a
SDict begin H.S end
 3585 3476 a Ff(11)3683 3476 y
SDict begin 17.99446 H.L end

3683 3476 a 3683 3476 a
SDict begin [/Subtype /Link/Dest (subsection.1.3.2) cvn/H /I/Border
[0 0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 3476 a Black Black 404 3625
a Ff(1.4)99 b(Ov)m(erview)35 b(of)d(the)h(Thesis)59 b(.)50
b(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb 3585
3625 a
SDict begin H.S end
 3585 3625 a Ff(14)3683 3625 y
SDict begin 17.99446 H.L end
 3683 3625 a 3683
3625 a
SDict begin [/Subtype /Link/Dest (section.1.4) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 3625 a Black Black Black 1943 6066 a Ff(ii)p
Black eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.iii) cvn /DEST pdfmark end
 249 15 a Black Black Black 257
1409 a Fk(List)77 b(of)h(Figures)257 1781 y
SDict begin H.S end
 257 1781
a 257 1781 a
SDict begin 17.99446 H.A end
 257 1781 a 257 1781 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.3) cvn /DEST pdfmark end
 257 1781 a 257 1781
a
SDict begin H.S end
 257 1781 a 257 1781 a
SDict begin 17.99446 H.A end
 257 1781 a 257 1781 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 257 1781
a 404 1974 a Ff(1.1)99 b(Floating)32 b(Ship)h(Example)57
b(.)50 b(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb
3634 1974 a
SDict begin H.S end
 3634 1974 a Ff(6)3683 1974 y
SDict begin 17.99446 H.L end
 3683 1974 a
3683 1974 a
SDict begin [/Subtype /Link/Dest (figure.1.1) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 1974 a Black Black 404 2123 a Ff(1.2)99
b(Tw)m(o)34 b(Equilibrium)g(P)m(osture)f(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
Black 0 0 1 TeXcolorrgb 3634 2123 a
SDict begin H.S end
 3634 2123 a Ff(7)3683
2123 y
SDict begin 17.99446 H.L end
 3683 2123 a 3683 2123 a
SDict begin [/Subtype /Link/Dest (figure.1.2) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 2123 a Black Black
404 2272 a Ff(1.3)99 b(StableP)m(osture)66 b(.)50 b(.)g(.)g(.)g(.)g(.)g
(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb 3634 2272
a
SDict begin H.S end
 3634 2272 a Ff(8)3683 2272 y
SDict begin 17.99446 H.L end
 3683 2272 a 3683 2272
a
SDict begin [/Subtype /Link/Dest (figure.1.3) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 2272 a Black Black 404 2422 a Ff(1.4)99 b(Unstable)34
b(P)m(osture)75 b(.)50 b(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
Black 0 0 1 TeXcolorrgb 3634 2422 a
SDict begin H.S end
 3634 2422 a Ff(9)3683
2422 y
SDict begin 17.99446 H.L end
 3683 2422 a 3683 2422 a
SDict begin [/Subtype /Link/Dest (figure.1.4) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 2422 a Black Black
404 2571 a Ff(1.5)99 b(Unstable)34 b(P)m(osture)75 b(.)50
b(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb
3634 2571 a
SDict begin H.S end
 3634 2571 a Ff(9)3683 2571 y
SDict begin 17.99446 H.L end
 3683 2571 a
3683 2571 a
SDict begin [/Subtype /Link/Dest (figure.1.5) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 2571 a Black Black 404 2721 a Ff(1.6)99
b(The)34 b(T)-8 b(op)s(ology)32 b(Structure)90 b(.)49
b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb 3585 2721
a
SDict begin H.S end
 3585 2721 a Ff(10)3683 2721 y
SDict begin 17.99446 H.L end
 3683 2721 a 3683 2721
a
SDict begin [/Subtype /Link/Dest (figure.1.6) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 2721 a Black Black 404 2870 a Ff(1.7)99 b(Mass)34
b(Spring)53 b(.)d(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p
Black 0 0 1 TeXcolorrgb 3585 2870 a
SDict begin H.S end
 3585 2870 a Ff(12)3683
2870 y
SDict begin 17.99446 H.L end
 3683 2870 a 3683 2870 a
SDict begin [/Subtype /Link/Dest (figure.1.7) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 2870 a Black Black
404 3019 a Ff(1.8)99 b(Mass)34 b(Spring)f(Phase)g(Plot)96
b(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)p Black 0 0 1 TeXcolorrgb 3585
3019 a
SDict begin H.S end
 3585 3019 a Ff(12)3683 3019 y
SDict begin 17.99446 H.L end
 3683 3019 a 3683
3019 a
SDict begin [/Subtype /Link/Dest (figure.1.8) cvn/H /I/Border [0 0
0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 3683 3019 a Black Black Black 1929 6066 a Ff(iii)p
Black eop end
%%Page: 1 5
TeXDict begin 1 4 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 249 15 a Black Black Black 257
585 a
SDict begin H.S end
 257 585 a 257 585 a
SDict begin 17.99446 H.A end
 257 585 a 257 585 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.1) cvn /DEST pdfmark end
 257 585
a 824 x Fk(Chapter)78 b(1)257 1884 y(INTR)-6 b(ODUCTION)257
2366 y Ff(Character)35 b(Motion)e(Syn)m(thesis)k(\(CMS\))d(researc)m(h)
i(aims)e(at)f(generating)h(motions)g(for)g(vir-)257 2515
y(tual)27 b(c)m(haracters.)44 b(It)27 b(is)g(a)g(v)-5
b(aluable)28 b(topic)g(for)e(b)s(oth)h(industry)i(and)e(academic)h
(comm)m(unit)m(y)-8 b(.)257 2664 y(Main)26 b(applications)f(are)g(in)h
(the)f(media)g(industry)-8 b(,)28 b(b)s(oth)d(computer)h(games)f(and)g
(animation)257 2814 y(\014lms)i(dep)s(end)g(hea)m(vily)h(up)s(on)d(c)m
(haracter)i(motions)f(for)f(storytelling.)43 b(CMS)27
b(also)e(has)i(man)m(y)257 2963 y(applications)34 b(in)g(other)f
(areas,)h(suc)m(h)g(as)f(user)h(in)m(terface)g(design,)h(psyc)m(hology)
-8 b(,)35 b(sp)s(orts)e(and)257 3113 y(medicine.)404
3262 y(The)38 b(c)m(hallenge)h(of)e(CMS)i(researc)m(h)g(is)f(not)g(to)f
(mak)m(e)i(c)m(haracters)f(mo)m(v)m(e,)j(but)d(ho)m(w)g(to)257
3411 y(mak)m(e)k(them)f(lifelik)m(e.)69 b(This)42 b(c)m(hallenge)g
(comes)g(from)e(our)g(h)m(uman's)i(marv)m(ellous)h(abilit)m(y)257
3561 y(of)49 b(motion)f(p)s(erception.)94 b(Motions)49
b(for)f(the)h(same)h(task)g(are)e(v)m(ery)j(similar,)i(but)c(v)-5
b(ary)257 3710 y(adaptiv)m(ely)d(.)49 b(F)-8 b(rom)34
b(the)g(v)-5 b(ariet)m(y)35 b(in)f(motion)g(details,)h(h)m(umans)g(can)
f(infer)h(the)f(c)m(hanges)h(in)257 3860 y(men)m(tal)f(states,)f
(health)g(conditions)h(or)e(ev)m(en)j(the)e(surrounding)g(en)m
(vironmen)m(t.)404 4009 y(No)m(w)m(ada)m(ys)i(in)f(industry)-8
b(,)35 b(high)f(qualit)m(y)g(motions)g(are)g(mainly)g(generated)h(b)m
(y)f(man)m(ual)257 4158 y(w)m(ork.)48 b(In)34 b(applications,)h(most)f
(c)m(haracters)h(are)f(v)m(ery)h(complicated)g(and)f(con)m(tain)g(a)g
(large)257 4308 y(n)m(um)m(b)s(er)39 b(of)d(join)m(ts,)j(making)e
(animation)g(a)g(tedious)g(w)m(ork.)58 b(Making)37 b(things)h(w)m
(orse,)h(it)e(is)257 4457 y(di\016cult)44 b(to)f(reuse)h(motion)f
(animation.)75 b(Reusing)44 b(motion)f(animation)g(for)g(a)f
(di\013eren)m(t)257 4607 y(scenario)c(is)f(prone)h(to)e(artefacts.)57
b(F)-8 b(or)36 b(this)h(situation,)i(high)e(lev)m(el)h(animation)f(to)s
(ols)f(are)257 4756 y(badly)e(needed.)p Black 1946 6066
a(1)p Black eop end
%%Page: 2 6
TeXDict begin 2 5 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 455 15 a Black Black 257 353 3426
5 v Black 257 585 a
SDict begin H.S end
 257 585 a 257 585 a
SDict begin 17.99446 H.A end
 257 585 a 257
585 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.1) cvn /DEST pdfmark
end
 257 585 a 100 x Fg(1.1)161 b(Rethink)53 b(ab)t(out)g(Motor)g(Con)
l(trol)257 933 y Ff(The)27 b(foundation)g(of)e(these)j(problems)f(is)g
(our)f(misunderstanding)i(of)e(the)h(biological)f(motor)257
1082 y(con)m(trol)k(system.)44 b(Although)30 b(motion)f(of)g(animals)h
(ha)m(v)m(e)h(fancied)f(us)g(for)f(thousands)h(y)m(ears,)257
1232 y(some)k(basic)g(questions)g(of)f(motor)f(con)m(trol)h(and)g
(motion)g(p)s(erception)h(remain)g(op)s(en.)44 b(And)257
1381 y(answ)m(ers)j(to)d(suc)m(h)j(questions)f(b)s(ecome)g(ev)m(en)g
(more)f(v)-5 b(aluable)46 b(no)m(w)m(ada)m(ys.)82 b(Adv)-5
b(ance)45 b(in)257 1531 y(this)39 b(topic)f(will)g(greatly)h
(in\015uence)g(the)g(biology)-8 b(,)39 b(rob)s(otic)e(engineering)i(ev)
m(en)h(in)m(telligen)m(t)257 1680 y(researc)m(h.)404
1829 y(The)34 b(parado)m(xes)h(is)f(ev)m(en)h(h)m(uman)g(are)f(go)s(o)s
(d)e(at)h(motor)h(con)m(trol)g(and)f(motion)h(p)s(ercep-)257
1979 y(tion;)c(h)m(uman)g(still)f(dont)g(ha)m(v)m(e)h(an)f(idea)g(of)f
(ho)m(w)h(w)m(e)h(mo)m(v)m(e)g(and)f(ho)m(w)g(w)m(e)h(p)s(erceiv)m(e)g
(motion.)257 2128 y(Before)45 b(going)e(in)m(to)h(details)h(in)m(to)f
(the)h(researc)m(h)g(ideas,)j(w)m(e)d(\014rst)f(review)i(some)f
(puzzles)257 2277 y(troubles)34 b(the)f(foundation)f(of)g(CMS.)p
Black 403 2506 a Fd(\017)p Black 48 w Ff(The)e(\014rst)g(puzzle)g
(comes)h(from)d(the)i(h)m(uge)g(n)m(um)m(b)s(er)g(of)f(degrees)h(of)f
(freedom)h(\(DOF\).)501 2655 y(Unlik)m(e)f(the)f(arti\014cial)f
(system,)k(biological)c(systems)j(ha)m(v)m(e)f(man)m(y)f(more)g
(\(DOF\).)e(Ar-)501 2805 y(ti\014cial)39 b(ship)g(is)f(a)g(\014xed)h
(rigid)f(b)s(o)s(dy)-8 b(,)39 b(while)g(\014sh)g(has)f(a)g(v)m(ery)h
(\015exible)h(v)m(ertebrate,)501 2954 y(whic)m(h)35 b(is)f(of)e(tens)i
(of)f(DOFs.)44 b(In)34 b(principle,)h(w)m(e)f(kno)m(w)g(that)f(more)g
(degrees)i(of)e(free-)501 3104 y(dom)d(allo)m(w)f(animals)h(to)f
(generate)h(motion)f(v)-5 b(ariation)29 b(and)h(mak)m(e)g(motion)f
(adaptiv)m(e)501 3253 y(to)34 b(the)h(en)m(vironmen)m(t.)51
b(But)35 b(for)f(con)m(trol)h(system,)i(extra)d(degrees)i(of)e(freedom)
h(pro-)501 3402 y(p)s(ose)26 b(a)g(c)m(hallenging)h(problem,)h(for)d(h)
m(uman)h(example,)j(it)c(is)i(di\016cult)f(to)g(answ)m(er)h(ho)m(w)501
3552 y(the)38 b(neural)h(system)g(con)m(trols)g(more)f(than)g(200)f(b)s
(ones)h(and)g(600)f(m)m(uscles)j(to)d(w)m(alk)501 3701
y(one)c(step.)p Black 403 3932 a Fd(\017)p Black 48 w
Ff(The)f(second)g(puzzle)h(comes)f(from)e(the)i(dexterit)m(y)-8
b(.)44 b(Human)32 b(can)f(\014nish)h(m)m(uc)m(h)g(more)501
4082 y(motion)i(task)h(than)g(the)f(arti\014cial)h(system.)50
b(Beside)36 b(the)f(w)m(alking,)h(swimming)f(and)501
4231 y(ob)5 b(ject)47 b(manipulation,)i(h)m(uman)e(can)f(also)g
(utilize)h(a)e(large)h(n)m(um)m(b)s(er)h(of)e(arti\014cial)501
4381 y(to)s(ols,)30 b(driving)h(a)e(car,)h(sk)-5 b(ate,)31
b(cycling,)h(and)e(pla)m(ying)g(tennis,)i(and)e(ev)m(en)h(some)f(func-)
501 4530 y(tion)38 b(the)g(feeding,)h(breading,)h(language,)e(vision)h
(all)e(dep)s(ends)i(on)f(motor)f(con)m(trol.)501 4679
y(The)30 b(k)m(ey)g(questions)h(ho)m(w)e(m)m(uc)m(h)i(resources)f(are)f
(needed)h(for)e(so)h(man)m(y)h(motion)f(abil-)501 4829
y(ities.)p Black 403 5060 a Fd(\017)p Black 48 w Ff(The)43
b(third)g(puzzle)g(is)g(the)f(p)s(erception.)73 b(W)-8
b(e)42 b(dont)g(judge)h(motion)f(b)m(y)h(c)m(hec)m(k)h(the)501
5209 y(ph)m(ysically)d(correctness,)h(for)c(some)i(artefacts,)g(w)m(e)g
(will)f(iden)m(tify)h(them)f(instan)m(tly)-8 b(,)501
5359 y(while)48 b(for)f(some)h(imp)s(ossible)h(motions,)i(w)m(e)d(dont)
f(notice)h(the)f(mistak)m(es.)89 b(If)47 b(w)m(e)501
5508 y(acquire)31 b(man)m(y)f(motion)f(tasks)h(through)f(learning,)h
(what)g(w)m(e)g(see)g(is)g(closely)h(ho)m(w)e(w)m(e)p
Black 1946 6066 a(2)p Black eop end
%%Page: 3 7
TeXDict begin 3 6 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 249 15 a Black Black 257 353 3426
5 v Black 501 685 a Ff(learn)35 b(our)e(motion)h(abilit)m(y)-8
b(,)36 b(then)e(here)h(follo)m(ws)g(the)f(question)i(do)e(w)m(e)h
(ignore)f(some)501 834 y(artefacts)f(b)s(ecause)h(they)g(are)e(not)h
(imp)s(ortan)m(t)f(for)g(motor)g(con)m(trol?)257 1060
y(After)d(a)f(close)h(lo)s(ok,)g(w)m(e)g(ha)m(v)m(e)h(to)e(recognize)h
(w)m(e)g(kno)m(w)h(little)e(ab)s(out)g(the)h(biological)f(motor)257
1210 y(con)m(trol.)404 1359 y(F)-8 b(or)42 b(computer)i(animation)f
(researc)m(h,)48 b(the)c(k)m(ey)g(principle)h(is)f(w)m(e)g(should)g
(kno)m(w)g(the)257 1508 y(things)37 b(w)m(e)f(animate.)53
b(Natural)35 b(motion)h(system)h(has)f(man)m(y)h(v)-5
b(aluable)36 b(prop)s(erties)g(whic)m(h)257 1658 y(are)d(not)f
(captured)i(b)m(y)f(curren)m(t)h(motion)f(syn)m(thesis)i(metho)s(ds.)p
Black 403 1884 a Fd(\017)p Black 78 w Fe(Adaptiv)m(e)29
b(and)i(robust)25 b Ff(Natural)h(motions)g(are)f(adaptiv)m(e)i(to)e
(the)h(c)m(hanges)h(in)f(the)501 2033 y(en)m(vironmen)m(t)k(or)d(b)s(o)
s(dy)g(conditions.)43 b(A)27 b(common)h(example)h(is)f(h)m(uman)g(lo)s
(comotion.)501 2183 y(W)-8 b(alking)32 b(on)g(di\013eren)m(t)g
(terrains)g(will)h(exhibit)f(di\013eren)m(t)h(gait)e(while)i(the)f
(balance)g(is)501 2332 y(main)m(tained.)p Black 403 2562
a Fd(\017)p Black 48 w Fe(real-time)54 b(p)s(erformance)46
b Ff(Some)g(motions)g(of)f(animals)h(are)g(v)m(ery)h(fast,)i(honey)501
2712 y(birds)34 b(ma)m(y)g(vibrate)g(their)f(wings)h(in)g(kHz.)46
b(The)34 b(astonishmen)m(t)h(is)e(to)g(the)h(sp)s(eed)g(of)501
2861 y(motion,)d(more)f(puzzling)g(is)h(that)e(the)h(neural)g(system)i
(can)e(solv)m(e)h(the)f(complex)h(mo-)501 3010 y(tion)c(con)m(trol)g
(problem)g(in)g(suc)m(h)h(a)e(short)h(time.)42 b(When)28
b(an)e(animal)h(a)m(v)m(oids)h(obstacles)501 3160 y(at)38
b(v)m(ery)h(high)f(running)h(sp)s(eed,)h(it)e(m)m(ust)h(con)m(tin)m(ue)
g(its)g(running,)h(mak)m(e)f(a)e(turning)501 3309 y(and)c(k)m(eep)h
(balance)g(at)e(the)h(same)h(time.)44 b(It)33 b(seems)i(easy)f(for)e
(the)h(neural)g(system)i(to)501 3459 y(plan)e(complicate)h(motions.)p
Black 403 3689 a Fd(\017)p Black 48 w Fe(Energy)c(E\016cien)m(t)c
Ff(Natural)g(Motions)h(are)f(energy)h(e\016cien)m(t.)44
b(In)26 b(theory)-8 b(,)28 b(this)f(idea)501 3838 y(is)36
b(supp)s(orted)g(b)m(y)h(Darwin's)e(Theory)i(of)e(Ev)m(olution.)53
b(But)35 b(animals)h(sp)s(en)m(t)g(far)f(less)501 3988
y(energy)g(than)g(our)f(exp)s(ectation.)49 b(An)35 b(example)g(is)g
(that)f(the)g(energy)i(consumed)g(b)m(y)501 4137 y(h)m(uman)e(w)m
(alking)f(is)g(only)h(10)257 4363 y(When)g(design)f(a)f(motion)g(syn)m
(thesis)j(framew)m(ork,)f(the)e(k)m(ey)i(is)f(the)g(sev)m(eral)h
(decision)f(mak-)257 4512 y(ing.)p Black 403 4761 a Fd(\017)p
Black 83 w Fe(Memory)i(or)f(Computation)d Ff(The)g(\014rst)f(question)i
(is)e(ho)m(w)h(w)m(e)g(ac)m(hiev)m(e)h(our)e(mo-)501
4911 y(tor)j(abilit)m(y)-8 b(.)47 b(Some)35 b(argue)e(that)g(it)h(dep)s
(ends)h(on)e(our)h(motion)f(memory)-8 b(.)48 b(Giv)m(en)34
b(the)501 5060 y(uncoun)m(table)39 b(v)-5 b(ariations)37
b(of)g(motion,)i(it)e(seems)i(imp)s(ossible)g(for)e(us)h(to)f(remem)m
(b)s(er)501 5209 y(p)s(ossible)f(motion.)48 b(Some)35
b(argues)g(motion)f(is)h(based)g(on)f(computation)h(or)f(our)g(rea-)501
5359 y(soning)i(p)s(o)m(w)m(er;)i(it)d(will)h(put)f(hea)m(vy)i(burden)f
(on)g(our)f(neural)h(system)h(and)e(w)m(e)h(need)501
5508 y(think)e(hard)e(to)h(w)m(alk.)p Black 1946 6066
a(3)p Black eop end
%%Page: 4 8
TeXDict begin 4 7 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 455 15 a Black Black 257 353 3426
5 v Black Black 403 685 a Fd(\017)p Black 93 w Fe(F)-9
b(eedbac)m(k)47 b(or)d(F)-9 b(eedforw)m(ard)41 b Ff(The)f(second)g(is)g
(whic)m(h)h(con)m(trol)e(strategy)h(pla)m(ys)501 834
y(more)c(imp)s(ortan)m(t)g(role)g(in)g(motor)f(con)m(trol,)i(feedbac)m
(k)g(or)f(feed)g(forw)m(ard.)53 b(Arti\014cial)501 984
y(con)m(trol)38 b(theory)f(is)h(feedbac)m(k)h(based,)g(if)e(so,)i(h)m
(uman)e(m)m(ust)i(ha)m(v)m(e)f(a)f(p)s(o)m(w)m(er)h(sensing)501
1133 y(system)32 b(whic)m(h)g(is)e(accurate)h(and)f(fast,)h(and)f(mo)m
(v)m(e)h(in)g(a)e(careful)i(and)f(nerv)m(ous)i(man-)501
1282 y(ner.)43 b(A)29 b(di\013eren)m(t)h(con)m(trol)f(idea)h(is)f(feed)
h(forw)m(ard)f(based)h(con)m(trol,)g(if)e(w)m(e)i(can)f(predict)501
1432 y(something,)41 b(w)m(e)e(can)f(tak)m(e)h(some)g(measures)h(to)d
(prev)m(en)m(t)k(motion)d(failure,)h(and)f(w)m(e)501
1581 y(can)k(extend)h(our)f(arms)g(when)h(w)m(alking)g(or)e(c)m(hange)i
(the)f(sho)s(es)g(if)g(tomorro)m(w)g(will)501 1731 y(sno)m(w.)54
b(F)-8 b(eedforw)m(ard)36 b(will)g(mak)m(e)h(the)f(task)g(easier,)h(it)
f(free)g(h)m(uman)g(of)f(the)h(sensing)501 1880 y(requiremen)m(t)i(in)d
(accuracy)h(and)g(sp)s(eed,)h(whic)m(h)f(our)f(h)m(uman)h(are)g(not)f
(go)s(o)s(d,)f(it)h(de-)501 2029 y(p)s(ends)g(on)g(the)f(prediction)h
(and)g(exp)s(erience,)i(whic)m(h)e(our)f(h)m(uman)h(b)s(eings)g(are)g
(fond)501 2179 y(of)d(since)i(the)f(old)g(da)m(y)-8 b(.)p
Black 403 2411 a Fd(\017)p Black 48 w Fe(Disadv)i(an)m(tage)39
b(or)e(Adv)-6 b(an)m(tage)33 b Ff(Ma)m(yb)s(e)h(the)e(most)h(imp)s
(ortan)m(t)g(problem)g(is)g(our)501 2561 y(attitude)25
b(of)f(the)h(b)s(o)s(dy)g(structure.)42 b(The)25 b(b)s(o)s(dy)g
(structure)h(is)f(the)g(pro)s(duct)g(of)f(natural)501
2710 y(selection)36 b(in)d(millions)i(of)f(y)m(ears.)48
b(A)33 b(complex)j(system)f(is)g(not)e(necessarily)j(di\016cult)501
2859 y(to)k(use.)68 b(Seen)41 b(in)f(this)h(w)m(a)m(y)-8
b(,)44 b(the)c(b)s(o)s(dy)h(structure)g(should)g(b)s(e)g(a)f(heritage)g
(rather)501 3009 y(than)34 b(a)g(burden.)49 b(W)-8 b(e)34
b(prefer)g(to)g(think)h(the)f(b)s(o)s(dy)g(structure)h(as)g(an)e(o)m(v)
m(er)i(p)s(o)m(w)m(erful)501 3158 y(to)s(ol)f(b)s(ey)m(ond)h(our)g
(curren)m(t)g(comprehension.)51 b(It)35 b(is)g(not)f(that)g(the)h
(nature)g(mak)m(es)h(a)501 3308 y(big)d(mistak)m(e;)h(it)f(is)g(w)m(e)g
(dont)g(understand)h(the)f(great)f(design)i(y)m(et.)257
3477 y
SDict begin H.S end
 257 3477 a 257 3477 a
SDict begin 17.99446 H.A end
 257 3477 a 257 3477 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.2) cvn /DEST pdfmark
end
 257
3477 a 207 x Fg(1.2)161 b(A)54 b(Di\013eren)l(t)d(Motor)i(Con)l(trol)f
(Idea)257 3932 y Ff(In)c(this)g(researc)m(h,)53 b(w)m(e)c(prop)s(ose)f
(a)f(di\013eren)m(t)i(motion)e(syn)m(thesis)k(metho)s(d)d(based)g(on)g
(a)257 4082 y(di\013eren)m(t)35 b(motor)d(con)m(trol)i(theory)-8
b(.)45 b(An)34 b(insigh)m(tful)g(disco)m(v)m(ery)i(is)d(that)g(motor)g
(con)m(trol)g(can)257 4231 y(b)s(e)26 b(easy.)42 b(F)-8
b(or)25 b(some)h(situation,)i(some)e(tasks)g(mainly)h(explore)f(the)g
(prop)s(erties)h(of)e(the)g(b)s(o)s(dy)257 4381 y(and)33
b(en)m(vironmen)m(t)i(and)e(can)f(b)s(e)h(ac)m(hiev)m(ed)i(with)e
(little)g(con)m(trol)g(e\013ort.)404 4530 y(In)j(nature,)g(w)m(e)h
(dont)f(\014nish)h(di\016cult)f(motion)g(tasks,)h(w)m(e)g(select)g(man)
m(y)g(easy)f(motion)257 4679 y(tasks)e(that)e(w)m(e)i(are)f(go)s(o)s(d)
e(at,)h(connect)i(or)e(mo)s(dify)h(them)g(for)f(our)h(sp)s(ecial)g
(purp)s(ose.)404 4829 y(The)27 b(easy)g(tasks)g(are)f(called)h(motion)f
(primitiv)m(es;)31 b(they)c(are)f(the)h(basic)g(elemen)m(ts)h(of)e(our)
257 4978 y(motor)34 b(abilit)m(y)-8 b(.)48 b(When)34
b(w)m(e)h(mo)s(dify)f(the)h(motion)e(primitiv)m(es,)k(some)d(v)-5
b(aluable)35 b(prop)s(erties)257 5128 y(of)24 b(motion)g(primitiv)m(es)
i(are)e(k)m(ept)h(unc)m(hanged,)i(and)d(the)h(main)m(tained)g(prop)s
(erties)g(are)f(called)257 5277 y(motor)33 b(in)m(v)-5
b(arian)m(ts.)404 5426 y(The)30 b(inspiration)g(of)f(our)g(idea)h
(comes)h(from)e(related)h(biological)f(researc)m(h,)j(whic)m(h)f(co)m
(v-)p Black 1946 6066 a(4)p Black eop end
%%Page: 5 9
TeXDict begin 5 8 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 249
15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 249 15 a Black Black 257 353 3426
5 v Black 257 685 a Ff(ers)34 b(biomec)m(hanics)h(and)d(neural)h
(science.)257 835 y
SDict begin H.S end
 257 835 a 257 835 a
SDict begin 17.99446 H.A end
 257 835 a 257
835 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.3) cvn /DEST pdfmark
end
 257 835 a 227 x Fg(1.3)161 b(llustrate)55 b(principle)g(ideas)g
(through)g(simple)h(ex-)625 1288 y(amples)257 1536 y
Ff(Although)33 b(some)h(obscure)g(kno)m(wledge)g(is)g(needed)g(to)e
(for)g(the)h(mathematical)h(mo)s(del,)f(the)257 1686
y(principle)f(is)e(illustrativ)m(e)i(through)e(some)h(daily)f(example.)
44 b(Here)31 b(pro)m(vides)h(t)m(w)m(o)f(examples)257
1835 y(ab)s(out)h(our)h(idea)g(of)f(the)h(easy)h(motion)e(and)h(ho)m(w)
g(can)g(w)m(e)g(t)m(w)m(eak)i(them.)404 1985 y(The)c(w)m(orld)f(is)h
(complex,)h(the)f(\014rst)f(question)i(is)f(ho)m(w)f(m)m(uc)m(h)i
(information)e(w)m(e)h(need)g(for)257 2134 y(accomplish)k(a)d(motor)h
(task.)45 b(Our)32 b(disco)m(v)m(ery)k(that)c(some)i(motion)f(task)g
(is)h(so)f(easy)h(that)e(e)257 2283 y(w)m(e)f(need)g(no)f(con)m(trol)g
(e\013ort)f(and)h(blindness)i(to)d(some)i(information)e(do)s(esnt)i
(matter.)42 b(This)257 2433 y(idea)33 b(is)g(illustrate)h(b)m(y)f(the)g
(ship)h(\015oating)e(example)257 2592 y
SDict begin H.S end
 257 2592 a 257
2592 a
SDict begin 17.99446 H.A end
 257 2592 a 257 2592 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3.1) cvn /DEST pdfmark
end
 257 2592 a 166 x Fc(1.3.1)136
b(Ship)45 b(Floating)257 2971 y Fe(Dynamics)257 3055
y
SDict begin H.S end
 257 3055 a 257 3055 a
SDict begin 17.99446 H.A end
 257 3055 a 257 3055 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 257 3055
a 130 x Ff(The)34 b(\014rst)g(example)h(is)e(the)h(ship)g(\015oating.)
45 b(In)33 b(real)h(life,)f(usually)i(the)e(high)h(of)e(the)i(ship)g
(is)257 3334 y(m)m(uc)m(h)d(larger)f(than)f(the)h(width.)44
b(When)30 b(w)m(a)m(v)m(e)h(comes,)h(also)d(comes)i(the)f(question)h
(ho)m(w)f(the)257 3484 y(ship)k(main)m(tains)f(its)h(p)s(osture.)44
b(T)-8 b(o)32 b(our)h(surprise,)h(w)m(e)f(\014nd)h(main)m(tain)f(p)s
(osture)g(is)g(easy.)404 3633 y(The)46 b(side)g(sw)m(a)m(y)h(motion)e
(as)h(sho)m(wn)g(in)g(\014gure)g(\(1\))e(is)i(describ)s(ed)h(b)m(y)f
(the)g(dynamic)257 3783 y(equation\(1\))893 4056 y
SDict begin H.S end
 893
4056 a Fb(I)952 4029 y Ff(\177)944 4056 y Fb(\022)25
b Ff(+)d Fb(d)1181 4029 y Ff(_)1163 4056 y Fb(\022)30
b Ff(=)e Fb(T)1399 4071 y Fa(G)1480 4056 y Ff(+)22 b
Fb(T)1635 4071 y Fa(B)1718 4056 y Ff(+)g Fb(T)1873 4071
y Fa(F)1960 4056 y Ff(=)27 b(\()p Fb(Gl)2207 4071 y Fa(g)2270
4056 y Fd(\000)22 b Fb(B)5 b(l)2477 4071 y Fa(b)2512
4056 y Ff(\))p Fb(sin)p Ff(\()p Fb(\022)s Ff(\))22 b(+)g
Fb(T)2988 4071 y Fa(F)3047 4056 y
SDict begin 17.99446 H.A end
 3047 4056 a 3047 4056
a
SDict begin [/View [/XYZ H.V]/Dest (equation.1.3.1) cvn /DEST pdfmark
end
 3047 4056 a Black 435 w Ff(\(1.1\))p Black 257 4329
a Fb(\022)44 b Ff(is)d(the)f(sw)m(a)m(ying)i(angle,)h
Fb(I)48 b Ff(is)41 b(the)g(inertia,)h Fb(d)e Ff(is)h(the)g(damping)g
(co)s(e\016cien)m(t,)j Fb(T)3342 4344 y Fa(G)3441 4329
y Ff(is)d(the)257 4478 y(torque)c(of)f(gra)m(vit)m(y)-8
b(,)38 b(and)f Fb(T)1287 4493 y Fa(B)1384 4478 y Ff(is)g(the)f(T)-8
b(orque)38 b(of)e(buo)m(y)m(ancy)-8 b(.)56 b Fb(T)2638
4493 y Fa(F)2733 4478 y Ff(is)37 b(the)g(external)g(con)m(trol)257
4628 y(torque.)42 b(if)24 b Fb(T)737 4643 y Fa(F)824
4628 y Ff(=)j(0,)f(external)g(con)m(trol)f(force)g(is)g(applied,)i(the)
f(system)g(is)f(an)g Fe(autonomous)257 4777 y(system)p
Ff(.)257 5066 y Fe(Equilibrium)39 b(P)m(osture)257 5149
y
SDict begin H.S end
 257 5149 a 257 5149 a
SDict begin 17.99446 H.A end
 257 5149 a 257 5149 a
SDict begin [/View [/XYZ H.V]/Dest (section*.6) cvn /DEST pdfmark end
 257 5149
a 130 x Ff(Ship)h(will)g(only)g(rest)f(at)g(p)s(ostures)h(when)g
(external)h(torques)f(are)f(zero.)64 b(There)40 b(are)f(only)257
5429 y(t)m(w)m(o)34 b(p)s(ostures)f(that)g(the)g(external)g(torque)g
(is)h(zero)e(as)h(sho)m(w)h(in)f(picture)g(\(2\))p Black
1946 6066 a(5)p Black eop end
%%Page: 6 10
TeXDict begin 6 9 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb 455
15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 455 15 a Black Black 257 353 3426
5 v Black Black Black Black 737 4094 a @beginspecial
64 @llx 430 @lly 360 @urx 721 @ury 2960 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/ShipExample.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: ShipExample.dvi
%%CreationDate: Fri May 20 15:36:02 2011
%%BoundingBox: 64 430 360 721
%%DocumentFonts: CMBX10 CMMI8 CMMI10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips ShipExample.dvi -E -o ShipExample.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1536
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /theta put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC894000F834F247820DEA933F247EEA148BD27629F13AF7C793F6A99F
708F0C95C61E3854861AE8E2BC94F57F786B636B0B8F8B20C6EC9DF15B811E1C
FD43F7034B7C7B27EFB98CEEA43D7816E12FF1FD1FE3EC3977ADB62EDDE022A1
574340966C32EB92D43E795A103BD9CD744814321C64E08E37A93BC7E664313C
9172B3344BE31950F518B2977EEE76ABE2F63F5390678467F888CCB88E0E0AE8
85EC941F59B988BFC2593EC40DD184D3BEB536C8068069EBE57F53426BB36F85
80EC1F62CF0FAD75A6CB6926CAFAEFF366DC3849B5AE06FC18367F0369EFA6D9
F8DF67BFA46E1A0462821D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/UniqueID 5087383 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 98 /b put
dup 103 /g put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D5930759026189A89A9
B624BC5B352DAD55CFCB8BE6CF6F215CCF778E33BBE1B009AF1164AEF12E6291
751E80E442EA3B7F610AC42F01AD47430A28CA086B66C6373CA2E0AC04FD9E1C
F9526039555E47CCC4416C53738659A8D2771610D1052C4A24575513E60E71DF
F6141FCB2A41CCDE72561281259A2EDA654F5588628554F95E89F119028E0D37
9B4F83BC6052660F94E9772B00A3F87F4AA42513262A7566605D8ACE18611256
CAC7EBF7C4C95CE2FFC04E2010B9601FE505307F7B36476207C91B522E9BC1A6
18FC12EA42CCAE837E00BCD854AE45CA3B57458830AC66389B5F40802FDE6CC5
AF16178D2325CD1E5BB0CD6685EF00D95C33442DF4508C784C74C1B429E1DF86
C3A5FD8659950A5FF1B86F5946E17C066BE07569CD49D0877FF90E90781FE004
2524D5A8E715E37191069DA2067CA127FDA4BE3F8673C84FC7EC08C0849617EC
42D66EB3F4ABF4471421A9FC4269C6E523D1CB967227705C89D8BBE161578268
6CF2921C7F5578BA71F5CBAA3A86FD1EDD0DBF8F1233C134D4700180D823C6CF
6985CBAA68D250ED9F97C1F210A1FA851EF6FED33B576D83B92D614C6AC40612
44952EB5162675B1533BA554288DE0AE474D9219216474DD77B4484B034D7148
169EBC6B690AE27A697A48B234C37155C75A7B6CD5D59594F81F8F8E2924B5C5
FEFABF8A4BAA9A1EB7D73D0748950EB00873A8DE35C672D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 98 /b put
dup 103 /g put
dup 108 /l put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC1580433EF2163BAD39A4121E1ED7FD68A67B654FA8C6FAE137AB8F1904F2AB
C42E023E3B7C9DAA0CF6254C627A1977E6EF8F7D549E21A431B12B0FD00E1493
C36A513A78A3DEB00D1E4D789FD52E782C90AF6D7392F31F58BEAE378AA9B1E1
3562E68C1D259FCACD70F0CCF12E488A3F223BD3DC3E3E94DD3DF00391AFEE3F
C605BE6E4F10A784535F5279BBEE5CDA45A60F07E67B8C973BE6D74A24C6AF12
C6699F6BB689AC03CA093B8670D02EC066E0186EB4EE8C0463541489F5666602
5C854B28533F3D64DEFADC45766283944D7293D6FB1B42BCDDF2F241AB2677F8
0902AAFD2B6018DD0680B43A5AE7900B43027AF81613A051DB8558F2E61CB9E2
FFC65BCA52B690F4D69938F495AC07199FA85267A621E6CEC165897D8EF7DC2C
3746BDDC39F1AE04D2E173B080DD050FC4A9D51DD94D3A6457369A57F0B9ECE3
7C79DEF7342F83CA05E96349386689386BFABA5CFC0CE6369C638E695FA65448
5E27FC13792BF8598783704E8026D233EEEF5CA0BF16A759B1636E4B1AEC7510
61030E9698C3C23A8642C108D34C4CED6F7DBE80F25D75116BBDA4B68D50429B
985F23EBA0C907B6CCB4A57AC0CEA9F702F699FFEE5B7FB9F34A31386F07D66A
BC40B5D1621BEA286FE90C2E836AC107BC883A33507560FEC3EAE75200780547
0CF8FD960389A736A651C8E9877DF3E333C4BE1D31DA0BA8D50D2356ECEE41D4
05A20F45CD00300E4C81D9D739DF88C655165C148CA55C7A1D7CFAF030A10ABB
310B4D67130AE7053A2C227BF144440F3D1A1DE6A3DC8F7A013FF5864C01D08A
A572C1E2A9FA65A75E27349DDAEA619E52650F8D44A7B98F5F2B9C054A56D866
FFD154C72A655D2C21917894DE99DEDFCE3088529A5C2BFE6B271EFE69C67B6E
0BE114B6D4808E48F40632F84C34BEA6BD6B76592A8D6425440CFD5B7ACCB414
75AC335830B049460E0D2B318DBC63BFD8062A3915AA5CB574BC60C16FEA1B45
2BFE5FED4E2A045971D213CDC2DB3621FE6CDAFEE3D1D039087BF78F14B0E819
D643B659F742EAF18494A0F07B19060A0D29AC436AF3CD4545A0917ADC691459
C975CCA0A2F73DF858B6CDA2D02BFAB88307660276444B8F0156C0BEDED15F61
B43914C6D17D10383359A4B7FB0314FDF45F05106CB4E5E03072C214A0BC521B
F331B7C82C17C2806104EF6C23FE114747EB3CF0D81B8DF9752463E32915296E
14DF8098D83F657535F20A71EA8AF73445F2B3D1AFC47AB85E70E7A91F20884C
0BAC128B7D4D61C2AA87093F0D9188350856B40B3573D61FA865EBB3E2879371
47C9BE9926DAAAE2602A00A885E1179E5D7D63E5A2950ED9ADA8C302450CCE19
79941291722A40DC3E30BC962B5BE5C7E7366FCED436BEB2A4BE3681818F820B
00324D5E6F6D02B96330C265A5B7F41D915514AA0FAF252C2D470BEF4C407A25
FCEA468F8E5B9780310AE4D7EBA4461B4A2444D27D37602FEB4122EC78AA68D2
37A7CF0FDCCB60AAF7990882F149552ACBF1101C0CC34540AFE1464E34A12225
592CEA5B55AD65B8D966406A86A7FE835F594189F167F40EED0DF7150DB40D2B
141DCC1B668145074B1F2C00C537A79FFCBB1A784959B43E589700A2D42236FF
9E4827B97B3260B16CAF65AE50E06BEAC41533642F272044657171CB4C9B5E6B
1B69E4E55413843443964081BCE8E27FC1425C59A365D365ED04EDF2BA187A60
07ADF5951AAD1697059C16BEC4983D410989B6F51BB7DDD2AC5E0C3B0637D4B3
683E1698E3ACC9258CA206AB5A10743AADCF4829603BBDC10EDCA5FE6205E89A
7B698F02A209F18E448E5F93A974A6048C103AB7C0C1E052A24D0369B8481630
B755D142A1A74C9A9B76802B43A5E71D9C2DBC66C5934A1FF734571A5F13CEDF
41DCD2AE90AA36C5135B4856FEBC7E68BB75C3F492469CCA079507B688AD33AC
1771A8A99A86F0FA91459ACB0967808135C0BDAF764318657C3408B27BB760E6
66591C7F28F3D39E0D60348B4E968CE163C4F798DD4FB8B6FC944408A524C4F1
A64173EDCDB45706FA47340F55A02447E07D86D2377F2DAF01FD51BC11696C14
8AEA1480799331D85D0C2FEC516CAF549098249DB287D624FE3BEC42BEA33119
26A6BD3BCB949FF5D9A0A6F062306B18B90EBA99B8ECF37AA0D9416A7BA71B99
7DC28EE7F99E37098B912752DCA0204894BD6E8B1D8F3C80C7567B757B50E07D
94B187D72A93F12A5FA2C6A34CD738868F0CBCDBC23544F3AE55459B46FA7040
26F489CBF996F36CD0883546560A187FA8E2C847DD7D8D3FCA2D9C27F3B4860A
38694546F20BF2B48DEAFA1AB896AF8CA9C2936BC85745587B107BC3CAD45D52
23B4C4DD7D86C402E6624E5137ED84818210154163A9895C876B9E8EE6F155E7
C0BF0B029AB1F7F0F920D7DC84A6CD11AEAB917F5EFFE35FE411F1090DFD6A39
566ED494381D7F1C63F591A5979ED9277487D56AC876CCD9D4D2363A04D0B712
E92BCBCC98567D3F10A047B820382E0857BEB6D09262DBE90D24AC1E1AC08525
0F6DACA175080F97DD2DDCC634D3D63466944DDA6713AB69DE6BD3015CAB9AC9
F00DE53746EF8C7766A5AE44ECB95BC80D046ABF695117277FB0DF4CA28E377B
D794D4C5EF48F0E7532A96674F383B2D76C9DA1AE485D31111D4970311A732ED
EAD97AFE0F1DE4F641C18E05CCE7DEAC0C62F9912AF444B81CC9C8D614EAC7D0
C4561DD7CAB9CE75D1C905DCF686680F5296E4243401E9CFE9687592B1D12B9A
6263FC038F61ECFB6BA4AF3F730592E4614EF1F6D0051AE41CCCD9A20CA54823
BF8F5BAAA5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (ShipExample.dvi)
@start /Fa 237[43 18[{}1 90.9091 /CMMI10 rf /Fb 152[34
4[30 98[{}2 66.4176 /CMMI8 rf /Fc 147[29 4[52 4[58 98[{}3
90.9091 /CMBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 2362 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 2362
a 0 2362 2393 2363 v 2393 2362 a
 currentpoint grestore moveto
 2393 2362 a -2393 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 56.90549 0.0
56.90549   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 64.01866 0.0
64.01866   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 71.13185 0.0
71.13185   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 78.24504 0.0
78.24504   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 85.35823 0.0
85.35823   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 92.4714 0.0
92.4714   /Lineto /lineto load def false 0  setlinejoin  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 99.5846 0.0
99.5846   /Lineto /lineto load def false 0  setlinejoin  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 106.69778 0.0
106.69778   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 113.81097 0.0
113.81097   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 120.92415 0.0
120.92415   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 128.03734 0.0
128.03734   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 135.15053 0.0
135.15053   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 142.26372 0.0
142.26372   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 149.37689 0.0
149.37689   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 156.49008 0.0
156.49008   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 163.60327 0.0
163.60327   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0 2362 a
 tx@Dict begin { 85.35823 142.26372 } PutCoor PutBegin  end
 0 2362
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.6 0.6 1  setrgbcolor  [ -42.67911 56.90549
42.67911 56.90549 28.45274 -28.45274 -28.45274 -28.45274  /Lineto /lineto
load def false 0  setlinejoin NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.6 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 42.67911 0.0 -14.22636   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 42.67911 0.0 -14.22636 0.0   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 -71.13185 0.0 -14.22636   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 -14.22636  false
NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.0  1.0  scale 0 0 1
 setrgbcolor (b) show grestore gsave 1.0  1.0  scale (C) show grestore
} bind def  newpath n { transform floor .5 add exch floor .5 add exch
itransform Dot } repeat end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 -71.13185 } PutCoor PutBegin  end
 0 2362 a -54 2373 a
Fc(g)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 85.35823 0.0 28.45274   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 28.45274  false
NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.0  1.0  scale 1 0 0
 setrgbcolor (b) show grestore gsave 1.0  1.0  scale (C) show grestore
} bind def  newpath n { transform floor .5 add exch floor .5 add exch
itransform Dot } repeat end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 85.35823 } PutCoor PutBegin  end
 0 2362
a -58 2394 a Fc(b)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 0.0 0.0 0.0   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 -14.22636 0.0 -14.22636 
 /Lineto /lineto load def false 0  setlinejoin  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2
y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos mul add
y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{ /ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.
 cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  [ -28.45274 -14.22636 -28.45274 0.0   /Lineto /lineto load def
false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial 0 2362 a
 tx@Dict begin { -62.59595 7.11317 } PutCoor PutBegin  end
 0 2362 a -19 2380 a
Fc(l)10 2394 y Fb(g)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 0.0 0.0   /Lineto /lineto
load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 28.45274 0.0 28.45274   /Lineto
/lineto load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.5 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  [ 28.45274 28.45274 28.45274 0.0   /Lineto /lineto load def
false 0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos
0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length
gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial 0 2362 a
 tx@Dict begin { 62.59595 14.22636 } PutCoor PutBegin  end
 0 2362 a -32 2386 a
Fc(l)-3 2401 y Fb(b)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362
a 0 2362 a
 tx@Dict begin { 199.1692 142.26372 } PutCoor PutBegin  end
 0 2362 a 0 2362 a
 tx@Dict begin 10.  RotBegin  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.6 0.6 1  setrgbcolor  [ -42.67911 56.90549
42.67911 56.90549 28.45274 -28.45274 -28.45274 -28.45274  /Lineto /lineto
load def false 0  setlinejoin NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.6 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 42.67911 0.0 -14.22636   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 56.90549 0.0 -14.22636 0.0   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  0.0 0.0 /y ED /x ED /r 51.21501 def /c 57.2957 r Div def /angleA
-10. 0.0 c mul 2 div add def /angleB 0. 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB {
ArrowB } r 0 gt { { sub } } { { add } } ifelse ArcArrow dup angleA
gt angleAtoB xor { pop angleA } if arc  gsave 0.5 SLW 0  setgray  1.
.setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
0 2362 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 0 2362 a 0 2362 a
 tx@Dict begin -10.  RotBegin  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 42.67911 0.0 -14.22636   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 56.90549 0.0 -14.22636 0.0   /Lineto /lineto load def false
0  setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial 0
2362 a
 tx@Dict begin { 56.90549 0.0 } PutCoor PutBegin  end
 0 2362 a -23 2394 a Fa(\022)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a
0 2362 a
 tx@Dict begin RotEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin { 0.0 28.45274 } PutCoor PutBegin  end
 0 2362 a
0 2362 a
 tx@Dict begin -10.  RotBegin  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0
0.0 0.0] FontDot /Dot { moveto gsave 1.0  1.0  scale 1 0 0  setrgbcolor
(b) show grestore gsave 1.0  1.0  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 56.90549 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 56.90549 } PutCoor PutBegin  end
 0 2362
a -58 2394 a Fc(b)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin RotEnd  end
 0 2362 a
0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin { 0.0 -14.22636 } PutCoor PutBegin  end
 0 2362 a 0 2362 a
 tx@Dict begin -10.  RotBegin  end
 0 2362 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0
0.0 0.0] FontDot /Dot { moveto gsave 1.0  1.0  scale 0 0 1  setrgbcolor
(b) show grestore gsave 1.0  1.0  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 -56.90549 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 -56.90549 } PutCoor PutBegin  end
 0 2362 a -54 2373 a
Fc(g)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin RotEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362
a 0 2362 a
 tx@Dict begin RotEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial Black 1227 4297 a Ff(Figure)32 b(1.1:)p
0 1 0 TeXcolorrgb 1729 4297 a
SDict begin H.S end
 1729 4297 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1729 4297 a
SDict begin H.R end
 1729 4297 a 1729 4297 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.1) cvn /DEST pdfmark end

1729 4297 a Black Ff(Floating)g(Ship)i(Example)p Black
Black Black 1946 6066 a(6)p Black eop end
%%Page: 7 11
TeXDict begin 7 10 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 249 15 a Black Black 257 353
3426 5 v Black Black Black Black 737 4085 a @beginspecial
64 @llx 432 @lly 360 @urx 721 @ury 2960 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/ShipEquilibrium.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: ShipEquilibrium.dvi
%%CreationDate: Fri May 20 16:16:27 2011
%%BoundingBox: 64 432 360 721
%%DocumentFonts: CMBX10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips ShipEquilibrium.dvi -E -o ShipEquilibrium.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1616
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 98 /b put
dup 103 /g put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC1580433EF2163BAD39A4121E1ED7FD68A67B654FA8C6FAE137AB8F1904F2AB
C42E023E3B7C9DAA0CF6254C627A1977E6EF8F7D549E21A431B12B0FD00E1493
C36A513A78A3DEB00D1E4D789FD52E782C90AF6D7392F31F58BEAE378AA9B1E1
3562E68C1D259FCACD70F0CCF12E488A3F223BD3DC3E3E94DD3DF00391AFEE3F
C605BE6E4F10A784535F5279BBEE5CDA45A60F07E67B8C973BE6D74A24C6AF12
C6699F6BB689AC03CA093B8670D02EC066E0186EB4EE8C0463541489F5666602
5C854B28533F3D64DEFADC45766283944D7293D6FB1B42BCDDF2F241AB2677F8
0902AAFD2B6018DD0680B43A5AE7900B43027AF81613A051DB8558F2E61CB9E2
FFC65BCA52B690F4D69938F495AC07199FA85267A621E6CEC165897D8EF7DC2C
3746BDDC39F1AE04D2E173B080DD050FC4A9D51DD94D3A6457369A57F0B9ECE3
7C79DEF7342F83CA05E96349386689386BFABA5CFC0CE6369C638E695FA65448
5E27FC13792BF8598783704E8026D233EEEF5CA0BF16A759B1636E4B1AEC7510
61030E9698C3C23A8642C108D34C4CED6F7DBE80F25D75116BBDA4B68D50429B
985F23EBA0C907B6CCB4A57AC0CEA9F702F699FFEE5B7FB9F34A31386F07D66A
BC40B5D1621BEA286FE90C2E836AC107BC883A33507560FEC3EAE75200780547
0CF8FD960389A736A651C8E9877DF3E333C4BE1D31DA0BA8D50D2356ECEE41D4
05A20F45CD00300E4C81D9D739DF88C655165C148CA55C7A1D7CFAF030A10ABB
310B4D67130AE7053A2C227BF144440F3D1A1DE6A3DC8F7A013FF5864C01D08A
A572C1E2A9FA65A75E27349DDAEA619E52650F8D44A7B98F5F2B9C054A56D866
FFD154C72A655D2C21917894DE99DEDFCE3088529A5C2BFE6B271EFE69C67B6E
0BE114B6D4808E48F40632F84C34BEA6BD6B76592A8D6425440CFD5B7ACCB414
75AC335830B049460E0D2B318DBC63BFD8062A3915AA5CB574BC60C16FEA1B45
2BFE5FED4E2A045971D213CDC2DB3621FE6CDAFEE3D1D039087BF78F14B0E819
D643B659F742EAF18494A0F07B19060A0D29AC436AF3CD4545A0917ADC691459
C975CCA0A2F73DF858B6CDA2D02BFAB88307660276444B8F0156C0BEDED15F61
B43914C6D17D10383359A4B7FB0314FDF45F05106CB4E5E03072C214A0BC521B
F331B7C82C17C2806104EF6C23FE114747EB3CF0D81B8DF9752463E32915296E
14DF8098D83F657535F20A71EA8AF73445F2B3D1AFC47AB85E70E7A91F20884C
0BAC128B7D4D61C2AA87093F0D9188350856B40B3573D61FA865EBB3E2879371
47C9BE9926DAAAE2602A00A885E1179E5D7D63E5A2950ED9ADA8C302450CCE19
79941291722A40DC3E30BC962B5BE5C7E7366FCED436BEB2A4BE3681818F820B
00324D5E6F6D02B96330C265A5B7F41D915514AA0FAF252C2D470BEF4C407A25
FCEA468F8E5B9780310AE4D7EBA4461B4A2444D27D37602FEB4122EC78AA68D2
37A7CF0FDCCB60AAF7990882F149552ACBF1101C0CC34540AFE1464E34A12225
592CEA5B55AD65B8D966406A86A7FE835F594189F167F40EED0DF7150DB40D2B
141DCC1B668145074B1F2C00C537A79FFCBB1A784959B43E589700A2D42236FF
9E4827B97B3260B16CAF65AE50E06BEAC41533642F272044657171CB4C9B5E6B
1B69E4E55413843443964081BCE8E27FC1425C59A365D365ED04EDF2BA187A60
07ADF5951AAD1697059C16BEC4983D410989B6F51BB7DDD2AC5E0C3B0637D4B3
683E1698E3ACC9258CA206AB5A10743AADCF4829603BBDC10EDCA5FE6205E89A
7B698F02A209F18E448E5F93A974A6048C103AB7C0C1E052A24D0369B8481630
B755D142A1A74C9A9B76802B43A5E71D9C2DBC66C5934A1FF734571A5F13CEDF
41DCD2AE90AA36C5135B4856FEBC7E68BB75C3F492469CCA079507B688AD33AC
1771A8A99A86F0FA91426E0157450BB1E732D651D973D109DCDCCE18A51C3895
A6B256CA5CB81245D1ABC297866344D56DA7EF73B5FC46B605483664B9F74DBA
7B6B88191B4BD90813EABEBE48245E4D92F9C8E85B1D9092E4BF06C700543A8B
67CA1FBB55C0C56EB3F3E423E72B4D2638FDD46B139ACC9A12708C302F80F65A
670A78AB4E06B92981DDDDB42BDD50AFFD762F9868DDB943F0079391A1345CA9
63C19659B19CDBBECF557C65FA7DC7D8668B559BC9F364311E9DA139C9D5561C
B28638D1D24A0955BCEF0004F0E37BBB3AA960CAE3659AE36DC5D73E7EB353E8
46B3338F3ACEE9912BAB72604C4F2DA44DBC82342828DEC4E69523DAF786C119
A0BAB3F9F885638417A10A3414930AFC885B7D44B7186BC1DCACB6385F849085
697697434944B274BE821BEF3760A4715EC7E1C588F0490E8B02C406A185A9ED
A3C0619D07A848446D7EDFA0072897F08AA8AB00583364A7DE5E513B1C4AABDB
262B19ADE7B48EF69767288AC61AA02662BD33A69071116D495012F97D2923F6
900993E49F190CEC905CC2FDA6730F3B7B1A7B51F3153B4855C64D3327578D89
9B3A1F97832D283681D392880686AC74DFE69F2841045EE6FFEED8E5A95981B0
D987CE04E6C2508A81321AC82B0ACC851C814FE530AF0494CA065720FDB39936
CBB90848E2C5CE30F691BF7C5993CDEDEAFD1C40905649AB516874DA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (ShipEquilibrium.dvi)
@start /Fa 152[52 4[58 98[{}2 90.9091 /CMBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 2362 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 2362
a 0 2362 2393 2363 v 2393 2362 a
 currentpoint grestore moveto
 2393 2362 a -2393 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 56.90549 0.0
56.90549   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 64.01866 0.0
64.01866   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 71.13185 0.0
71.13185   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 78.24504 0.0
78.24504   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 85.35823 0.0
85.35823   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 92.4714 0.0
92.4714   /Lineto /lineto load def false 0  setlinejoin  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 99.5846 0.0
99.5846   /Lineto /lineto load def false 0  setlinejoin  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 106.69778 0.0
106.69778   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 113.81097 0.0
113.81097   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 120.92415 0.0
120.92415   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 128.03734 0.0
128.03734   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 135.15053 0.0
135.15053   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 142.26372 0.0
142.26372   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 149.37689 0.0
149.37689   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 156.49008 0.0
156.49008   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 163.60327 0.0
163.60327   /Lineto /lineto load def false 0  setlinejoin  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0 2362 a
 tx@Dict begin { 85.35823 142.26372 } PutCoor PutBegin  end
 0 2362
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.6 0.6 1  setrgbcolor  [ -42.67911 56.90549
42.67911 56.90549 28.45274 -28.45274 -28.45274 -28.45274  /Lineto /lineto
load def false 0  setlinejoin NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.6 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 28.45274 } PutCoor PutBegin  end
 0 2362
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0
0.0 0.0] FontDot /Dot { moveto gsave 2.0  2.0  scale 1 0 0  setrgbcolor
(b) show grestore gsave 2.0  2.0  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 56.90549 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 56.90549 } PutCoor PutBegin  end
 0 2362 a -58 2394 a
Fa(b)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin { 0.0 -14.22636 } PutCoor PutBegin  end
 0 2362
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0
0.0 0.0] FontDot /Dot { moveto gsave 2.0  2.0  scale 0 0 1  setrgbcolor
(b) show grestore gsave 2.0  2.0  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 -56.90549 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0 2362 a
 tx@Dict begin { 0.0 -56.90549 } PutCoor PutBegin  end
 0 2362 a -54 2373 a
Fa(g)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362
a 0 2362 a
 tx@Dict begin { 199.1692 142.26372 } PutCoor PutBegin  end
 0 2362 a 0 2362 a
 tx@Dict begin { 0.0 34.1432 } PutCoor PutBegin  end
 0 2362 a 0 2362 a
 tx@Dict begin 180.  RotBegin  end
 0 2362
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.6 0.6 1  setrgbcolor  [ -42.67911 56.90549
42.67911 56.90549 28.45274 -28.45274 -28.45274 -28.45274  /Lineto /lineto
load def false 0  setlinejoin NArray n 2 eq { 0 0 /n 3 def } if n 3
lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll
/y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1
add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0.6 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial 0 2362 a
 tx@Dict begin RotEnd  end
 0 2362
a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin { 1.42271 22.76227 } PutCoor PutBegin  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0
0.0 0.0] FontDot /Dot { moveto gsave 2.0  2.0  scale 1 0 0  setrgbcolor
(b) show grestore gsave 2.0  2.0  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 1 0 0  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 56.90549 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
1 0 0  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0
2362 a
 tx@Dict begin { 0.0 56.90549 } PutCoor PutBegin  end
 0 2362 a -58 2394 a Fa(b)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362
a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin { -1.42271 42.67911 } PutCoor PutBegin  end
 0 2362 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0  false NArray
/DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0
0.0 0.0] FontDot /Dot { moveto gsave 2.0  2.0  scale 0 0 1  setrgbcolor
(b) show grestore gsave 2.0  2.0  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  2.0 SLW 0 0 1  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 -56.90549 0.0 0.0   /Lineto /lineto load def false 0
 setlinejoin  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length
0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 2.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial 0
2362 a
 tx@Dict begin { 0.0 -56.90549 } PutCoor PutBegin  end
 0 2362 a -54 2373 a Fa(g)0 2362 y
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362
a
 tx@Dict begin  PutEnd  end
 0 2362 a 0 2362 a
 tx@Dict begin  PutEnd  end
 0 2362 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial Black 1176 4289 a Ff(Figure)33 b(1.2:)p
0 1 0 TeXcolorrgb 1679 4289 a
SDict begin H.S end
 1679 4289 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1679 4289 a
SDict begin H.R end
 1679 4289 a 1679 4289 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.2) cvn /DEST pdfmark end

1679 4289 a Black Ff(Tw)m(o)h(Equilibrium)g(P)m(osture)p
Black Black Black 1946 6066 a(7)p Black eop end
%%Page: 8 12
TeXDict begin 8 11 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 455 15 a Black Black 257 353
3426 5 v Black 404 685 a Ff(The)40 b(t)m(w)m(o)g(p)s(ostures)g(are)f
(qualitativ)m(e)i(di\013eren)m(t.)64 b(The)40 b(left)g(p)s(osture)f(is)
h(attractiv)m(e,)i(if)257 834 y(small)37 b(p)s(erturbation)f(mo)m(v)m
(es)h(the)g(ship)f(a)m(w)m(a)m(y)h(from)f(the)g(left)g(equilibrium)i(p)
s(osture,)f(then)257 984 y(it)c(will)g(return)g(to)f(equilibrium)j(p)s
(osture.)404 1133 y(The)f(righ)m(t)f(p)s(osture)h(is)f(rep)s(elling.)46
b(If)33 b(a)g(small)h(p)s(erturbation)f(mo)m(v)m(es)i(the)f(state)f(of)
g(the)257 1282 y(ship)h(a)m(w)m(a)m(y)g(from)e(the)h(equilibrium)i(p)s
(osture,)e(it)f(will)i(mo)m(v)m(e)g(a)m(w)m(a)m(y)f(from)g(the)g(p)s
(osture.)404 1432 y(The)c(di\013erences)h(of)d(the)i(t)m(w)m(o)f(p)s
(ostures)h(can)f(b)s(e)h(illustrated)g(with)f(the)h(phase)g(plot.)41
b(On)257 1581 y(phase)c(plot,)e(x)h(axis)g(is)g(the)f(angle,)i(y)e
(axis)h(is)g(the)g(angle)f(v)m(elo)s(cit)m(y)-8 b(.)53
b(Then)36 b(the)g(mo)m(v)m(emen)m(t)257 1731 y(of)i(the)g(ship)h(can)f
(b)s(e)g(presen)m(ted)j(b)m(y)e(a)e(curv)m(e.)61 b(Figure)38
b(3)g(sho)m(ws)i(motion)e(ab)s(out)f(the)h(left)257 1880
y(equilibrium)29 b(p)s(osture,)f(they)f(will)g(automatically)g(mo)m(v)m
(e)h(to)e(the)h(left)g(equilibrium)h(p)s(osture.)257
2029 y(Figure)33 b(4)f(sho)m(ws)i(the)f(ship)h(motion)e(ab)s(out)h(the)
g(righ)m(t)f(equilibrium)j(p)s(osture.)p Black Black
Black 870 4295 a @beginspecial 71 @llx 464 @lly 335 @urx
721 @ury 2640 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/stablePosition.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: stablePosition.dvi
%%CreationDate: Fri May 20 16:45:15 2011
%%BoundingBox: 71 464 335 721
%%DocumentFonts: CMR10 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips stablePosition.dvi -E -o stablePosition.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1645
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E6544A8E490800362539DECEFDA209FBE1774B790CB6222E100903033A4CA73E
F0F4EB1F66741F359B651D485B87864B83A2FCCAFDCC861D7E34DD6D3E6AE7CD
6EA69488607C212ED00D993F9C24F612A61AD8C13C202E9DA91CDD15846EB4F5
FE15650CF4487A938A117EE85ACC8102EB37397718D4F17E60D3CEE08BE4BC5C
C93E8677D3A0A807DA8C72ECC71B26B24CD315BC351E053081BEADE92D2E498E
8A4CDB963B1104272310678F74491DA1572344FA5B2B920DC304A252193F1D93
5ED5268A6AC194D21A19DB87C73771A6CED0715EFF43475A0FD680DDAE896369
D59A6B8297CC9EFE00FCB9EFCA2D26256C58D6809FA22A0DC3112E7888A49945
0162B7373CCF7BB457EA8FCE8009D30DFEB19A02D18CA44689E5D8C34CC8F267
CDDA36431BC83D98704404C2E77DE570C7704166CD3DD128179D772063505904
9FC2FE5183581C921EC9198BC03CE04A0F0B2113C7B19A19D7E1DCF6AD566401
52A5010D25C836FAD8B8569DAEAE65CEF1295FF2EC1D6F82BC0428A071213C63
F9E6981B7A7D02A567FB66A67AB2E9556E6C9AE40D3CE74A353A702BB017E760
AD9AA7BD2198D8808551147686B2ACDAE4BF534FC07180E277C771BBC84A3007
94A6EA81739C1FE770576F4593A1DD7ACF15A1E166892EF94CCC6BFED98F0D54
D93AB3AE38D3F24C63EFD772D35A49E34D4359CD47A000608F799114BE5D3635
9D09FD6D5B025A7B766FFA65AEA58C77DC4ED68C27DD847573EBAD6AFB646F54
CEC76AC98678B54E6E3A103EBC0F25C44B4AE7D581455520DA75F0AA2AD71C12
CA19CC7AE1B8F62F15899242621F17260A5F8DB1B789A7340EC576E93E5592C5
03E4DA37DA7FABD00C06BE3B854DFA815E1F376539ADACED2F63269293495687
A19CF128855B9566EB6AA1B52455A825369304D7A2D66EFCE4E4562017EFC2DD
684583B0D7B2DAEB2429EDE50A4654BC39F1EFF014357292F0EDFB338F67BB46
6F76A8368D8F95C3F24AC4B3FB9BC915F33894C1F16657A6BCA6304A8C64D277
F06A9EDC36BEED7B38C0FE96358F8BF611AEC1BD03438D032A9D664F75DC33F6
16E502FA66079AD2EF2506FAE512122EF0B3FE32326369F32F6303156253A898
84CD31AAEDEBD042CE0BC9604FAF689BA722707A9996DCC3C85EA3D369EC41B3
4AED16D742A5D1B9F6D95229B4B986A164AD3E5074BA33B83BF325C0CEEB8AF6
D8424C4DA1F1621703C8F4ED38E77C078434198A921ADF3ABB209D23A34B92ED
93163969607261EB23FFA438DFE3FA1F856AB5E9A9A50F354AE6A8F5989499D5
07068D1F0E2E23BB88A8D5533B65406BE8846DF64B0A78FF8FE0BCA3F9E72295
10F6C7F701BB0151E1E17E5713B94A842F0F1B0F34B176EBAE603A02F6528ADD
C4C65A05E4E89C54FF54FD2559C2801F6E1637E5119AC7480C1B769BA6D5E2CF
9DD829514393F5AE3DDB752C9EF9923DB80C40E3FE8289B79FDF87ECD6F679DE
D5361CDB76FD9178B187F6FC77D25B45EB9F2AB2595E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (stablePosition.dvi)
@start /Fa 255[71{}1 90.9091 /CMSY10 rf /Fb 205[45 45
49[{}2 90.9091 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 2126 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 2126
a 0 2126 2187 2126 v 2187 2126 a
 currentpoint grestore moveto
 2187 2126 a 1093 1063
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray   0. true -42.67912 -42.67912
42.67912 42.67912 0 Frame  gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 85.35825  0 -85.35825  0 ArrowA CP 4 2 roll ArrowB
/yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch def /xStart
exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq false and exch
2 lt true and or { /viceversa -85.35825  85.35825  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -85.35825  def /maxTickline
85.35825  def /dT 2797019 abs 65536 div viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke { 0 setlinecap stroke
stroke} def /subLSstroke { 0 setlinecap stroke stroke} def 0 dT MaxValue
1 add { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99 { /dx
exch def /x cntTick dT dx log mul add def x abs MaxValue abs le { false
{ x minTickline  moveto x maxTickline  lineto } { x tickstart STsize
mul  moveto x tickend STsize mul  lineto } ifelse } if } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 10 subTNo div 9.99 { /dx exch def /x cntTick dT dx log mul add def
x abs MinValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto }{ exit }
ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW
subTColor subLSstroke grestore } if showOrigin { gsave cntTick tickstart
 moveto cntTick tickend  lineto Twidth SLW TColor LSstroke grestore
}{ /showOrigin true def } ifelse } for } if end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 0 85.35825  0 -85.35825  ArrowA CP 4 2 roll ArrowB
/yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch def /xStart
exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq true and exch
2 lt false and or { /viceversa -85.35825  85.35825  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -85.35825  def /maxTickline
85.35825  def /dT 2797019 abs 65536 div viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke { 0 setlinecap stroke
 stroke} def /subLSstroke { 0 setlinecap stroke  stroke} def 0 dT MaxValue
1 add { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99 { /dx
exch def /x cntTick dT dx log mul add def x abs MaxValue abs le { false
{ x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT
0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul exch moveto cntsubTick maxTickline STsize mul
exch lineto } { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick
cntsubTick dsubT add def } repeat subTwidth SLW subTColor subLSstroke
grestore } if showOrigin { gsave false { cntTick minTickline exch moveto
cntTick maxTickline exch lineto } { cntTick tickstart exch moveto cntTick
tickend exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{
/showOrigin true def } ifelse } for /showOrigin true def /dT dT neg
def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub
} ifelse { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99
{ /dx exch def /x cntTick dT dx log mul add def x abs MinValue abs
le { false { x minTickline exch moveto x maxTickline exch lineto }
{ x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if end
 
@endspecial
973 738 a Fb(1)902 1443 y Fa(\000)p Fb(1)902 1797 y Fa(\000)p
Fb(2)1425 1196 y(1)-789 b Fa(\000)p Fb(1)-470 b Fa(\000)p
Fb(2)1093 1063 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1.0 -1 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1.0 1 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.8 -1 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.8 1 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -34.14342
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -34.14342
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.6 -1 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.6 1 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -25.60773
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -25.60773
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.40001 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.40001 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -17.07204
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -17.07204
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.20001 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.20001 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -8.53633
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -8.53633
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.00002 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -0.00002 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -0.00064
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -0.00064
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.19998 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.19998 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ 8.53503
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 8.53503 42.67912
 false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5  scale
1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C) show
grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.39998 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.39998 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ 17.07072
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 17.07072
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.59998 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.59998 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ 25.60643
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 25.60643
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.79997 -1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 0.79997 1 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ 34.14212
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 34.14212
42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 -1.0 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 -1.0 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
-42.67912  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 -0.8 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 -0.8 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-34.14342  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
-34.14342  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 -0.6 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 -0.6 ] def /ylength y
length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-25.60773  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
-25.60773  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 -0.40001 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 -0.40001 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-17.07204  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
-17.07204  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 -0.20001 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 -0.20001 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-8.53633  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
-8.53633  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 -0.00002 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 -0.00002 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
-0.00064  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
-0.00064  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 0.19998 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 0.19998 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
8.53503  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
8.53503  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 0.39998 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 0.39998 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
17.07072  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
17.07072  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 0.59998 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 0.59998 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
25.60643  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
25.60643  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ -1 0.79997 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow
 } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 0.7  0.7  scale  false 0.4 1.4 1.5 2. CLW mul add dup
2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w
neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { BeginArrow 0.7  0.7
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave fill grestore grestore 0 h a sub moveto
  EndArrow  } def  /x 0 def /x1 5 def /y [ 1 0.79997 ] def /ylength
y length def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add
-1 roll add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 19
 div def /mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index
2 add 1 roll } repeat pop pop } def /divvect { ylength exch 1 index
{ dup 4 -1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def
/k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 42.67912 mul y RK 1 get 42.67912 mul } def   mark /n 2 def
19 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def
xy 2 copy  42.67912 div exch 42.67912 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -42.67912
34.14212  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 42.67912
34.14212  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 0.0 0.0 
false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 2.0  2.0  scale 1
0 0  setrgbcolor (b) show grestore gsave 2.0  2.0  scale (C) show grestore
} bind def  newpath n { transform floor .5 add exch floor .5 add exch
itransform Dot } repeat end
 
@endspecial eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial Black 1424 4498 a(Figure)d(1.3:)p 0 1 0
TeXcolorrgb 1926 4498 a
SDict begin H.S end
 1926 4498 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1926 4498 a
SDict begin H.R end
 1926 4498 a 1926 4498 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.3) cvn /DEST pdfmark end

1926 4498 a Black Ff(StableP)m(osture)p Black Black 257
4996 a Fe("Easiness")257 5060 y
SDict begin H.S end
 257 5060 a 257 5060 a
SDict begin 17.99446 H.A end

257 5060 a 257 5060 a
SDict begin [/View [/XYZ H.V]/Dest (section*.7) cvn /DEST pdfmark end
 257 5060 a 149 x Ff(If)40 b(w)m(e)g(plot)g(all)f
(the)h(p)s(ossible)h(motion)e(of)g(the)h(ship,)i(w)m(e)f(get)e(the)h
(phase)g(p)s(ortrait)f(of)g(the)257 5359 y(ship.)52 b(W)-8
b(e)35 b(\014nd)g(out)g(that)g(all)f(the)i(curv)m(es)h(will)e(mo)m(v)m
(e)h(a)m(w)m(a)m(y)g(from)f(the)g(rep)s(elling)h(p)s(osture)257
5508 y(to)d(the)g(attractiv)m(e)g(p)s(osture.)44 b(Sev)m(eral)34
b(curv)m(es)h(are)d(sho)m(w)i(in)f(\014gure)g(5)p Black
1946 6066 a(8)p Black eop end
%%Page: 9 13
TeXDict begin 9 12 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 249 15 a Black Black 257 353
3426 5 v Black Black Black Black 987 3080 a @beginspecial
71 @llx 436 @lly 307 @urx 721 @ury 2360 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/unstablePosition.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: unstablePosition.dvi
%%CreationDate: Fri May 20 16:19:36 2011
%%BoundingBox: 71 436 307 721
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips unstablePosition.dvi -E -o unstablePosition.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1619
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (unstablePosition.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 2362 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 2362
a 0 2362 1951 2363 v 1951 2362 a
 currentpoint grestore moveto
 1951 2362 a 8298 1181
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray   0. true -921.87083 -28.45448
-864.96185 28.45448 0 Frame  gsave 0.5 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial -7421 w @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 125.64435  0 -101.97858  0 ArrowA CP 4 2 roll
ArrowB /yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch def /xStart
exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq false and exch
2 lt true and or { /viceversa -101.97858  125.64435  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -85.35913  def /maxTickline
85.35913  def /dT 18646798 abs 65536 div viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke { 0 setlinecap stroke
stroke} def /subLSstroke { 0 setlinecap stroke stroke} def 0 dT MaxValue
1 add { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99 { /dx
exch def /x cntTick dT dx log mul add def x abs MaxValue abs le { false
{ x minTickline  moveto x maxTickline  lineto } { x tickstart STsize
mul  moveto x tickend STsize mul  lineto } ifelse } if } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 10 subTNo div 9.99 { /dx exch def /x cntTick dT dx log mul add def
x abs MinValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto }{ exit }
ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW
subTColor subLSstroke grestore } if showOrigin { gsave cntTick tickstart
 moveto cntTick tickend  lineto Twidth SLW TColor LSstroke grestore
}{ /showOrigin true def } ifelse } for } if end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 0 85.35913  0 -85.35913  ArrowA CP 4 2 roll ArrowB
/yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch def /xStart
exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq true and exch
2 lt false and or { /viceversa -85.35913  85.35913  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -101.97858  def /maxTickline
125.64435  def /dT 18646798 abs 65536 div viceversa { neg } if def
/subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def
} ifelse -4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4
 def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray  } def
/subTColor { 0.5  setgray  } def /MinValue { yStart } def /MaxValue
{ yEnd 1.5 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
0 setlinecap stroke  stroke} def /subLSstroke { 0 setlinecap stroke
 stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines { gsave
1 10 subTNo div 9.99 { /dx exch def /x cntTick dT dx log mul add def
x abs MaxValue abs le { false { x minTickline exch moveto x maxTickline
exch lineto } { x tickstart STsize mul exch moveto x tickend STsize
mul exch lineto } ifelse } if } for subTwidth SLW subTColor subLSstroke
grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le
{ false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 10 subTNo div 9.99 { /dx exch def /x cntTick dT
dx log mul add def x abs MinValue abs le { false { x minTickline exch
moveto x maxTickline exch lineto } { x tickstart STsize mul exch moveto
x tickend STsize mul exch lineto } ifelse } if } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if end
 
@endspecial
7421 w @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 0.0 0.0 
false NArray /DS 28.45274 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def  newpath n { transform floor .5 add exch
floor .5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 -0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
-28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.14 -0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.14 0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -893.41635
-28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -893.41635
28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 -0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
-28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 -0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 -0.1 ] def /ylength y length def
/addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll add
ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def /mulvect
{ ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat
pop pop } def /divvect { ylength exch 1 index { dup 4 -1 roll exch
div 2 index 2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def
/k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0])) tx@addDict
begin AlgParser end cvx def /Func { F@pstplot ylength array astore
} def /RK { /k0 Func { dx mul } forall ylength array astore def dup
aload pop k0 { 2 div } forall addvect ylength array astore /y exch
def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall ylength
array astore def exch dup aload pop k1 { 2 div } forall addvect y astore
pop /k2 Func { dx mul } forall ylength array astore def dup aload pop
k2 aload pop addvect y astore pop exch dup dx add /x exch def /k3 Func
{ dx mul } forall ylength array astore def /x exch def dup aload pop
k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3
aload pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get
284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2 def 9 { xy
n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1 def xy 2 copy
 284.52756 div exch 284.52756 div exch  2 array astore /SaveFinalState
ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
-28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
-28.45448  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 -0.07501 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 -0.07501 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
-21.34303  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
-21.34303  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 -0.05002 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 -0.05002 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
-14.23158  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
-14.23158  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 -0.02502 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 -0.02502 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
-7.12013  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
-7.12013  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.04 -0.00003 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  }
def  /x 0 def /x1 3 def /y [ -3.24 -0.00003 ] def /ylength y length
def /addvect { 1 1 ylength { /i exch def ylength i sub 2 add -1 roll
add ylength 2 mul i sub 1 roll } for } def /dx x1 x sub 9  div def
/mulvect { ylength exch 1 index { dup 4 -1 roll mul 2 index 2 add 1
roll } repeat pop pop } def /divvect { ylength exch 1 index { dup 4
-1 roll exch div 2 index 2 add 1 roll } repeat pop pop } def /k0 0
def /k1 0 def /k2 0 def /k3 0 def /F@pstplot (y[1]|-2*y[1]-sin(y[0]))
tx@addDict begin AlgParser end cvx def /Func { F@pstplot ylength array
astore } def /RK { /k0 Func { dx mul } forall ylength array astore
def dup aload pop k0 { 2 div } forall addvect ylength array astore
/y exch def x dup dx 2 div add /x exch def /k1 Func { dx mul } forall
ylength array astore def exch dup aload pop k1 { 2 div } forall addvect
y astore pop /k2 Func { dx mul } forall ylength array astore def dup
aload pop k2 aload pop addvect y astore pop exch dup dx add /x exch
def /k3 Func { dx mul } forall ylength array astore def /x exch def
dup aload pop k0 aload pop k1 aload pop k2 aload pop addvect 2 mulvect
addvect k3 aload pop addvect 6 divvect addvect y astore pop } def /xy
{ y 0 get 284.52756 mul y RK 1 get 284.52756 mul } def   mark /n 2
def 9 { xy n 2 roll /n n 2 add def /x x dx add def } repeat  /x x1
def xy 2 copy  284.52756 div exch 284.52756 div exch  2 array astore
/SaveFinalState ED n 2 roll  /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if (>) length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.0 SLW
0 0 1  setrgbcolor  1. .setopacityalpha  0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -864.96185
-0.00868  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -921.87083
-0.00868  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -893.86787
0.0  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 2.0  2.0 
scale 1 0 0  setrgbcolor (b) show grestore gsave 2.0  2.0  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial Black 1352 3284 a Ff(Figure)32 b(1.4:)p
0 1 0 TeXcolorrgb 1854 3284 a
SDict begin H.S end
 1854 3284 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1854 3284 a
SDict begin H.R end
 1854 3284 a 1854 3284 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.4) cvn /DEST pdfmark end

1854 3284 a Black Ff(Unstable)i(P)m(osture)p Black Black
Black Black Black 771 5057 a @beginspecial 71 @llx 630
@lly 236 @urx 721 @ury 2877 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/ShipGlobalFlow.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: ShipGlobalFlow.dvi
%%CreationDate: Fri May 20 16:45:29 2011
%%BoundingBox: 71 630 236 721
%%DocumentFonts: CMR10 CMSY10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips ShipGlobalFlow.dvi -E -o ShipGlobalFlow.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1645
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E70A7911CEF46D4A4074EBEC25F55A638011A4E0F2D07A01A042436C62962A50
973F9AB79BDDF1747CA2F970953AD5128331F2715D093DF035D882BFFD0E0C65
4D9E97727C8B4CC50778EDDB5E0A210C9E0A9B95B37EDB25A80BF2A045583389
847B65D114CAFF0FCF67585A6BCBE22DA41D479902960F7C0D013CCE81F60F3D
DF36E91F8276940F08464405DF7352069A414D615BA09E156C449C172832EA2C
E38EA97B9A576B444E00C0B19C9E751336898EFCD4847F7B5095BACD95228E1F
6EDD85621B9643624E6CE80610BFB320B3D0914BE2359C910FCEF969AFD599B7
8545A1AA4E33EF3F14EDECCFD82F9975DCD18BC1B687408F072FA39164340543
5A09C1257CF81A066CBCBA4B3FCF3BC8D6A3496230AAF1232518D07135C7823C
AC45513B2A9911B39603B415168A1FFBED834B271794C994A3F9821E4E9B9023
B08C7CE8D31B5FCFBBFBB71AE71A47B9E18E48F5BDA5D89F2EE08A2784F150B9
180ECCCC77586E39586DB7CB534D1806D9A3A0D376856B2036634A72710FC8DA
959A66289DBD2D073A400E7CA0B870EE6EBF02A0707CEABD8D44A32F85209065
B61A9E7C56EEFE751F19938EF2050F231708623163ED2DB636BA33208269330C
24A4E0B645E707523349225E6B8EB758ECEDE8173B87B4AE6A33F17030AAA7B0
A2CEB87A0360124FD1504C60DE14C8EAAAC52FF900289981316BC60E07B9A6F3
40CECD891D8706212848304E170D27F17330A29CFEA10E80FAA7A0837A0DD1EA
D10B0A7A3F70DB740709CF3330E44DD04F6367E04C3CBB3400BA3C1943B874CF
B4B611D58AD532395FD31FDC361BBAA07179A3D6215C9819796ACC66B0571229
E5D0EE470B9811A0F3B2A4D09B78866901235C66B0B7591265D226C571F25415
55DF310B9923F6206B6845D9D4835F7F36499A9C4BC39F35AC5F1F4360654A09
D9049D73DB6FFE7FB882642CB8D369C6F870BCA1E1753FF36E4D58E1E10A9648
D098A3FEDACD1A2C502230FCD961D0CCA425E6DED4A66CDAA69C13C313F273B8
54D4B38FD38C1237142EC3575FA9E198685DBE5378D15F1D89ED4C66EF889DC6
EF388E0ACA1E5BEBD9F6CD15067CC1DFCC2FE329C3D028161234A63AC44193BE
4FD22BEA989E0E0999737912F8C98FF701CBADEF54CD5334171F7DB3788BD9FF
8EDF35FE355C826531E64803E77D29BB3E854F9651C0D1476CE05C703B840FD7
924A098600AD9B8A35E4940143B7F2F9D4161A3B7C19FFAC5B6FB0F78205FC0E
AA77F7D19FC9EF6A2AD221891746B367763F89E984559639AC76D3E649518365
7267BB599C88BB524829FF9F03F2AED8796CC24157BE07E13474FBFCF2B03852
2D048080030F66C52BFD755F713D1338D3DA15E6A17FFBED5C19DFA174D6042A
7801B869B7AFA0E47001757EDA09D91B79A94F1B69E413295AB26B99D92F0D7D
8BA25521D3972EDD9BCDB08097258A8E2985DFC90A70AD2535072A39F61C86E8
30D434DC8A0B2ABA4757928CBC7C4DA5C98632AC0B2C51F492AEFD0F81A4D16E
26E16BBED2F3A984BCF89071C9EB5BEB9C2B5774CA726572A33E7936CCAACDA9
70EE6E33F5DAF1FC57A83EDB7C2C7B9BF66EFD392AC471BA0CACF553391D990D
1BBEB43C3E8912AAC45722CF60A3CA85AEE6F0340B2ACAFC4985F0441100B0E3
B4FB5BB9E5D61CFD17EFF2BA4B6A96F748C2C8674DFBB77966471D3184B9C5BF
9C9F52CD2F1959A0C455A371D9DDBD9EC24DB85ADA2FC100D12A07EB769E5675
65FAB17AE9FE959C114AB7AD5914A81B75B58EFBB4FA19A9F0F1270456BB1A38
E5A44CB3E9412C2BC6B35EC4C4FBB8896C2BB390979C826ACE9AF6516959D5A3
0A39790113F0EBDDCC3A0F99AB36AD547145CE6B4F3073EC5DA84CC1E2005A48
713F91F179FB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (ShipGlobalFlow.dvi)
@start /Fa 255[71{}1 90.9091 /CMSY10 rf /Fb 204[45 45
45 49[{}3 90.9091 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 709 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 709 a
0 709 1360 709 v 1360 709 a
 currentpoint grestore moveto
 1360 709 a 857 472 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray   gsave 0.4 SLW 0.5
 setgray -99.5846 -28.45274 56.90549 56.90549 -99.5846 -28.45274 28.45274
abs 28.45274 abs 5 0 {} 0 /Helvetica findfont 0 scalefont setfont Grid
grestore   gsave 0.8 SLW 0  setgray -99.5846 -28.45274 56.90549 56.90549
-99.5846 -28.45274 28.45274 abs 28.45274 abs 1 0 { 0  setgray } 10.0
/Helvetica findfont 10.0 scalefont setfont Grid grestore  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 56.90549  0 -99.5846  0 ArrowA CP 4 2 roll ArrowB
/yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch def /xStart
exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq false and exch
2 lt true and or { /viceversa -99.5846  56.90549  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -28.45274  def /maxTickline
56.90549  def /dT 1864679 abs 65536 div viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke { 0 setlinecap stroke
stroke} def /subLSstroke { 0 setlinecap stroke stroke} def 0 dT MaxValue
1 add { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99 { /dx
exch def /x cntTick dT dx log mul add def x abs MaxValue abs le { false
{ x minTickline  moveto x maxTickline  lineto } { x tickstart STsize
mul  moveto x tickend STsize mul  lineto } ifelse } if } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 10 subTNo div 9.99 { /dx exch def /x cntTick dT dx log mul add def
x abs MinValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto }{ exit }
ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW
subTColor subLSstroke grestore } if showOrigin { gsave cntTick tickstart
 moveto cntTick tickend  lineto Twidth SLW TColor LSstroke grestore
}{ /showOrigin true def } ifelse } for } if end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 0 56.90549  0 -28.45274  ArrowA CP 4 2 roll ArrowB
/yEnd exch def /xEnd exch def xEnd yEnd L /yStart exch def /xStart
exch def 0 setlinecap stroke  stroke 0 dup 2 mod 0 eq true and exch
2 lt false and or { /viceversa -28.45274  56.90549  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -99.5846  def /maxTickline
56.90549  def /dT 1864679 abs 65536 div viceversa { neg } if def /subTNo
1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 4.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke { 0 setlinecap stroke
 stroke} def /subLSstroke { 0 setlinecap stroke  stroke} def 0 dT MaxValue
1 add { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99 { /dx
exch def /x cntTick dT dx log mul add def x abs MaxValue abs le { false
{ x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT
0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul exch moveto cntsubTick maxTickline STsize mul
exch lineto } { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick
cntsubTick dsubT add def } repeat subTwidth SLW subTColor subLSstroke
grestore } if showOrigin { gsave false { cntTick minTickline exch moveto
cntTick maxTickline exch lineto } { cntTick tickstart exch moveto cntTick
tickend exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{
/showOrigin true def } ifelse } for /showOrigin true def /dT dT neg
def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub
} ifelse { /cntTick exch def logLines { gsave 1 10 subTNo div 9.99
{ /dx exch def /x cntTick dT dx log mul add def x abs MinValue abs
le { false { x minTickline exch moveto x maxTickline exch lineto }
{ x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if end
 
@endspecial 737 266 a Fb(1)666
734 y Fa(\000)p Fb(1)1071 606 y(1)-553 b Fa(\000)p Fb(1)-352
b Fa(\000)p Fb(2)f Fa(\000)p Fb(3)857 472 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -3.0 0.1 ] def /ylength y length def /addvect { 1 1 ylength { /i
exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1 roll
} for } def /dx x1 x sub 399  div def /mulvect { ylength exch 1 index
{ dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop } def /divvect
{ ylength exch 1 index { dup 4 -1 roll exch div 2 index 2 add 1 roll
} repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot
(y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser end cvx def /Func
{ F@pstplot ylength array astore } def /RK { /k0 Func { dx mul } forall
ylength array astore def dup aload pop k0 { 2 div } forall addvect
ylength array astore /y exch def x dup dx 2 div add /x exch def /k1
Func { dx mul } forall ylength array astore def exch dup aload pop
k1 { 2 div } forall addvect y astore pop /k2 Func { dx mul } forall
ylength array astore def dup aload pop k2 aload pop addvect y astore
pop exch dup dx add /x exch def /k3 Func { dx mul } forall ylength
array astore def /x exch def dup aload pop k0 aload pop k1 aload pop
k2 aload pop addvect 2 mulvect addvect k3 aload pop addvect 6 divvect
addvect y astore pop } def /xy { y 0 get 28.45274 mul y RK 1 get 28.45274
mul } def   /ps@Exit false def xy moveto  399 1 sub { /x x dx add def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -85.35823
2.84544  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -2.8 0.1 ] def /ylength y length def /addvect { 1 1 ylength { /i
exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1 roll
} for } def /dx x1 x sub 399  div def /mulvect { ylength exch 1 index
{ dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop } def /divvect
{ ylength exch 1 index { dup 4 -1 roll exch div 2 index 2 add 1 roll
} repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot
(y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser end cvx def /Func
{ F@pstplot ylength array astore } def /RK { /k0 Func { dx mul } forall
ylength array astore def dup aload pop k0 { 2 div } forall addvect
ylength array astore /y exch def x dup dx 2 div add /x exch def /k1
Func { dx mul } forall ylength array astore def exch dup aload pop
k1 { 2 div } forall addvect y astore pop /k2 Func { dx mul } forall
ylength array astore def dup aload pop k2 aload pop addvect y astore
pop exch dup dx add /x exch def /k3 Func { dx mul } forall ylength
array astore def /x exch def dup aload pop k0 aload pop k1 aload pop
k2 aload pop addvect 2 mulvect addvect k3 aload pop addvect 6 divvect
addvect y astore pop } def /xy { y 0 get 28.45274 mul y RK 1 get 28.45274
mul } def   /ps@Exit false def xy moveto  399 1 sub { /x x dx add def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -79.66776
2.84544  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -2.6 0.1 ] def /ylength y length def /addvect { 1 1 ylength { /i
exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1 roll
} for } def /dx x1 x sub 399  div def /mulvect { ylength exch 1 index
{ dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop } def /divvect
{ ylength exch 1 index { dup 4 -1 roll exch div 2 index 2 add 1 roll
} repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot
(y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser end cvx def /Func
{ F@pstplot ylength array astore } def /RK { /k0 Func { dx mul } forall
ylength array astore def dup aload pop k0 { 2 div } forall addvect
ylength array astore /y exch def x dup dx 2 div add /x exch def /k1
Func { dx mul } forall ylength array astore def exch dup aload pop
k1 { 2 div } forall addvect y astore pop /k2 Func { dx mul } forall
ylength array astore def dup aload pop k2 aload pop addvect y astore
pop exch dup dx add /x exch def /k3 Func { dx mul } forall ylength
array astore def /x exch def dup aload pop k0 aload pop k1 aload pop
k2 aload pop addvect 2 mulvect addvect k3 aload pop addvect 6 divvect
addvect y astore pop } def /xy { y 0 get 28.45274 mul y RK 1 get 28.45274
mul } def   /ps@Exit false def xy moveto  399 1 sub { /x x dx add def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -73.9773
2.84544  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -3.14 0.1 ] def /ylength y length def /addvect { 1 1 ylength { /i
exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1 roll
} for } def /dx x1 x sub 399  div def /mulvect { ylength exch 1 index
{ dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop } def /divvect
{ ylength exch 1 index { dup 4 -1 roll exch div 2 index 2 add 1 roll
} repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3 0 def /F@pstplot
(y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser end cvx def /Func
{ F@pstplot ylength array astore } def /RK { /k0 Func { dx mul } forall
ylength array astore def dup aload pop k0 { 2 div } forall addvect
ylength array astore /y exch def x dup dx 2 div add /x exch def /k1
Func { dx mul } forall ylength array astore def exch dup aload pop
k1 { 2 div } forall addvect y astore pop /k2 Func { dx mul } forall
ylength array astore def dup aload pop k2 aload pop addvect y astore
pop exch dup dx add /x exch def /k3 Func { dx mul } forall ylength
array astore def /x exch def dup aload pop k0 aload pop k1 aload pop
k2 aload pop addvect 2 mulvect addvect k3 aload pop addvect 6 divvect
addvect y astore pop } def /xy { y 0 get 28.45274 mul y RK 1 get 28.45274
mul } def   /ps@Exit false def xy moveto  399 1 sub { /x x dx add def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def
xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt { moveto }{ L } ifelse
} { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -89.34158
2.84544  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -3.14 0.20001 ] def /ylength y length def /addvect { 1 1 ylength
{ /i exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1
roll } for } def /dx x1 x sub 399  div def /mulvect { ylength exch
1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop }
def /divvect { ylength exch 1 index { dup 4 -1 roll exch div 2 index
2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3
0 def /F@pstplot (y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser
end cvx def /Func { F@pstplot ylength array astore } def /RK { /k0
Func { dx mul } forall ylength array astore def dup aload pop k0 {
2 div } forall addvect ylength array astore /y exch def x dup dx 2
div add /x exch def /k1 Func { dx mul } forall ylength array astore
def exch dup aload pop k1 { 2 div } forall addvect y astore pop /k2
Func { dx mul } forall ylength array astore def dup aload pop k2 aload
pop addvect y astore pop exch dup dx add /x exch def /k3 Func { dx
mul } forall ylength array astore def /x exch def dup aload pop k0
aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3 aload
pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get 28.45274
mul y RK 1 get 28.45274 mul } def   /ps@Exit false def xy moveto  399
1 sub { /x x dx add def xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt
{ moveto }{ L } ifelse } { L } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt
{ moveto }{ L } ifelse } { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -89.34158
5.69089  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -3.14 0.30002 ] def /ylength y length def /addvect { 1 1 ylength
{ /i exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1
roll } for } def /dx x1 x sub 399  div def /mulvect { ylength exch
1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop }
def /divvect { ylength exch 1 index { dup 4 -1 roll exch div 2 index
2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3
0 def /F@pstplot (y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser
end cvx def /Func { F@pstplot ylength array astore } def /RK { /k0
Func { dx mul } forall ylength array astore def dup aload pop k0 {
2 div } forall addvect ylength array astore /y exch def x dup dx 2
div add /x exch def /k1 Func { dx mul } forall ylength array astore
def exch dup aload pop k1 { 2 div } forall addvect y astore pop /k2
Func { dx mul } forall ylength array astore def dup aload pop k2 aload
pop addvect y astore pop exch dup dx add /x exch def /k3 Func { dx
mul } forall ylength array astore def /x exch def dup aload pop k0
aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3 aload
pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get 28.45274
mul y RK 1 get 28.45274 mul } def   /ps@Exit false def xy moveto  399
1 sub { /x x dx add def xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt
{ moveto }{ L } ifelse } { L } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt
{ moveto }{ L } ifelse } { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -89.34158
8.53633  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  /x 0 def /x1 30 def /y
[ -3.14 0.40002 ] def /ylength y length def /addvect { 1 1 ylength
{ /i exch def ylength i sub 2 add -1 roll add ylength 2 mul i sub 1
roll } for } def /dx x1 x sub 399  div def /mulvect { ylength exch
1 index { dup 4 -1 roll mul 2 index 2 add 1 roll } repeat pop pop }
def /divvect { ylength exch 1 index { dup 4 -1 roll exch div 2 index
2 add 1 roll } repeat pop pop } def /k0 0 def /k1 0 def /k2 0 def /k3
0 def /F@pstplot (y[1]|-y[1]-sin(y[0])) tx@addDict begin AlgParser
end cvx def /Func { F@pstplot ylength array astore } def /RK { /k0
Func { dx mul } forall ylength array astore def dup aload pop k0 {
2 div } forall addvect ylength array astore /y exch def x dup dx 2
div add /x exch def /k1 Func { dx mul } forall ylength array astore
def exch dup aload pop k1 { 2 div } forall addvect y astore pop /k2
Func { dx mul } forall ylength array astore def dup aload pop k2 aload
pop addvect y astore pop exch dup dx add /x exch def /k3 Func { dx
mul } forall ylength array astore def /x exch def dup aload pop k0
aload pop k1 aload pop k2 aload pop addvect 2 mulvect addvect k3 aload
pop addvect 6 divvect addvect y astore pop } def /xy { y 0 get 28.45274
mul y RK 1 get 28.45274 mul } def   /ps@Exit false def xy moveto  399
1 sub { /x x dx add def xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt
{ moveto }{ L } ifelse } { L } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  -1.0 0 gt { dup abs -1.0 28.45274 mul gt
{ moveto }{ L } ifelse } { L } ifelse  } if  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath  1.0 SLW 0 0 1  setrgbcolor  [ -89.34158
11.38179  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 0.5  0.5 
scale 1 0 0  setrgbcolor (b) show grestore gsave 0.5  0.5  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ -89.38675
0.0  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.0  1.0 
scale 1 0 0  setrgbcolor (b) show grestore gsave 1.0  1.0  scale (C)
show grestore } bind def  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.0 SLW 0 0 1  setrgbcolor  [ 0.0 0.0 
false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.0  1.0  scale 0
 setgray (b) show grestore gsave 1.0  1.0  scale (C) show grestore
} bind def  newpath n { transform floor .5 add exch floor .5 add exch
itransform Dot } repeat end
 
@endspecial eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial Black 1352 5261 a(Figure)e(1.5:)p 0 1 0
TeXcolorrgb 1854 5261 a
SDict begin H.S end
 1854 5261 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1854 5261 a
SDict begin H.R end
 1854 5261 a 1854 5261 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.5) cvn /DEST pdfmark end

1854 5261 a Black Ff(Unstable)i(P)m(osture)p Black Black
Black 1946 6066 a(9)p Black eop end
%%Page: 10 14
TeXDict begin 10 13 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 455 15 a Black Black 257 353
3426 5 v Black 404 685 a Ff(Th)m(us)32 b(w)m(e)g(come)f(to)f(the)h
(conclusion,)i(the)e(ship)h(can)f(automatically)g(con)m(trol)g(main)m
(tain)257 834 y(its)k(left)f(equilibrium)h(p)s(osture.)48
b(Ship)35 b(can)f(k)m(eep)h(its)f(upside)i(up)e(as)g(long)g(as)g(the)g
(cen)m(tre)h(of)257 984 y(buo)m(y)m(ancy)i(force)d(is)h(ab)s(o)m(v)m(e)
g(the)g(cen)m(tre)g(of)f(gra)m(vit)m(y)-8 b(,)36 b(main)m(taining)f(p)s
(osture)f(of)g(the)h(ship)g(is)257 1133 y(v)m(eryeasy.)257
1422 y Fe(Di\013eren)m(t)j(Ships)257 1506 y
SDict begin H.S end
 257 1506
a 257 1506 a
SDict begin 17.99446 H.A end
 257 1506 a 257 1506 a
SDict begin [/View [/XYZ H.V]/Dest (section*.8) cvn /DEST pdfmark end
 257 1506 a 130 x Ff(Something)49
b(in)m(teresting)h(in)f(our)f(analysis)i(is)e(the)h(conclusion)h(is)f
(indep)s(enden)m(t)h(of)e(the)257 1785 y(detail)41 b(information)g(ab)s
(out)f(the)h(size,)j(w)m(eigh)m(t)e(and)e(design)i(of)e(the)h(ship.)69
b(It)40 b(is)h(ob)m(vious)257 1934 y(di\013eren)m(t)23
b(ship)g(will)g(main)m(tain)f(its)h(p)s(osture)f(with)g(di\013eren)m(t)
h(motions.)41 b(Or)21 b(put)i(in)f(a)f(di\013eren)m(t)257
2084 y(phrase,)40 b(ship)f(will)f(adapt)g(its)g(motion)g(during)g(main)
m(tain)g(p)s(osture)g(when)h(w)m(e)g(c)m(hange)f(its)257
2233 y(parameters.)404 2383 y(As)33 b(long)f(as)h(the)g(cen)m(tre)h(of)
f(buo)m(y)m(ancy)h(is)f(ab)s(o)m(v)m(e)h(the)f(cen)m(tre)h(of)e(gra)m
(vit)m(y)-8 b(,)34 b(main)m(taining)257 2532 y(p)s(osture)26
b(is)f(easy.)42 b(One)25 b(phase)g(plot,)i(all)d(the)i(ships)g(share)f
(some)h(prop)s(erties:)40 b(one)25 b(rep)s(ealing)257
2681 y(p)s(oin)m(t,)32 b(one)g(attractiv)m(e)h(p)s(oin)m(t)e(and)h(all)
f(motion)h(curv)m(es)i(mo)m(v)m(es)f(a)m(w)m(a)m(y)g(the)f(rep)s
(elling)g(p)s(oin)m(t)257 2831 y(to)h(the)g(attractiv)m(e)g(p)s(oin)m
(t.)44 b(As)33 b(ho)m(w)g(in)g(\014gure)g(6)p Black Black
Black 1157 4400 a @beginspecial 53 @llx 549 @lly 248
@urx 721 @ury 1950 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/topologyStructure.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: topologyStructure.dvi
%%CreationDate: Fri May 20 16:51:31 2011
%%BoundingBox: 53 549 248 721
%%DocumentFonts: CMR10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips topologyStructure.dvi -E -o
%+ topologyStructure.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.05.20:1651
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 83 /S put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6DFD21EAD729CDB7B378CEDD34262B37A194EDD0BDB24AA42649375B
491DC08F6B03DFEB517B2FC125DA9373AFAA94F4E4BC09510A73E079F4ABDD8F
93529E898B13ABCDE7322323B3A2A02A0BF388E89B4F529A66FA22D38E3EE342
54475A1989BFB7A119CF95750D5A18BB4FA9CDA30DB6F1AEF8AE8448BBC999C9
FD0D74DE9A17A3153617F07CACE92977B68FB5A1CFB29FD42494D5D2B9C1ED81
2F3CCEEC1BC079E837DDBB57C7E351F9925FB96349F8D9786D8E6FF03E9C4C1E
67DB235577B68003BA14073E2702296B284F803259283005D97035874D2B9AFD
4D3F29B4B1E6EDE30DDB9C68348CC174A091791FA74520C8614D4FB1125CBD6F
B9367559D715ED057FDF6DAAC180C7FA5CCEFD0C5878A91B20D4919792C03CA9
3AFC986C34C08358A3E85F241E3F8F815FCE7C8E07C2A4258E17D65823264049
3803D47C96A2745580EDC957AC4291730A840A2BADA50A28342A2B7093A3F731
4F4F656E974389E133C53F89D5DD6407BB98B211697941A927BC72A0956FA78E
2DC624B2C253F76778698BD1510D509244AB0465D4261E3AC31D77C4F755096B
50C9CD8103CFF51490796CF35B02E38BFB36CBF2E6D0D7304344C4523C369946
C3BAD318835D4707E90A0340BB7B6ABEBE9EF7E7FF54D1784AB514FAC0FDC8DE
B8DE95405811AB2F25F2391855929C2C452295D698C749DF868A962183036CEE
800D650FE2CD2E74C038665ECA680B173A27305874D4AEC967043DBCF9275F02
7D92A0AC4C098A5DA5939BFA435FE56060110EA1E9FF2BCC9C5E93964FD43199
8133454CF0A83B9946D6D2235AE3F345BEFA7D935A4FD76D7A9CF080E34D1983
6FAB58E2C90382153341BC606532649904163DA1A7F009AEA3326E4E883510D0
DD754C5FD1B4ED4F1340B37A01BD97F34FD6BE3C7245A6DC39CBB817667EEDE9
B62D411DD89A32CB8A923E2342377642BCC3B805A60ED484FE92F0C684F4A041
9C055D1F1BDC06C89A7EF1AB04C8E0875032E159EE4FDC6240AFF044845F16B0
2CDF9CA3C2BDF4796BB6DBDB4AA40BFC0B4539E692126139F0AA26835DF10069
557053F660C1CA66B72BFC199714C3629599E8C4549EDA57B3D619B3678AFFD8
6AAD868BF8E257ED0CE37BEA35DB43628938193BAE9FC3BCA929D0DE3BB87997
0EF18BAE7D31647490655B6961242773C74D454460698242C7566FBFFC2F879A
29143B3959C09ADE23908430E8DCE828BCEF5293CD53C697B9B1D8628B34F760
7861CB7A52ACC22238637206A7941CF0CD9403BD88E1DAC75E535A8A3A8F913D
84D86273C5839A1220D9B2CCA344FBF34B4B689DCAAC170408185E91647F364B
DDD7DC540697C5D9896F2BFD0D101F03E134E14130A409334AE7B65C6488D3D2
CC767E174FE14A8A0A94F58F60412418EFC14448CD0B2BAB277318EB7238692E
B7ECF07FC29EC3850D88DBE34B63F5F3C30DE557C1CE54E01D53F9854D33213A
17539AFB4E5E6E11F018CD328295CF922FF601D69125F828B4B2DB8F0E587D12
C13EEFEC631D2B1F265ABC4F7164344947526FE0F7C9A61D80F1562BA19D4429
742C792BB06D6693EB8BE6D7B8D681EC70E8F0D3BF4A270F731C08C041A0E29B
AC570328431B9AF6E8EAECE5DC3FD9AD5F1F56B0EF86100AA9C79BE4D3D5B417
1074B0B21AE18BE393984499418AFFE4B47E572A8DB0D0565F05E271CF122E37
70490B395A70930DEC703BC7366ABEDC18A5115BC2754979EB15B8ECA0DBF851
EFCF038C5111C7471C53D6AF2035A07E3A259DAD2B970B9D2256FDA5B3420868
2B547D1EB6B3863E6D8524CAFE784CB873F37AAE2CE70CF867731F2800A331B3
55D61BDDFA52213DAA73D2C19779CE29A6443914C795779BDB7815653B9CE7A8
6A666662DEDC2645ACD49B5E26E8AE67F92FF2A54569A59D638F44ECE09E6359
1F45AD67FE373F51F1A20DAD98F70313C6404D3D2A68B2366102ABAD3D8ABE1C
FB0A9DE4579EDEA6336555DA1A22700A87322A49311CC7608D7950277F3E39DC
10FA1DD8D408A9E655FE1771612C795BCD5607F9E5696F13AF61A698898DFEE7
C6C42706A376F8E853EAD26FC5AFB06E6C5B432D1888DF3C4F2C3D97BFA325CE
80163D4DE87959726E9B108EFB617CC787B7F506B8CD728DD98676CAF36DEF43
66C1C08E0B8941FEB0A2064F98DEE801A23B863BA56BA1B42B0007490AB2BC79
05476C504EF844C1AC761F8CD5AB48AC20CA55F43656320FA10EBA3DF8E102DB
011979F5CA65F81B1E9130A495252DB17A882420C7FAA1CFD4FC83B469FCCA06
5537BC8AB967960FE6E8D308B9FB0F145C6D919D3E0F0D7A4C4C6884D7571563
5A9C55306AED6DC2072184666B54C40290FC6BD7E65F7F1C0D5B752A7B7AEEB8
C096149B68721C5A1D2E8D1214571326B7A7A5FE7216BCE081EF42F0846374B5
0FF5A473966CA2B53DB31F0659208BB467DEDED13A24AFBD4A9046A350839CC7
A06F95CC4A98B9DE4976D3CA97B10294DC40C53BB0F0A68C8C8F81831487AAC4
D0FE2DF4A67BCD4FB62217F8A456073E5A42A78A9078325E38F072BBA7DFEB58
4CE0DD8F713A7788CFFFFA0D1DB5F760F42A4A3B5750F5A6FE3AC28FF3D99417
C0A810B006C9498D723A647F071F2636D7287B209D2A7FB3F8FE3FF0191A1BB5
E581A85C7497A50516F5CBBCE54E39DB4E00B462C1CEB220EB7D3F8A7C29ADFB
EE0043D4664253B09D5DDA727FC16450E008B9A2A9C69D704164C36B9E9D4EF4
AF5D2E1BC3888224F96AADAB604224E142F3A04CE8965163A200CDAB98D323C1
0918F931D3C555B5F31601072168C2C33A1025FD82F5FE833D2187685FC183A3
10E91385703F20FB70E37AD94F9A0FE4A672D23E78D7977193B811DEE0DD0F41
3ACD858F7BA649F51728C1C41C9D9E9C6DF936F6CD03F622792A5089485FC0CA
911589D863817414D74FD2B549D87043C4686B2231DD3636D2F1DF2524613AFB
91D09B545847359558542A3567D737A48993D46DA0E27727BB75C8F5D78B4963
B00529F029AA67E6E3802DB290A9AB6C5C248369586AA6C11D68CC26B005BDAD
0152F2AFCA913CADECB67CDF6D1D9379BE4A4CDF11301D13FFA059E058B8D787
550F21F174E835B87CB181470596640631210086E414F40C92A1FA9FF6F41F15
F8EF3302795CB2FDAC74A03B48515BD24A80DC14E648B5D93642FB7116B7DA9C
6B58019B2A7675EF606F0BE5C820D2DEA706A190DC7737EA1B9C9EC4B87E96C2
AF2D56455029BF0149475FED5D4C755BFA7591B0BA546745428E680CF5CC7F28
9B63864D9A184D3320F9A6C9173FA1094FB48F288FE9AAB6F97C6091FFE800FA
6AD77E5946C98D84A3ACDA007AD576D098C74AED2DA20CA3135A22E688A592A5
44EA62FD307F92CCC63A9A5185CE936DC2239FB396C39B1137AEEC04317F2506
C5B82C565F279050BBAED3AEE310772F52597426DCD61375A2A41DE24B56A3DA
D1DE2BF106059042AA5B0DA63717FF25B03AF77B26C294196729E76DF1BBE97D
A2B649A0FC072725CCDD0B6F30E468D5A65F1A04D13D210BE3AF834E323CC3B3
C0176A700F308C1CE81D4BB5D308A00AE338A147186F8773BA344AC2536698E7
5ED10E61FCF1E85C674D77A59AA5A32530CD99F849E476B609A2F3858C072C3A
0DE7F5ADFC288C177F0096018AE348161A2E09E33075E31A591C7339DC3A308F
DD4AF694D5D9EECAF383B7E3C40E766331BF5B5B4D41F98C51EE71CDF0EB2A91
5F2248E30C8D5733F095C7F75F280E6049ABE313518E4E0FE6104B3C2B55A210
FCB74F1B7DB2CA1EBA168EFA5A9F852AB4F9B961F40056A698FA099AFB55D4B8
950726E5C2384DB9981B76BDA8075DC2C36AB6A5E24E08579A1FDF8BFCE2C904
D5B88C636D2A37320328F5B290A3A9BCC29F0D1993820FB00719E7DFDE871EC8
DE827DD7186848522B8F4BE793FF26DD3BD4E925D646491FEEB75CDA13835EB3
79BF849FBE7328D1D46DB6F161A497684EA9127A8F9749D5727D2C25D66928BC
C7F09A554F60DCB9DC94301EA34C945071041E39C6DB06B9236413BC04B61B36
37D2F729F5AE94BA4651D66FC84F5B51D6B1BA13F28E67B765043C0FFC501A4D
A7A7A94F39F9EC3FD96089EF975A6FA7E6019EE7FEE940C7F9910BDB2633B2FF
76855D1517F0CA67B629F01456A4AB5FCA52E32466A3A0543E67C7BDD5AE4293
CEFCD56A077A1AE276BE838F625BB18E8539D5CAA1E0163477E1B802CB74EC7F
701A1B8391F1A591C6DA31C619FE2C35AA6435A7ADE78B7F00F7CAB137AFDA8E
F93C12E7E82D917DBF352FA560949652C7A072922BC0024A6A350DCF2E5DBF02
D1F0D130AB4D61A4708C19B1196A667ACEF3AAFD8F719BDFAA580154F46B8D26
85B1C92EAFBA1AC53ED260D971CB316CA00A6F71A5CA73BB6B534A13C7441651
605B3BD3302320252D60254B1ECF9BA0867EF1C2C489A6B6B3AC727B2B20F44D
D8E29C008772EB095DF0CF62ECF747656544086E820C1B290E073B8A067DFE17
BAE106CAE3DB58FAFE619C880A478C5C68F7399276BEE5CA4C4C5CF11AA1E6B3
BF2B69B6E3CFE2ED1C24AE757E8D947B77172142F3510FAAD6CD8FD06C0E591F
C452A3E6E844D4E1A747FB5B9ECB79CE3F6D75B932873A4A26D63FF24E814B31
66042C7C8D92F0F137E33EB9D401B4C8AAD4BF80D66AF3CEB4E04C0C25FD1C6B
07BC29EB264DF0A1C9CA469FD041928BD42E6ADD899656F613893A3E61E4366C
99DBD8629B8039F36BC29FB41E8C991F79A1E770C2B21BE3C2D6D6E75A172F6F
B8BA1729FAE7358D22BFB488C7956018FA6EDF3BE0F80D94746EE2E32B9AFEDF
5B6ED2424DDE19B50554681D98A29D465AE86495062D129A903E56A971BFFCDB
5AE3BE68B5F550D7CE747333CC93F5DBD06193643DFA805EDA2BADB4CF6F4E46
197C0F0A9C762B6879AFC197A157CB081B56F314E87E114CB9604084CC7672FC
EF0422837EF937AD8FFEEE700DBC42A0C77EF3BB2E5F207BFD0F1DEBD4551EE4
C9271AFAE4CFFBD857D2D3BA3F58CDE96C6E30737F6C2CC5D19F896D27654129
FF816E4EBE2F5BA9F0164BF3FC0BA485E0507FA5164B60AE94BDB33A78D72B02
C2BAC105D0A38C992C88FA9C0E5A57BBE6F347D87A9C7A41E38479AB45E9E9B8
B8AABEAE080B90C538830A819038313D75E2E1B3A0ED60D826953906E2D2C428
F0B1E20A6D583EC800D4550316477ECD4D25F61E4F4A8B649222DF5C879A687E
59B177377093F8B72AEF5DE8923FB17FB781E827CB8DC4A23DE3B1F7EBF286DF
A1C85D3316DFC1A3E8D228480B6C91B0C7D4916EBDCE0F3BD4C880F88EF0C720
928F0D44DA58A5C7D727693917BA5F803EAC3386C3AAA3F926172B8E50CF99BD
E91472B4DB4ADE4EC580A4A89FC2974796DF31EEB7B97D45BEC53BFD028AB16F
1E8F1FEFEFD686564C3C9B0DEC87D7FDC80981828429F98FF8E35E857316A4BB
1F235FB916F22B31D9EFC8D4326DD04563004B7081DA4B6E102D2DC3DD30CADC
32C79DD804654FB2E60A3A592A6CD3BA3EC99F2AEA14452659C96EDF03BDBFB7
A4807B5457AFAA47960ABC8168CE3307995798DAE972558BE88E53228B1544AB
BA632136F4596B941EEE41F2B7FFF8A31F1124CACF4907BB30FA572028716D11
E5C4920D882E9DC4E26071BAF9B983CB6CC69E01BCE8C24A3AD5119757E8CFD9
6D294A9756C22F183B7CF4541B47C68C519E44844655F36DF0E4B47055E97D94
A7D38F8C38C3D60F714A76BB00BD0FE932A814E9FC90F1FAF5FD1AF0BC68B819
BB25AA3AC6CF41276A6A64C22E277007B290EB55754C3887F7EBA81EC2312D91
95938D41930334B5F384536CE79363259249F83C6EB8E7D84DE0038C216B998F
0E9BECD6D87C4153B05090478904AC148DF321A5DABE62FFABA2F8AA2A80FEBB
EE5C72A3542F5FB12BB30F416FA47122D32F4823A65A904A9C336BB3C4366F1D
A125757426D0F448C4A1187F65B8374CFF4D622B20B389B04F2DAD8E66F678F3
C6A06BB3B9027B3F1793C2C5B526023119B6A5E14F45C8C6056F902BB2B02EDA
D0F05CD7C388A3430ABAE99C6836F1115E73D34B6E3EB970054003BC3C76A2D0
CE9EC7EC911D3F6A052F048B4760A6C2E6BB95F0E29FEBA4809B68FA1FAD242C
14ED97E51BFF75CEF1290B8BD36C8BD5987A7E8EA46379CBA8121A42184E4AAB
1EA4469C23E86672E966BBCB8C446EABCEF960A149F92E0C232DB1992A21290E
5EF450E86CCC4BFBD9D91C43CD47C2735AA6FDE68672554A6F3B21A1612C9B09
2A06615A23AB5635D6ABFF6A90882BCB469B6C680714819EBE9CBFB1FF6C93C0
0A5D4DA647D6BF58EEBBC53EE1E295119BFB86553EE1236B3FECE0A530F9E6FE
2B4727750367540044ED27281115E50934CE1378BF3FCE1D00F6A720238A8E7C
2DFA1E8069180EE1056F3E3608361F52279AECD14B8C1639003CC56C957583BF
03445A37757E9C68E649A9F8C21385CD85825B4EFDA081D3C358922D0F8A6056
C7BF485714119DF3023EE2A5E5E11A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (topologyStructure.dvi)
@start /Fa 138[51 35 36 36 48 2[51 76 25 2[25 3[40 2[51
45 11[68 1[51 13[62 69[{}15 90.9091 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 1417 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 1417
a 0 1417 1448 1418 v 1448 1417 a
 currentpoint grestore moveto
 1448 1417 a 709 709
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  0.0 0.0 /y ED /x ED /r 56.90549 def /c
57.2957 r Div def /angleA 0. 0.0 c mul 2 div add def /angleB 360. 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc  gsave 2.0 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -56.90549 0.0  false
NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 3.  3.  scale 1 0 0  setrgbcolor
(b) show grestore gsave 3.  3.  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial 709 709 a
 tx@Dict begin { -56.90549 0.0 } PutCoor PutBegin  end
 709 709 a -147 731
a Fa(Unstable)31 b(Equilibrium)709 709 y
 tx@Dict begin  PutEnd  end
 709 709 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 0.0  false
NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 3.  3.  scale 0 0 1  setrgbcolor
(b) show grestore gsave 3.  3.  scale (C) show grestore } bind def
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat end
 
@endspecial 709 709 a
 tx@Dict begin { 56.90549 0.0 } PutCoor PutBegin  end
 709 709 a 22 x Fa(Stable)f
(Equilibrium)709 709 y
 tx@Dict begin  PutEnd  end
 709 709 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  0.0 0.0 /y ED /x ED /r 71.13185 def /c 57.2957 r Div def /angleA
60. 0.0 c mul 2 div add def /angleB 120. 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA { ArrowA
CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB arc  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray 
/ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0
h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  0.0 0.0 /y ED /x ED /r 71.13185 def /c 57.2957 r Div def /angleA
-120. 0.0 c mul 2 div add def /angleB -60. 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
angleB { ArrowB } r 0 gt { { sub } } { { add } } ifelse ArcArrow dup
angleA gt angleAtoB xor { pop angleA } if arc  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial Black 1205 4603 a(Figure)g(1.6:)p 0 1 0
TeXcolorrgb 1708 4603 a
SDict begin H.S end
 1708 4603 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1708 4603 a
SDict begin H.R end
 1708 4603 a 1708 4603 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.6) cvn /DEST pdfmark end

1708 4603 a Black Ff(The)g(T)-8 b(op)s(ology)33 b(Structure)p
Black Black 404 4977 a(Suc)m(h)42 b(prop)s(erties)g(are)f(top)s
(ological)g(prop)s(ert)m(y)-8 b(.)70 b(As)41 b(long)g(as)h(the)f(top)s
(ology)g(is)h(main-)257 5126 y(tained,)34 b(for)e(di\013eren)m(t)h
(kinds)h(of)e(ship,main)m(taining)j(p)s(osture)e(is)g(easy.)p
Black 1921 6066 a(10)p Black eop end
%%Page: 11 15
TeXDict begin 11 14 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 249 15 a Black Black 257 353
3426 5 v Black 257 685 a Fe(Global)39 b(Motor)e(In)m(v)-6
b(arian)m(t)38 b(and)g(System)g(Adaptation)257 769 y
SDict begin H.S end

257 769 a 257 769 a
SDict begin 17.99446 H.A end
 257 769 a 257 769 a
SDict begin [/View [/XYZ H.V]/Dest (section*.9) cvn /DEST pdfmark end
 257 769 a 130
x Ff(In)g(our)f(motion)h(syn)m(thesis)i(framew)m(ork,)g(the)d(top)s
(ology)g(is)h(called)g(global)f(in)m(v)-5 b(arian)m(t,)39
b(and)257 1048 y(they)34 b(encapsulate)g(the)f(qualitativ)m(e)h(prop)s
(erties)g(of)e(a)g(dynamic)i(system.)404 1197 y(F)-8
b(or)29 b(easy)i(task,)h(no)e(con)m(trol)h(is)g(need.)43
b(F)-8 b(ollo)m(wing)31 b(this)g(idea,)g(to)f(\014nd)g(the)h(easy)g
(motion)257 1347 y(task,)j(w)m(e)f(should)h(in)m(v)m(estigate)g(the)f
(top)s(ology)f(of)g(the)h(phase)h(p)s(ortrait.)404 1496
y(Another)d(imp)s(ortan)m(t)g(idea)g(is)g(motion)g(will)g(adapt)g(when)
h(w)m(e)g(c)m(hange)f(the)h(parameters)257 1646 y(of)g(the)h(dynamic)h
(system.)257 1804 y
SDict begin H.S end
 257 1804 a 257 1804 a
SDict begin 17.99446 H.A end
 257 1804 a
257 1804 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3.2) cvn /DEST pdfmark
end
 257 1804 a 166 x Fc(1.3.2)136 b(The)45 b(Mass-Spring)f
(Vibration)257 2184 y Ff(Human)34 b(can)g(\014nish)g(motion)g(tasks)g
(require)h(high)e(accuracy)-8 b(.)47 b(F)-8 b(or)33 b(dynamic)i(motion)
e(syn-)257 2334 y(thesis,)j(the)f(k)m(ey)h(question)f(facing)f(b)s(oth)
g(the)g(computer)h(graphic)g(researc)m(her)h(and)e(neural)257
2483 y(science)j(researc)m(hers)f(is)f(ho)m(w)g(the)g(neural)g(system)h
(solv)m(es)g(the)f(dynamic)g(problem)g(of)f(mo-)257 2632
y(tion.)51 b(The)36 b(biological)f(motor)g(con)m(trol)g(is)h(v)m(ery)h
(complex;)g(it)f(in)m(v)m(olv)m(es)h(c)m(hemical,)h(neural,)257
2782 y(electrical)e(and)e(mec)m(hanical)i(pro)s(cess.)49
b(The)35 b(question)h(is)f(ho)m(w)f(neural)h(systems)i(solv)m(e)e(the)
257 2931 y(complex)40 b(dynamic)g(problem)g(instan)m(tly)g(with)f(high)
g(accuracy)-8 b(.)62 b(An)39 b(alternativ)m(e)h(idea)f(is)257
3081 y(w)m(e)i(dont)f(\014nd)g(the)g(solution)g(b)m(y)g(solving)h(the)f
(dynamics;)45 b(w)m(e)40 b(only)g(need)h(to)e(kno)m(w)i(ho)m(w)257
3230 y(to)36 b(transform)f(one)h(solution)g(in)m(to)g(another.)52
b(This)37 b(idea)e(is)h(illustrativ)m(e)i(in)d(the)h(follo)m(wing)257
3379 y(mass)e(spring)f(example)257 3668 y Fe(Dynamics)257
3752 y
SDict begin H.S end
 257 3752 a 257 3752 a
SDict begin 17.99446 H.A end
 257 3752 a 257 3752 a
SDict begin [/View [/XYZ H.V]/Dest (section*.10) cvn /DEST pdfmark
end
 257
3752 a 130 x Ff(Although)23 b(simple,)j(this)e(system)g(in)f(\014gure)g
(7)f(captures)i(some)g(of)e(the)h(imp)s(ortan)m(t)g(prop)s(erties)257
4031 y(of)37 b(motor)g(con)m(trol)g(system.)59 b(The)38
b(biological)f(motor)f(actuation)h(or)g(m)m(uscle)i(w)m(orks)f(more)257
4181 y(lik)m(e)25 b(spring)f(rather)f(than)g(the)h(arti\014cial)f
(electrical)i(motor.)40 b(Neural)23 b(con)m(trol)h(adjusts)g(spring)257
4330 y(rather)33 b(applying)g(force)g(direct)g(at)g(the)g(mass)g
(\(whic)m(h)h(mo)s(del)f(the)g(sk)m(eleton\).)404 4479
y(The)g(canonical)g(equation)h(of)e(mass)h(spring)h(system)g(is)f
(equation)g(\(2\))g(\(2\))404 4629 y(In)26 b(a)f(similar)h(manner,)i(w)
m(e)e(can)g(dra)m(w)g(the)g(state)g(of)f(mass)i(spring)f(system)h(on)f
(the)g(phase)257 4778 y(plot,)33 b(as)g(sho)m(w)g(in)g(\014gure)g(8)404
4928 y(Figure)f(8)p Black 1921 6066 a(11)p Black eop
end
%%Page: 12 16
TeXDict begin 12 15 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 455 15 a Black Black 257 353
3426 5 v Black Black Black Black 771 2539 a @beginspecial
0 @llx -1 @lly 426 @urx 323 @ury 2877 @rwi @setspecial
%%BeginDocument: Introduction/IntroductionFigs/EPS/MassSpring.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.10.0 (http://cairographics.org)
%%CreationDate: Fri May 20 17:30:58 2011
%%Pages: 1
%%BoundingBox: 0 -1 426 323
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%EndComments
%%BeginProlog
/cairo_eps_state save def
/dict_count countdictstack def
/op_count count 1 sub def
userdict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
%%EndProlog
11 dict begin
/FontType 42 def
/FontName /DejaVuSans def
/PaintType 0 def
/FontMatrix [ 1 0 0 1 0 0 ] def
/FontBBox [ 0 0 0 0 ] def
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding 1 /uni0058 put
/CharStrings 2 dict dup begin
/.notdef 0 def
/uni0058 1 def
end readonly def
/sfnts [
<00010000000a008000030020636d61700015f07e00000194000000426376742000691d390000
01d8000001fe6670676d7134766a000003d8000000ab676c7966e72b925b000000ac000000e8
68656164f4cd10b10000048400000036686865610cb80653000004bc00000024686d74780a48
00a3000004e0000000086c6f63610000012c000004e80000000c6d617870046f0671000004f4
00000020707265703b07f100000005140000056800020066fe96046605a400030007001a400c
04fb0006fb0108057f0204002fc4d4ec310010d4ecd4ec301311211125211121660400fc7303
1bfce5fe96070ef8f27206290001003d0000053b05d5000b006640060d0406000a0c10d4c4dc
c4c431b480007f0a025d0040050300af09062f3cec32304bb04250584014071106060509110a
0b0a03110405040111000b00050710ec0710ec0710ec0710ec40140b0a030700080904070005
09040601020a0306010f0f0f0f5913330901330901230901230181d901730175d9fe200200d9
fe5cfe59da021505d5fdd5022bfd33fcf8027bfd85031d000000000200030000000000140001
0000000000340004002000000004000400010000f001ffff0000f000ffff1000000100000000
0006000e000000000002000000010000013500b800cb00cb00c100aa009c01a600b800660000
007100cb00a002b20085007500b800c301cb0189022d00cb00a600f000d300aa008700cb03aa
0400014a003300cb000000d9050200f4015400b4009c01390114013907060400044e04b40452
04b804e704cd0037047304cd04600473013303a2055605a60556053903c5021200c9001f00b8
01df007300ba03e9033303bc0444040e00df03cd03aa00e503aa0404000000cb008f00a4007b
00b80014016f007f027b0252008f00c705cd009a009a006f00cb00cd019e01d300f000ba0183
00d5009803040248009e01d500c100cb00f600830354027f00000333026600d300c700a400cd
008f009a0073040005d5010a00fe022b00a400b4009c00000062009c0000001d032d05d505d5
05d505f0007f007b005400a406b80614072301d300b800cb00a601c301ec069300a000d3035c
037103db0185042304a80448008f0139011401390360008f05d5019a06140723066601790460
04600460047b009c00000277046001aa00e904600762007b00c5007f027b000000b4025205cd
006600bc00660077061000cd013b01850389008f007b0000001d00cd074a042f009c009c0000
077d006f0000006f0335006a006f007b00ae00b2002d0396008f027b00f600830354063705f6
008f009c04e10266008f018d02f600cd03440029006604ee00730000140000960000b7070605
04030201002c2010b002254964b040515820c859212d2cb002254964b040515820c859212d2c
20100720b00050b00d7920b8ffff5058041b0559b0051cb0032508b0042523e120b00050b00d
7920b8ffff5058041b0559b0051cb0032508e12d2c4b505820b0fd454459212d2cb002254560
442d2c4b5358b00225b0022545445921212d2c45442d2cb00225b0022549b00525b005254960
b0206368208a108a233a8a10653a2d000001000000024f5c511cfff05f0f3cf5001f08000000
0000c8293b2a00000000c8293b2af7d6fcae0d72095500000008000000010000000000010000
076dfe1d00000de2f7d6fa510d7200010000000000000000000000000000000204cd0066057b
003d0000000000000044000000e80001000000020354002b0068000c00020010009900080000
0415021600080004b8028040fffbfe03fa1403f92503f83203f79603f60e03f5fe03f4fe03f3
2503f20e03f19603f02503ef8a4105effe03ee9603ed9603ecfa03ebfa03eafe03e93a03e842
03e7fe03e63203e5e45305e59603e48a4105e45303e3e22f05e3fa03e22f03e1fe03e0fe03df
3203de1403dd9603dcfe03db1203da7d03d9bb03d8fe03d68a4105d67d03d5d44705d57d03d4
4703d3d21b05d3fe03d21b03d1fe03d0fe03cffe03cefe03cd9603cccb1e05ccfe03cb1e03ca
3203c9fe03c6851105c61c03c51603c4fe03c3fe03c2fe03c1fe03c0fe03bffe03befe03bdfe
03bcfe03bbfe03ba1103b9862505b9fe03b8b7bb05b8fe03b7b65d05b7bb03b78004b6b52505
b65d40ff03b64004b52503b4fe03b39603b2fe03b1fe03b0fe03affe03ae6403ad0e03acab25
05ac6403abaa1205ab2503aa1203a98a4105a9fa03a8fe03a7fe03a6fe03a51203a4fe03a3a2
0e05a33203a20e03a16403a08a4105a096039ffe039e9d0c059efe039d0c039c9b19059c6403
9b9a10059b19039a1003990a0398fe0397960d0597fe03960d03958a410595960394930e0594
2803930e0392fa039190bb0591fe03908f5d0590bb039080048f8e25058f5d038f40048e2503
8dfe038c8b2e058cfe038b2e038a8625058a410389880b05891403880b038786250587640386
85110586250385110384fe038382110583fe0382110381fe0380fe037ffe0340ff7e7d7d057e
fe037d7d037c64037b5415057b25037afe0379fe03780e03770c03760a0375fe0374fa0373fa
0372fa0371fa0370fe036ffe036efe036c21036bfe036a1142056a530369fe03687d03671142
0566fe0365fe0364fe0363fe0362fe03613a0360fa035e0c035dfe035bfe035afe0359580a05
59fa03580a035716190557320356fe035554150555420354150353011005531803521403514a
130551fe03500b034ffe034e4d10054efe034d10034cfe034b4a13054bfe034a4910054a1303
491d0d05491003480d0347fe0346960345960344fe0343022d0543fa0342bb03414b0340fe03
3ffe033e3d12053e14033d3c0f053d12033c3b0d053c40ff0f033b0d033afe0339fe03383714
0538fa033736100537140336350b05361003350b03341e03330d0332310b0532fe03310b0330
2f0b05300d032f0b032e2d09052e10032d09032c32032b2a25052b64032a2912052a25032912
032827250528410327250326250b05260f03250b0324fe0323fe03220f032101100521120320
64031ffa031e1d0d051e64031d0d031c1142051cfe031bfa031a42031911420519fe03186403
1716190517fe031601100516190315fe0314fe0313fe031211420512fe0311022d0511420310
7d030f64030efe030d0c16050dfe030c0110050c16030bfe030a100309fe0308022d0508fe03
0714030664030401100504fe03401503022d0503fe0302011005022d0301100300fe0301b801
64858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d00>
] def
/f-0-0 currentdict end definefont pop
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 -1 426 323
%%EndPageSetup
q 0 -1 426 324 rectclip q
0 322.9 426 -323 re W n
0 0 1 rg
66 322.502 320 -120 re f*
0 g
0.8 w
0 J
0 j
[] 0.0 d
4 M q 1 0 0 -1 0 322.899994 cm
66 0.398 320 120 re S Q
5 w
q 1 0 0 -1 0 322.899994 cm
186 120.398 m 266 160.398 l 186 200.398 l 266 240.398 l 186 280.398 l 
266 320.398 l S Q
q 1 0 0 -1 0 322.899994 cm
106 320.398 m 426 320.398 l S Q
0.8 w
q 1 0 0 -1 0 322.899994 cm
2 280.398 m 2 80.398 l S Q
2 239.298 m 3.602 237.701 l 2 243.298 l 0.398 237.701 l h
2 239.298 m f*
0.4 w
q 0.000000000000000061 -1 -1 -0.000000000000000061 0 322.899994 cm
83.602 -2 m 85.199 -3.602 l 79.602 -2 l 85.199 -0.398 l h
83.602 -2 m S Q
BT
90.605852 0 0 72.760115 12.825845 116.038831 Tm
/f-0-0 1 Tf
<01>Tj
ET
Q Q
showpage
%%Trailer
count op_count sub {pop} repeat
countdictstack dict_count sub {end} repeat
cairo_eps_state restore
%%EOF

%%EndDocument
 @endspecial Black 1457 2742 a Ff(Figure)32 b(1.7:)p
0 1 0 TeXcolorrgb 1959 2742 a
SDict begin H.S end
 1959 2742 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1959 2742 a
SDict begin H.R end
 1959 2742 a 1959 2742 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.7) cvn /DEST pdfmark end

1959 2742 a Black Ff(Mass)i(Spring)p Black Black Black
Black Black 1114 5047 a @beginspecial 0 @llx -1 @lly
466 @urx 498 @ury 2055 @rwi @setspecial
%%BeginDocument: MassSpringPhasePlot.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.10.2 (http://cairographics.org)
%%CreationDate: Wed May 18 10:26:07 2011
%%Pages: 1
%%BoundingBox: 0 -1 466 498
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%EndComments
%%BeginProlog
/cairo_eps_state save def
/dict_count countdictstack def
/op_count count 1 sub def
userdict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
%%EndProlog
11 dict begin
/FontType 42 def
/FontName /ArialMT def
/PaintType 0 def
/FontMatrix [ 1 0 0 1 0 0 ] def
/FontBBox [ 0 0 0 0 ] def
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding 1 /uni0071 put
/CharStrings 2 dict dup begin
/.notdef 0 def
/uni0071 1 def
end readonly def
/sfnts [
<00010000000a008000030020636d61700015f07e000002700000004263767420962ad2760000
02b4000006306670676dcc79599a000008e40000066e676c79663dba7ece000000ac000001c4
68656164ce98269200000f54000000366868656112330c7700000f8c00000024686d74780a73
014800000fb0000000086c6f6361000001f000000fb80000000c6d61787004bf0ca800000fc4
000000207072657052fec4e900000fe400000aff000201000000050005000003000700002111
21112521112101000400fc2003c0fc400500fb002004c000000000020048fe6903e0043e0010
001c0136408e0b022b022a183b024b02790c063f153f194b19901ea01e053413341b3f1e4413
441b5313531b6313631b601e801ed406d512e606e90cea18102902220c2b153902350c490246
0c5a026902d90cdb18e316e919e61bfc020f01040d141a1c0b070e06141c040b000e170e3300
251010d00f01100f400f600f800f041e400b0c02551e400d0d02550f12101002550fb8fff440
110f0f02550f060e0e02550f160d0d02550fb8fffe400b0c0c02550f16101006550fb8ffe8b4
0c0c06550fb8fff4403f0d0d06550f741124bf07cf07df07ff07041f073f074f070307240b0b
0255071a0c0c025507220d0d025507160c0c0655071a0d0d065507191d1e74213450182b2b4e
f42b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10fdf43c003f3fed3f3fed113912
393130005d015d71007101110606232200113436363332173533110114163332363534262322
06032c2a9755bdfeef6fd37ec571a2fd21ac7873a6af7675a3fe6902083b4e012e0107a0fe83
a68efa4303adcdcdc3c7d4d6c700000000000002000300000000001400010000000000340004
002000000004000400010000f001ffff0000f000ffff10000001000000000006000e00000000
000200000001000005ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c800890052005200050044
00940119ffb4002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d30087
0085000d002200410050006f008d014cff75005c00df04830037004c006e00700180ff58ff8e
ff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c0095009900df
019209b500400057008000b9039d0072009a035d0401ff67fffa00030021007700cd0004004d
00cd01c0022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba
013501470221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da010c05f0
ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f000000050018002900390049006f
00be00c700d0012301c1026f050c05320540057affd4001400310055005700a700b400e601f7
027e027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f01560229026f
029e03720008002c00310031006400690089009800c700de012b01b6020c02cf03a304ab04fb
061dfee0ff0e00060026009b009d00c1010d011801200173018201d601e30243025f029b02e2
039404a904d20761001c005e006d008d00ab00f7011201380151015b0168017c018701910199
01cd01d001e802410254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d001d001e201e901f2
01f501fb020002000206021b0221022202220223027202770294029c02cf02cf02d002ec02f9
03170322032b0335033c0359036f037103870390039003b503e1041a04cf04ff053205320596
059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe10015
0019001a001c001f003c005100610061006a0078009600a500af00d3010c0118011a012a013e
014c0151015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef0200020d
021c02210222022e02350242024f024f025e026502710290029202b402d602fa0307030b030f
0315032a0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a041f0422
0426042b0447045f0475049e04e704e7055c05cb05e5060a066d068606b806f10736073e0750
0751075d078f07b607d4086000b600c300b500b700000000000000000000000001e003810345
03b5008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b402240578063b
023b014e00f00426029402c6029f02f6023b034d014b0153006a0231000000000000061404aa
0000003c04c300ed04bc026502ce03b50078060c017e02ef060c00b201000239000001c50330
042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6029e0329056e062a
061501c90269048a021301b4000204a9000002390124010305140084015d039a06ef02d90075
00cf040a00de03ac04bc02cf02ae034d04f005520168006d007d00860071ff810079055804d2
016700030156002504e00094007c033204210094007f0072005c002f00b6001800ba00b80041
034d00720018001f004c016a01550099009a009a009800b200040078006900140057006e00ce
00b4065402b80067050e016500e7000004cbfe52005affa60099ff67006eff92002dffd40087
ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d028a02d9
0253029600b700000000000000000000000000000125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5004803c00033fe4e
02b1ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b40435554
41403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b
1a191817161514131211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b0206120b04660b0042623
48482d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051
582320b00d44235921212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b0
177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a4518
6920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545b01923
4445b01a23444565234520b00325606a20b009234223688a6a606120b01a8ab000527921b21a
1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b31940201945208a5458
2321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2c
b10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121
592d2c0120b003252349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2cb4000100000015b00826b00826b00826b008260f10161345683ab001162d2cb40001
00000015b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012435c5a5838
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158b00425b004250120
46b01060482046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d2c
4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515a
b012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121
592d2c4b5258b00425b0042549b00425b00425496120b0005458212043b0005558b00325b003
25b8ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043b0005458b003
25b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b00161b8ffba8b1bb0
468c59b0106068013a2d2cb1020042b123018851b1400188535a58b910000020885458b20201
0243604259b12401885158b920000040885458b2020202436042b12401885458b20220024360
42004b014b5258b2020802436042591bb940000080885458b202040243604259b94000008063
b80100885458b202080243604259b94000010063b80200885458b202100243604259b9400002
0063b80400885458b202400243604259595959592d2cb0024354584b53234b515a58381b2121
591b21212121592d00000001000000030000d281af085f0f3cf5081b080000000000a2e3272a
00000000b9d5b4f6faaffd671000080c00000009000100010000000000010000073efe4e0043
1000faaffe261000000100000000000000000000000000000002060001000473004800000000
0000002c000001c40001000000020100003f0076000700020010002f00560000040d0aff0003
0002b1540f4122031700ef031700ff03170003001f0317002f0317004f0317005f0317008f03
17009f03170006000f0317005f0317006f0317007f031700bf031700f00317000600400317b2
923340b80317b28b3340b80317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357
593240b80317b34d513240b80317b344493240b80317b23a3340b80317b331343240b80317b3
2e423240b80317b3272c3240b80317b312253280b80317b30a0d32c04116031600d003160002
00700316000102c4000f0101001f00a0031500b0031500020306000f0101001f00400312b324
26329fbf03040001030203010064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed
0064001fffc002edb30e11329f414a02e200af02e200bf02e2000302e202e202e102e1007f02
e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df02
de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd02dd00
1002dc0001000002dc0001001002dc003f02dc000202dc02dc001002db000102db02db000f02
da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3
b2171b32b9ffc002d3b2121632b802d2b2f9291fb802e3b3202b1fa0413002d400b002d40002
000002d4001002d4002002d4005002d4006002d4007002d40006006002d6007002d6008002d6
009002d600a002d600b002d60006000002d6001002d6002002ca002002cc002002d6003002d6
004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c800
17001f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f00410b02
c6000002c7001002c6001002c7002f02c5000502c1b324121fff411102bf0001001f02bf002f
02bf003f02bf004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca0800001f
02b200e90800001f02a600a20800406a1f4026434932402043493240263a3d3240203a3d329f
209f26024026969932402096993240268e923240208e92324026848c324020848c3240267a81
3240207a813240266c763240206c76324026646a324020646a3240265a5f3240205a5f324026
4f543240204f5432b8029eb724271f374f6b0120410f02770030027700400277005002770004
02770277027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180a201
806501807e01808101803c01805e01802b01801c01801e0180400180bb0138000100800140b4
0180400180bb013800010080013940180180ca0180ad01807301802601802501802401802001
3740b80221b2493340b80221b2453340b80221b341423240b80221b33d3e320f410f0221003f
0221007f0221000300bf022100cf022100ff0221000300400221b320223240b80221b3191e32
40b80222b32a3f3240b80221b32e3a326f414802c3007f02c3008f02c300df02c30004002f02
c3006002c300cf02c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c3000600
df02220001008f02220001000f0222002f0222003f0222005f0222007f022200ef0222000600
bf022100ef02210002006f0221007f022100af02210003002f0221003f0221004f0221000302
c302c30222022202210221401d101c102b1048038f1c010f1e014f1eff1e0237001616000000
12110811b8010db6f70df8f70d00094109028e028f001d001f0290028f001d001f028fb2f91d
1fb80198b226bb1f41150197001e0401001f013900260125001f013800730401001f0135001c
0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e0401b61ff91ce41f
e91cb80201b61fe81cbb1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26
b80101b21fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d
1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c621f40
73b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c56
1f291cb80101b21f231eb80401b21f5537b80168402c07960758074f07360732072c0721071f
071d071b071408120810080e080c080a080808060804080208000814b8ffe0402b0000010014
0610000001000604000001000410000001001002000001000200000001000002010802004a00
b013034b024b5342014bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b5442
b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb101
018e851bb0124358b900010111858d1bb900010128858d5959001816763f183f123e11394644
3e113946443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b
182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb0935320
5c58b901f201f04544b901f101f045445958b9033e01f2455258b901f2033e4459594bb80156
53205c58b9002001f14544b9002601f145445958b9081e0020455258b90020081e4459594bb8
019a53205c58b9002501f24544b9002401f245445958b909090025455258b900250909445959
4bb8040153205c58b173244544b1242445445958b917200073455258b9007317204459594bb8
040153205c58b1ca254544b1252545445958b9168000ca455258b900ca16804459594bb03e53
205c58b11c1c4544b11e1c45445958b9011a001c455258b9001c011a4459594bb05653205c58
b11c1c4544b12f1c45445958b90189001c455258b9001c01894459594bb8030153205c58b11c
1c4544b11c1c45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b5963
5c456523456023456560234560b08b766818b080622020b163594565234520b0032660626368
20b003266165b059236544b063234420b13b5c4565234520b003266062636820b003266165b0
5c236544b03b2344b1005c455458b15c406544b23b403b4523614459b3475034374565234560
23456560234560b089766818b080622020b134504565234520b003266062636820b003266165
b050236544b034234420b147374565234520b003266062636820b003266165b037236544b047
2344b10037455458b137406544b24740474523614459004b5342014b5058b108004259435c58
b108004259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba040001a8000b
2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0
124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b74757375001845694445
69444569447373737374757374752b2b2b2b74752b2b2b2b2b73737373737373737373737373
7373737373737373737373732b2b2b45b0406144737400004bb02a534bb03f515a58b1070745
b040604459004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b1
030345b040604459004bb02e534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b01e4b
5402b0124b545ab012435c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b
2b737373732b002b2b2b2b2b2b00456944734569447345694473747545694473456944456944
4569447374456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b
2b7374752b0000>
] def
/f-0-0 currentdict end definefont pop
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 -1 466 498
%%EndPageSetup
q 0 -1 466 499 rectclip q
0 497.218 466 -498 re W n
1 0 0 rg
3 w
0 J
0 j
[] 0.0 d
4 M q 1 0 0 -1 0 497.21814 cm
376 239.316 m 376 318.848 311.527 383.316 232 383.316 c 152.473 383.316 
88 318.848 88 239.316 c 88 159.789 152.473 95.316 232 95.316 c 311.527 
95.316 376 159.789 376 239.316 c h
376 239.316 m S Q
0 1 0 rg
3 w
q 1 0 0 -1 0 497.21814 cm
432 239.316 m 432 349.773 342.457 439.316 232 439.316 c 121.543 439.316 
32 349.773 32 239.316 c 32 128.859 121.543 39.316 232 39.316 c 342.457 
39.316 432 128.859 432 239.316 c h
432 239.316 m S Q
0 g
0.8 w
[ 1.6 0.8] 0 d
q 1 0 0 -1 0 497.21814 cm
224 1.207 m 224 497.207 l S Q
222.063 491.824 m 223.992 497.07 l 225.922 491.824 l 224.781 492.663 
223.223 492.66 222.063 491.824 c h
222.063 491.824 m f*
[ 9.6 0.8] 0 d
q 1 0 0 -1 0 497.21814 cm
0 241.207 m 464 241.207 l S Q
459.816 257.945 m 465.059 256.019 l 459.816 254.089 l 460.652 255.23 
460.648 256.785 459.816 257.945 c h
459.816 257.945 m f*
336 440.011 m 336 435.593 332.418 432.011 328 432.011 c 323.582 432.011 
320 435.593 320 440.011 c 320 444.429 323.582 448.011 328 448.011 c 
332.418 448.011 336 444.429 336 440.011 c h
336 440.011 m f
0 1 0 rg
[ 1.6 0.8] 0 d
q 1 0 0 -1 0 497.21814 cm
336 57.207 m 336 61.625 332.418 65.207 328 65.207 c 323.582 65.207 320 
61.625 320 57.207 c 320 52.789 323.582 49.207 328 49.207 c 332.418 
49.207 336 52.789 336 57.207 c h
336 57.207 m S Q
0 g
BT
32 0 0 32 352 432.010246 Tm
/f-0-0 1 Tf
<01>Tj
ET
Q Q
showpage
%%Trailer
count op_count sub {pop} repeat
countdictstack dict_count sub {end} repeat
cairo_eps_state restore
%%EOF

%%EndDocument
 @endspecial Black 1208 5251 a(Figure)f(1.8:)p 0 1 0
TeXcolorrgb 1711 5251 a
SDict begin H.S end
 1711 5251 a 0 1 0 TeXcolorrgb
0 1 0 TeXcolorrgb 1711 5251 a
SDict begin H.R end
 1711 5251 a 1711 5251 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1.8) cvn /DEST pdfmark end

1711 5251 a Black Ff(Mass)h(Spring)f(Phase)g(Plot)p Black
Black Black 1921 6066 a(12)p Black eop end
%%Page: 13 17
TeXDict begin 13 16 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 249 15 a Black Black 257 353
3426 5 v Black 257 685 a Fe(Symmetry)39 b(and)f(T)-9
b(ransformation)257 769 y
SDict begin H.S end
 257 769 a 257 769 a
SDict begin 17.99446 H.A end
 257 769
a 257 769 a
SDict begin [/View [/XYZ H.V]/Dest (section*.11) cvn /DEST pdfmark
end
 257 769 a 130 x Ff(Ev)m(en)28 b(it)e(is)h(simple,)h(it)e
(is)h(highly)g(unlik)m(ely)h(the)e(kno)m(wledge)i(of)e(the)g(mass)h
(spring)g(is)f(enco)s(ded)257 1048 y(in)i(our)f(brain)h(in)f(the)h
(form)f(of)g(equation)h(\(2\).)41 b(V)-8 b(ery)28 b(p)s(ossible)h(w)m
(e)f(kno)m(w)h(a)e(p)s(ossible)h(motion)257 1197 y(lik)m(e)g(the)e(red)
h(one.)42 b(Giv)m(en)27 b(a)f(state)g(q,)i(w)m(e)g(can)e(easily)i(w)m
(ork)f(out)f(the)g(motion)h(curv)m(e,)i(it)d(is)h(on)257
1347 y(the)33 b(green)h(circle)f(that)g(shares)h(the)f(cen)m(tre)h
(with)f(the)g(red)g(one,)g(but)g(has)g(a)f(bigger)h(radius.)257
1496 y(W)-8 b(e)35 b(can)f(sa)m(y)g(the)h(green)f(curv)m(e)h(is)g(a)e
(scale)i(transformed)f(red)h(curv)m(e.)48 b(The)35 b(prop)s(ert)m(y)g
(that)257 1646 y(w)m(e)f(can)f(transform)f(one)h(motion)g(in)m(to)g
(another)f(is)h(called)h(symmetry.)404 1795 y(Using)27
b(transformation,)i(the)e(new)h(motion)f(can)h(b)s(e)f(calculated)h
(easily)-8 b(.)43 b(In)27 b(fact)g(w)m(e)h(can)257 1944
y(ignore)33 b(the)h(complexit)m(y)h(of)e(the)g(dynamic)h(system,)i(as)d
(long)g(as)g(w)m(e)h(kno)m(w)g(the)f(symmetry)257 2094
y(prop)s(ert)m(y)25 b(of)f(a)g(dynamic)h(system.)43 b(Giv)m(en)25
b(one)f(motion,)i(w)m(e)f(can)g(w)m(ork)g(out)f(all)g(the)g(p)s
(ossible)257 2243 y(motions.)257 2532 y Fe(Dynamic)39
b(Enco)s(ding)257 2616 y
SDict begin H.S end
 257 2616 a 257 2616 a
SDict begin 17.99446 H.A end
 257 2616
a 257 2616 a
SDict begin [/View [/XYZ H.V]/Dest (section*.12) cvn /DEST pdfmark
end
 257 2616 a 130 x Ff(The)k(dynamic)h(system)g(can)e(b)s(e)g
(enco)s(ded)h(in)f(a)g(di\013eren)m(t)h(manner,)i(A)d(p)s(ossible)i(w)m
(a)m(y)f(is)257 2895 y(store)31 b(a)e(motion)h(curv)m(e)h(and)f(its)g
(symmetrical)i(prop)s(ert)m(y)-8 b(.)43 b(Impact)31 b(of)e(this)h(idea)
h(for)e(motor)257 3044 y(con)m(trol)34 b(is)f(far)f(reac)m(hing.)46
b(First,)33 b(it)g(greatly)g(reduces)i(the)e(computational)g(cost)h(in)
f(motor)257 3194 y(con)m(trol.)56 b(It)37 b(also)f(pro)m(vides)j(us)e
(with)g(an)g(idea)f(of)h(motion)f(p)s(erception.)57 b(In)36
b(fact)h(w)m(e)g(dont)257 3343 y(calculate)g(the)f(details)g(dynamic)h
(of)e(motion;)i(w)m(e)f(can)g(c)m(hec)m(k)i(the)e(symmetry.)54
b(If)36 b(w)m(e)g(can)257 3493 y(transformed)g(the)f(observ)m(ed)i
(motion\(green\))e(in)m(to)g(our)g(memorized)i(one)e(\(red\),)h(than)e
(w)m(e)257 3642 y(think)g(the)f(motion)f(are)h(realistic,)h(otherwise)g
(w)m(e)f(detect)h(artefacts.)257 3931 y Fe(Lo)s(cal)39
b(Motor)e(In)m(v)-6 b(arian)m(t)38 b(and)g(T)-9 b(ransform)38
b(Adaption)257 4015 y
SDict begin H.S end
 257 4015 a 257 4015 a
SDict begin 17.99446 H.A end
 257 4015
a 257 4015 a
SDict begin [/View [/XYZ H.V]/Dest (section*.13) cvn /DEST pdfmark
end
 257 4015 a 130 x Ff(When)48 b(comparing)f(the)g(observ)m
(ed)i(motion)e(and)f(the)i(memorized)g(motion,)i(there)e(is)f(a)257
4294 y(b)s(etter)32 b(metho)s(d)g(than)f(w)m(ork)h(out)f(the)h
(transformation)f(directly)-8 b(.)45 b(Some)32 b(prop)s(ert)m(y)g
(should)257 4443 y(b)s(e)g(k)m(ept)h(in)m(v)-5 b(arian)m(t)32
b(under)g(suc)m(h)h(transformation,)f(for)f(the)h(mass)h(spring)f
(system,)i(w)m(e)e(can)257 4593 y(sa)m(y)40 b(the)f(shap)s(e)g(is)g(k)m
(ept)g(during)g(scale)g(transformation.)61 b(F)-8 b(rom)38
b(Di\013eren)m(tial)h(Geometry)257 4742 y(view)e(p)s(ort,)e(w)m(e)i
(can)e(sa)m(y)h(the)g(curv)-5 b(ature)36 b(is)f(k)m(ept.)53
b(F)-8 b(rom)35 b(mec)m(hanical)i(view,)g(w)m(e)f(can)g(sa)m(y)257
4892 y(for)k(eac)m(h)h(motion,)h(the)e(energy)h(is)g(k)m(ept)g(along)e
(the)i(curv)m(e,)i(and)d(di\013eren)m(t)h(motion)f(is)h(of)257
5041 y(di\013eren)m(t)34 b(energy)-8 b(.)404 5190 y(Energy)44
b(and)g(Curv)-5 b(ature)44 b(are)f(called)h(Lo)s(cal)f(In)m(v)-5
b(arian)m(t.)77 b(And)44 b(the)g(transformation)257 5340
y(from)33 b(one)g(motion)f(to)g(another)h(motion)g(is)g(called)g
(transform)g(adaptation.)p Black 1921 6066 a(13)p Black
eop end
%%Page: 14 18
TeXDict begin 14 17 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 455 15 a Black Black 257 353
3426 5 v Black 257 585 a
SDict begin H.S end
 257 585 a 257 585 a
SDict begin 17.99446 H.A end
 257 585
a 257 585 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.4) cvn /DEST pdfmark
end
 257 585 a 100 x Fg(1.4)161 b(Ov)l(erview)52
b(of)i(the)f(Thesis)257 933 y Ff(Global)46 b(Motor)g(In)m(v)-5
b(arian)m(t)47 b(con)m(tains)g(the)f(qualitativ)m(e)i(prop)s(erties)f
(while)g(Lo)s(cal)f(Motor)257 1082 y(In)m(v)-5 b(arian)m(t)34
b(con)m(tains)f(quan)m(titativ)m(e)i(prop)s(erties.)404
1232 y(F)-8 b(or)44 b(our)i(motion)f(syn)m(thesis)k(metho)s(d,)g(the)d
(design)h(idea)e(is)h(k)m(eep)i(the)e(b)s(oth)f(motor)257
1381 y(in)m(v)-5 b(arian)m(ts.)68 b(Motion)40 b(Adaptation)g(is)h(ac)m
(hiev)m(ed)i(b)m(y)e(c)m(hanging)g(the)f(system)j(parameters)257
1531 y(and)33 b(c)m(hanging)g(the)g(transformation.)404
1680 y(In)c(application,)h(this)f(metho)s(d)g(easy)h(to)e(compute)h
(and)g(result)h(realistic)f(motion)g(adap-)257 1829 y(tation.)404
1979 y(This)k(thesis)h(is)g(organized)f(as)f(follo)m(ws.)404
2128 y(In)37 b(Chapter)g(2,)g(w)m(e)h(will)f(discuss)i(some)e(bac)m
(kground)h(of)e(motion)g(syn)m(thesis)k(researc)m(h)257
2277 y(and)31 b(biological)f(motor)f(con)m(trol)i(researc)m(h.)44
b(These)32 b(are)e(the)h(motiv)-5 b(ation)30 b(and)g(justi\014cation)
257 2427 y(of)i(our)h(ideas.)404 2576 y(In)k(Chapter)g(3,)g(w)m(e)h
(will)f(fo)s(cus)g(on)f(the)h(Global)f(Motor)g(In)m(v)-5
b(arian)m(t.)56 b(W)-8 b(e)37 b(try)g(to)f(iden-)257
2726 y(tify)c(the)g(qualitativ)m(e)h(prop)s(erties)f(of)f(motion)g(and)
h(in)m(v)m(estigate)h(metho)s(d)f(main)m(taining)g(the)257
2875 y(global)h(motor)f(in)m(v)-5 b(arian)m(t)33 b(based)h(on)e(some)h
(biological)g(ideas.)404 3024 y(In)c(Chapter)h(4,)f(w)m(e)h(discuss)h
(on)e(the)h(idea)f(of)g(Lo)s(cal)f(Motor)h(In)m(v)-5
b(arian)m(t)30 b(and)f(Symmetry)-8 b(.)257 3174 y(Mathematical)43
b(to)s(ols)f(are)h(dev)m(elop)s(ed)h(and)e(w)m(e)h(sho)m(w)h(ho)m(w)f
(to)e(apply)i(con)m(trol)g(e\013ort)f(to)257 3323 y(ensure)36
b(symmetry)-8 b(.)52 b(W)-8 b(e)35 b(sho)m(w)h(the)f(computational)g
(complexit)m(y)i(is)e(greatly)g(reduced)i(b)m(y)257 3473
y(symmetry)-8 b(.)404 3622 y(In)42 b(c)m(hapter)h(5,)h(w)m(e)e(discuss)
i(ho)m(w)f(the)f(Global)f(Motor)h(In)m(v)-5 b(arian)m(t)42
b(and)g(Lo)s(cal)g(Motor)257 3771 y(In)m(v)-5 b(arian)m(t)43
b(Con)m(troller)g(w)m(ork)f(together.)72 b(Simple)43
b(example)h(is)e(included)h(to)f(discuss)i(the)257 3921
y(mathematical)29 b(idea.)43 b(Also)28 b(w)m(e)i(giv)m(e)f(an)f(idea)g
(ab)s(out)g(ho)m(w)h(to)f(connect)h(motion)f(primitiv)m(es)257
4070 y(together)33 b(to)f(form)h(more)g(complex)h(motion)e(b)s(eha)m
(viour.)404 4220 y(Chapter)c(3,)g(4,)g(5)f(la)m(y)h(the)g(theory)g
(foundation)f(for)g(the)g(motion)h(syn)m(thesis)i(con)m(trol)d(and)257
4369 y(b)s(e)33 b(treated)g(as)g(the)g(Motion)g(In)m(v)-5
b(arian)m(t)33 b(Theory)-8 b(.)404 4518 y(In)39 b(Chapter)g(6,)h(w)m(e)
g(fo)s(cus)e(on)h(syn)m(thesizing)i(motion)e(of)f(one)h(motion)g
(primitiv)m(es)h(w)m(e)257 4668 y(apply)25 b(our)e(metho)s(d)i(for)e
(one)h(of)f(the)h(most)h(in)m(teresting)g(and)f(c)m(hallenging)h
(motion)f(syn)m(thesis)257 4817 y(researc)m(h)30 b(topic,)f(bip)s(edal)
f(w)m(alking.)43 b(W)-8 b(e)29 b(sho)m(w)g(ho)m(w)f(our)g(metho)s(d)g
(main)g(the)g(stabilit)m(y)h(and)257 4967 y(adaptiv)m(e)34
b(to)e(di\013eren)m(t)i(w)m(alking)g(situation.)404 5116
y(In)i(Chapter)h(7,)g(w)m(e)g(will)f(discuss)i(ho)m(w)f(to)f
(connecting)h(motion)f(primitiv)m(es)i(together.)257
5265 y(New)26 b(Motion)f(Primitiv)m(es)i(\(the)e(balancing\))g(is)g
(dev)m(elop)s(ed.)43 b(W)-8 b(e)25 b(sho)m(w)h(ho)m(w)f(w)m(e)h(an)e
(appro)m(x-)257 5415 y(imate)32 b(with)f(discrete)i(motion)e(with)g(p)s
(erio)s(dic)h(motion.)42 b(W)-8 b(e)32 b(sho)m(w)g(ho)m(w)f(di\013eren)
m(t)h(motion)p Black 1921 6066 a(14)p Black eop end
%%Page: 15 19
TeXDict begin 15 18 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.S end
 249 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
249 15 a
SDict begin H.R end
 249 15 a 249 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 249 15 a Black Black 257 353
3426 5 v Black 257 685 a Ff(primitiv)m(es)38 b(connected)f(together)f
(b)m(y)g(switc)m(hing)h(the)f(motion)f(from)g(stance)i(to)e(w)m(alk)h
(and)257 834 y(from)d(w)m(alk)g(to)g(stance.)404 984
y(In)26 b(Chapter)i(8,)f(w)m(e)h(discuss)g(ab)s(out)e(extend)i(the)f
(basic)g(idea)g(to)f(more)h(complex)g(system,)257 1133
y(or)37 b(scale)h(our)f(metho)s(d)h(to)f(address)h(system)h(with)f
(more)g(di\016cult)g(motion)f(tasks.)58 b(Three)257 1282
y(p)s(ossible)33 b(ideas)e(discussed)j(are)d(the)g(reduction,)h(mec)m
(hanical)h(coupling)e(and)g(ad-ho)s(c)g(man-)257 1432
y(ner.)44 b(The)31 b(three)g(ideas)g(apply)g(to)f(di\013eren)m(t)i(t)m
(yp)s(es)g(of)e(biomec)m(hanical)i(system.)45 b(Hop)s(efully)257
1581 y(they)34 b(will)f(help)g(us)h(to)e(syn)m(thesis)j(motion)e(w)m(e)
h(ha)m(v)m(e)g(not)e(ac)m(hiev)m(ed)j(y)m(et.)404 1731
y(In)h(Chapter)g(9,)g(w)m(e)h(will)f(discuss)i(ab)s(out)d(some)i
(future)f(w)m(ork.)53 b(After)36 b(a)f(retrosp)s(ectiv)m(e)257
1880 y(discussion,)49 b(w)m(e)c(prop)s(osed)f(some)h(new)g(question)g
(and)f(ideas)g(for)g(graphics)g(and)g(neural)257 2029
y(science)35 b(for)d(further)h(researc)m(h.)p Black 1921
6066 a(15)p Black eop end
%%Page: 16 20
TeXDict begin 16 19 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.S end
 455 15 a 0 1 0 TeXcolorrgb 0 1 0 TeXcolorrgb
455 15 a
SDict begin H.R end
 455 15 a 455 15 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 455 15 a Black Black Black
257 1409 a Fk(References)257 1741 y
SDict begin H.S end
 257 1741 a 257 1741
a
SDict begin 17.99446 H.A end
 257 1741 a 257 1741 a
SDict begin [/View [/XYZ H.V]/Dest (appendix*.14) cvn /DEST pdfmark
end
 257 1741 a 257 1741 a
SDict begin H.S end
 257 1741
a 257 1741 a
SDict begin 17.99446 H.A end
 257 1741 a 257 1741 a
SDict begin [/View [/XYZ H.V]/Dest (section*.15) cvn /DEST pdfmark
end
 257 1741 a Black 1921
6066 a Ff(16)p Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
